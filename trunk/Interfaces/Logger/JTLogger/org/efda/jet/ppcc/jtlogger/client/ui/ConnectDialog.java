/*
 * Copyright 2011 EFDA | European Fusion Development Agreement
 *
 * Licensed under the EUPL, Version 1.1 or - as soon they 
   will be approved by the European Commission - subsequent  
   versions of the EUPL (the "Licence"); 
 * You may not use this work except in compliance with the 
   Licence. 
 * You may obtain a copy of the Licence at: 
 *  
 * http://ec.europa.eu/idabc/eupl
 *
 * Unless required by applicable law or agreed to in 
   writing, software distributed under the Licence is 
   distributed on an "AS IS" basis, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either 
   express or implied. 
 * See the Licence for the specific language governing 
   permissions and limitations under the Licence. 
 *
 * $Id$
 *
**/
package org.efda.jet.ppcc.jtlogger.client.ui;

import java.awt.Color;
import java.net.Inet4Address;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author  andre
 */
public class ConnectDialog extends javax.swing.JDialog
{
    
    private boolean ok = false;
    
    private int lastLocalPort = 0;
    
    private String lastRemoteHost = null;
    
    private Color normalCaretColor = null;   
    
    private Color errorCaretColor = Color.RED;
    
    /** Creates new form ConnectDialog */
    public ConnectDialog(java.awt.Frame parent, int defaultPort, String defaultRemoteHost, boolean historySelected, int historyN)
    {
        super(parent, true);
        initComponents();
        ((SpinnerNumberModel)jSpinnerPort.getModel()).setValue(new Integer(defaultPort));
        jTextFieldRemoteHost.setText(defaultRemoteHost);
        normalCaretColor = jTextFieldRemoteHost.getSelectedTextColor();
        jCheckBoxUseHistory.setSelected(historySelected);
        ((SpinnerNumberModel)jSpinnerHistoryN.getModel()).setValue(new Integer(historyN));
        jCheckBoxUseHistoryStateChanged(null);
    }
    
    @Override
    public void setVisible(boolean visible){
        if(visible){
            lastLocalPort = ((SpinnerNumberModel)jSpinnerPort.getModel()).getNumber().intValue();
            lastRemoteHost = jTextFieldRemoteHost.getText().trim();
        }
        super.setVisible(visible);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jButtonOK = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSpinnerPort = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldRemoteHost = new javax.swing.JTextField();
        jCheckBoxUseHistory = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jSpinnerHistoryN = new javax.swing.JSpinner();

        setTitle("Connect");
        setAlwaysOnTop(true);

        jButtonOK.setText("OK");
        jButtonOK.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonOKActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonOK);

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonCancelActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Local port");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 3, 3);
        jPanel2.add(jLabel1, gridBagConstraints);

        jSpinnerPort.setModel(new javax.swing.SpinnerNumberModel(32767, 1024, 65535, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 3, 6);
        jPanel2.add(jSpinnerPort, gridBagConstraints);

        jLabel2.setText("Remote host");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 6, 3, 3);
        jPanel2.add(jLabel2, gridBagConstraints);

        jTextFieldRemoteHost.setColumns(15);
        jTextFieldRemoteHost.setText("127.0.0.1:9099");
        jTextFieldRemoteHost.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                jTextFieldRemoteHostMousePressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 6);
        jPanel2.add(jTextFieldRemoteHost, gridBagConstraints);

        jCheckBoxUseHistory.setText("Request history?");
        jCheckBoxUseHistory.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                jCheckBoxUseHistoryStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 6, 3, 3);
        jPanel2.add(jCheckBoxUseHistory, gridBagConstraints);

        jLabel3.setText("Number of history items");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 6, 6, 3);
        jPanel2.add(jLabel3, gridBagConstraints);

        jSpinnerHistoryN.setModel(new javax.swing.SpinnerNumberModel(1000, 0, 65535, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 6, 6);
        jPanel2.add(jSpinnerHistoryN, gridBagConstraints);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonOKActionPerformed
    {//GEN-HEADEREND:event_jButtonOKActionPerformed
        ok = true;
        setVisible(!checkRemoteHost());        
    }//GEN-LAST:event_jButtonOKActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonCancelActionPerformed
    {//GEN-HEADEREND:event_jButtonCancelActionPerformed
        ok = false;
        setVisible(false);
        jSpinnerPort.setValue(new Integer(lastLocalPort));
        jTextFieldRemoteHost.setText(lastRemoteHost);        
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jTextFieldRemoteHostMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jTextFieldRemoteHostMousePressed
    {//GEN-HEADEREND:event_jTextFieldRemoteHostMousePressed
        jTextFieldRemoteHost.setSelectedTextColor(normalCaretColor);
    }//GEN-LAST:event_jTextFieldRemoteHostMousePressed

    private void jCheckBoxUseHistoryStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jCheckBoxUseHistoryStateChanged
    {//GEN-HEADEREND:event_jCheckBoxUseHistoryStateChanged
        jSpinnerHistoryN.setEnabled(jCheckBoxUseHistory.isSelected());
    }//GEN-LAST:event_jCheckBoxUseHistoryStateChanged
    
    public String getRemoteHost(){
        return jTextFieldRemoteHost.getText();
    }
    
    public int getLocalPort(){
        return ((SpinnerNumberModel)jSpinnerPort.getModel()).getNumber().intValue();
    }
    
    public int getNHistoryItems(){
        return ((SpinnerNumberModel)jSpinnerHistoryN.getModel()).getNumber().intValue();
    }
    
    public boolean isUseHistory(){
        return jCheckBoxUseHistory.isSelected();
    }
    
    public boolean okSelected(){
        return ok;
    }        
    
    private boolean checkRemoteHost(){        
        String host = jTextFieldRemoteHost.getText();
        String[] hostSplit = host.split(":");
                   
        if(hostSplit.length != 2){
            JOptionPane.showMessageDialog(this, "Invalid Syntax = IP:PORT", "Error!", JOptionPane.ERROR_MESSAGE);            
            ok = false;
        }
        else{
            String ipStr = hostSplit[0];
            String portStr = hostSplit[1];
            int value = 0;    
            
            try{
                Inet4Address.getByName(ipStr);
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Invalid IP Address " + e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
                ok = false;
            }            
            if(ok){            
                try{
                    value = Integer.parseInt(portStr);
                    if(value < 1 || value > 65535){
                        throw new NumberFormatException();
                    }
                }
                catch(NumberFormatException nfe){
                    JOptionPane.showMessageDialog(this, "Invalid Port Value!", "Error!", JOptionPane.ERROR_MESSAGE);
                    ok = false;
                }                
            }
        }
        
        if(!ok){
            jTextFieldRemoteHost.setSelectedTextColor(errorCaretColor);
            jTextFieldRemoteHost.select(0, jTextFieldRemoteHost.getText().length());
        }
        
        return ok;
    }
       
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JCheckBox jCheckBoxUseHistory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSpinner jSpinnerHistoryN;
    private javax.swing.JSpinner jSpinnerPort;
    private javax.swing.JTextField jTextFieldRemoteHost;
    // End of variables declaration//GEN-END:variables
    
}
