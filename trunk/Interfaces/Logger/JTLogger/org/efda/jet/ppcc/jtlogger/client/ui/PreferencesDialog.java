/*
 * Copyright 2011 EFDA | European Fusion Development Agreement
 *
 * Licensed under the EUPL, Version 1.1 or - as soon they 
   will be approved by the European Commission - subsequent  
   versions of the EUPL (the "Licence"); 
 * You may not use this work except in compliance with the 
   Licence. 
 * You may obtain a copy of the Licence at: 
 *  
 * http://ec.europa.eu/idabc/eupl
 *
 * Unless required by applicable law or agreed to in 
   writing, software distributed under the Licence is 
   distributed on an "AS IS" basis, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either 
   express or implied. 
 * See the Licence for the specific language governing 
   permissions and limitations under the Licence. 
 *
 * $Id$
 *
**/
package org.efda.jet.ppcc.jtlogger.client.ui;

import java.awt.Color;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;
import javax.swing.event.EventListenerList;
import org.efda.jet.ppcc.jtlogger.client.core.JTPreferences;
import org.efda.jet.ppcc.jtlogger.client.core.PreferenceChangeListener;

/**
 *
 * @author  andre
 */
public class PreferencesDialog extends javax.swing.JDialog
{
    private JTPreferences prefs = null;
    
    /** Creates new form PreferencesDialog */
    public PreferencesDialog(java.awt.Frame parent, JTPreferences prefs)
    {
        super(parent, false);
        setAlwaysOnTop(true);
        initComponents();
        this.prefs = prefs;
    }
    
    @Override
    public void setVisible(boolean visible){
        super.setVisible(visible);
        if(visible){
            updateFromPreferences();
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jCheckBoxAutoStart = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldBroadcastTime = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldMaxPackets = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButtonBackgroundColor = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldFontSize = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldNodeObs = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jCheckBoxDeleteObsoleteNodes = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jButtonOK = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Connect at startup?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 6);
        jPanel1.add(jCheckBoxAutoStart, gridBagConstraints);

        jLabel2.setText("UDP Broadcast refresh time [ms]");
        jLabel2.setToolTipText("The amount of time that the broadcast thread is allowed to sleep");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 6, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        jTextFieldBroadcastTime.setColumns(6);
        jTextFieldBroadcastTime.setText("jTextField1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 6);
        jPanel1.add(jTextFieldBroadcastTime, gridBagConstraints);

        jLabel3.setText("Maximum number of packets");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 6, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        jTextFieldMaxPackets.setColumns(6);
        jTextFieldMaxPackets.setText("10000");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 6);
        jPanel1.add(jTextFieldMaxPackets, gridBagConstraints);

        jLabel4.setText("Background color");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 6, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        jButtonBackgroundColor.setBackground(java.awt.Color.black);
        jButtonBackgroundColor.setMaximumSize(new java.awt.Dimension(20, 20));
        jButtonBackgroundColor.setMinimumSize(new java.awt.Dimension(20, 20));
        jButtonBackgroundColor.setPreferredSize(new java.awt.Dimension(20, 20));
        jButtonBackgroundColor.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonBackgroundColorActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanel1.add(jButtonBackgroundColor, gridBagConstraints);

        jLabel5.setText("Font size");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 6, 0, 0);
        jPanel1.add(jLabel5, gridBagConstraints);

        jTextFieldFontSize.setColumns(6);
        jTextFieldFontSize.setText("12");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 6);
        jPanel1.add(jTextFieldFontSize, gridBagConstraints);

        jLabel6.setText("Node obsolete time");
        jLabel6.setToolTipText("After how many seconds should a node be considered obsolete?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 6, 0, 0);
        jPanel1.add(jLabel6, gridBagConstraints);

        jTextFieldNodeObs.setColumns(6);
        jTextFieldNodeObs.setText("12");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 6);
        jPanel1.add(jTextFieldNodeObs, gridBagConstraints);

        jLabel7.setText("Delete obsolete nodes automatically?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 6, 0, 0);
        jPanel1.add(jLabel7, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 6);
        jPanel1.add(jCheckBoxDeleteObsoleteNodes, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jButtonOK.setText("OK");
        jButtonOK.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonOKActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonOK);

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonCancelActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonBackgroundColorActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonBackgroundColorActionPerformed
    {//GEN-HEADEREND:event_jButtonBackgroundColorActionPerformed
        Color selectedColor = JColorChooser.showDialog(this, "Background color", jButtonBackgroundColor.getBackground());
        if(selectedColor != null)        
            jButtonBackgroundColor.setBackground(selectedColor);                
}//GEN-LAST:event_jButtonBackgroundColorActionPerformed

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonOKActionPerformed
    {//GEN-HEADEREND:event_jButtonOKActionPerformed
        if(!checkValues()){
            return;
        }
        
        prefs.setAutoStart(jCheckBoxAutoStart.isSelected());
        prefs.setBackgroundColor(jButtonBackgroundColor.getBackground());
        prefs.setMaxPackets(Integer.parseInt(jTextFieldMaxPackets.getText().trim()));
        prefs.setUDPBroadcastRefreshRate(Integer.parseInt(jTextFieldBroadcastTime.getText().trim()));
        prefs.setFontSize(Integer.parseInt(jTextFieldFontSize.getText().trim()));
        prefs.setNodeObsoleteSeconds(Integer.parseInt(jTextFieldNodeObs.getText().trim()));
        prefs.setDeleteObsoleteNodesAutomatically(jCheckBoxDeleteObsoleteNodes.isSelected());
        firePreferencesChanged();
        setVisible(false);
    }//GEN-LAST:event_jButtonOKActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonCancelActionPerformed
    {//GEN-HEADEREND:event_jButtonCancelActionPerformed
        updateFromPreferences();
        setVisible(false);
    }//GEN-LAST:event_jButtonCancelActionPerformed
    
    public void requestPreferencesUpdate(){
        firePreferencesChanged();
    }        
        
    private void updateFromPreferences(){
        jTextFieldMaxPackets.setText("" + prefs.getMaxPackets());
        jTextFieldBroadcastTime.setText("" + prefs.getUDPBroadcastRefreshRate());
        jButtonBackgroundColor.setBackground(prefs.getBackgroundColor());
        jCheckBoxAutoStart.setSelected(prefs.isAutoStart());
        jTextFieldFontSize.setText("" + prefs.getFontSize());
        jTextFieldNodeObs.setText("" + prefs.getNodeObsoleteSeconds());
        jCheckBoxDeleteObsoleteNodes.setSelected(prefs.deleteObsoleteNodesAutomatically());           
    }
    
    private boolean checkValues(){
        int value = 0;
        try{
            value = Integer.parseInt(jTextFieldMaxPackets.getText().trim());
            if(value < 1){
                showError("Invalid value for max packets. Value must be > 0");
                jTextFieldMaxPackets.select(0, jTextFieldMaxPackets.getText().length());
            }
        }
        catch(NumberFormatException nfe){
            showError("Invalid value for max packets");
            jTextFieldMaxPackets.select(0, jTextFieldMaxPackets.getText().length());
            return false;
        }
        
        try{
            value = Integer.parseInt(jTextFieldBroadcastTime.getText().trim());
            if(value < 1){
                showError("Invalid value for udp broadcast refresh rate. Value must be > 0");
                jTextFieldBroadcastTime.select(0, jTextFieldBroadcastTime.getText().length());
            }
        }
        catch(NumberFormatException nfe){
            showError("Invalid value for udp broadcast refresh rate");
            jTextFieldBroadcastTime.select(0, jTextFieldBroadcastTime.getText().length());
            return false;
        }
        try{
            value = Integer.parseInt(jTextFieldFontSize.getText().trim());
            if(value < 1){
                showError("Invalid value for font size. Value must be > 4 and < 30");
                jTextFieldFontSize.select(0, jTextFieldFontSize.getText().length());
            }
        }
        catch(NumberFormatException nfe){
            showError("Invalid value for font size. Value must be an integer");
            jTextFieldFontSize.select(0, jTextFieldFontSize.getText().length());
            return false;
        }
        
        return true;
    }
    
    private void showError(String msg){
        JOptionPane.showMessageDialog(this, "Error", msg, JOptionPane.ERROR_MESSAGE);
    }
    
    //List of listeners for the preferences change
    private EventListenerList listenersList = new EventListenerList();
    
    private void firePreferencesChanged(){
        if (listenersList == null) return;
        Object[] listeners = listenersList.getListenerList();
        for (int i = listeners.length - 2; i >= 0; i -= 2)
        {
            if (listeners[i]==PreferenceChangeListener.class){                
                ((PreferenceChangeListener)listeners[i+1]).preferencesChanged();
            }
        }        
    }
    
    public void addPreferenceChangeListener(PreferenceChangeListener listener){
        listenersList.add(PreferenceChangeListener.class, listener);
    }
    
    public void removePreferenceChangeListener(PreferenceChangeListener listener){
        listenersList.remove(PreferenceChangeListener.class, listener);
    }  
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBackgroundColor;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JCheckBox jCheckBoxAutoStart;
    private javax.swing.JCheckBox jCheckBoxDeleteObsoleteNodes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextFieldBroadcastTime;
    private javax.swing.JTextField jTextFieldFontSize;
    private javax.swing.JTextField jTextFieldMaxPackets;
    private javax.swing.JTextField jTextFieldNodeObs;
    // End of variables declaration//GEN-END:variables
    
}
