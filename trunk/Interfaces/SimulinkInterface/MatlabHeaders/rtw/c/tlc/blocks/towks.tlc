
%% 
%% 
%%
%% Copyright 1994-2012 The MathWorks, Inc.
%%
%% Abstract:
%%      To Workspace block target file. For use with standard .mat file
%%      logging.
%%

%% In order to use this file to generate code for both
%% ToWorkspace and SignalToWorkspace, the wildcard must be used.
%%
%implements * "C"

%include "logging_sup.tlc"

%% Function: BlockInstanceSetup ==============================================
%% Abstract:
%%   Set expression folding compliance
%%
%function BlockInstanceSetup(block, system) void
  %<LibBlockSetIsExpressionCompliant(block)>
%endfunction


%% Function: FixPt_Fix2DblConvParams ==========================================
%% Abstract:
%%   A fixpoint to double conversion is completely characterized by three
%%   parameters according to the formula:
%%     ValueAsDouble = Slope * 2^Exp * ValueAsFixedPoint + Bias
%%   Given a fixed point data type, this function returns the three parameters
%%   Slope, Exp and Bias in a string array.
%%
%function FixPt_Fix2DblConvParams(outDT,inDT) void
  %if !FixPt_DataTypeIsDouble(outDT)
    %%START_ASSERT
    %assign errTxt = "Error: The argument outDT must be a double"
    %<LibReportFatalError(errTxt)>
    %%END_ASSERT
  %endif
  %%
  %if !FixPt_DataTypeIsFloat(inDT)  
    %assign bitsPerChunk     = LargestIntegerNumBits
    %assign numOfChunk       = FixPt_NumChunks(inDT.RequiredBits)
    %assign isSigned         = inDT.IsSigned
  %else
    %% floating point and scaled double
    %% These next three members are not used in this case
    %assign bitsPerChunk     = 0
    %assign numOfChunk       = 0
    %assign isSigned         = 0
  %endif
  %assign fExp   = inDT.FixedExp - outDT.FixedExp
  %assign fSlope = CAST("Real",inDT.FracSlope) / CAST("Real",outDT.FracSlope) 
  %assign bias   = ( CAST("Real",inDT.Bias) - CAST("Real",outDT.Bias) ) / CAST("Real",outDT.FracSlope)
  %assign retVectStr = ["%<bitsPerChunk>", "%<numOfChunk>", "%<isSigned>", "%<fSlope>", "%<fExp>", "%<bias>"]
  %return retVectStr
  %%
%endfunction  %% FixPt_Fix2DblConvParams


%% Function: Start =============================================================
%% Abstract:
%%      If we are using the standard .mat file logging then write out
%%      call to create the data logging variable. In addition, if the scope
%%      is constant then we need to log the data once here.
%%
%function Start(block, system) Output
  %if CodeFormat == "S-Function"
    %assign warnTxt = "ToWorkspace blocks not currently supported " ...
      "for S-Function code format.  Block disabled."
    %<LibBlockReportWarning(block, warnTxt)>
    %return
  %endif
  %%
  %if MatFileLogging != 0 && (TargetType == "RT" || isRSim)
    %assign name          = STRING(ParamSettings.VariableName)
    %assign maxDataPoints = ParamSettings.MaxDataPoints[0]
    %assign decimation    = ParamSettings.Decimation[0]
    %assign width         = LibBlockInputSignalWidth(0)
    %assign nDims         = LibBlockInputSignalNumDimensions(0)
    %assign dims          = LibBlockInputSignalDimensions(0)      
    %assign isVarDims     = LibGetIsInputPortVarDims(0) %%is dimension mode VarDims
    %assign sigDTypeId    = LibBlockInputSignalDataTypeId(0)
    %%
    %if (LibIsDataTypeLogSupported(sigDTypeId, TLC_TRUE) == TLC_FALSE)
      %assign warnTxt = "Unable to log data for this block " ...
        "because MAT-File logging is not supported for " ...
        "data type '%<LibGetDataTypeNameFromId(sigDTypeId)>'."
      %<LibBlockReportWarning(block, warnTxt)>
      %return
    %endif
    %%
    %assign sigDTypeEnum  = LibGetDataTypeEnumFromId(sigDTypeId)
    %assign logDTypeId    = SLibSigToLogDataType(sigDTypeId, tSS_DOUBLE)
    %assign logDTypeEnum  = LibGetDataTypeEnumFromId(logDTypeId)
    %assign cmplx         = LibBlockInputSignalIsComplex(0)
    %assign frameData     = ParamSettings.FrameData
    %assign logVar        = LibBlockPWork(LoggedData, "", "", 0)
    %assign ts            = LibBlockSampleTime(block)
    %assign nulldef       = SLibGetNullDefinitionFromTfl()
    %assign currSigDimsInitStr   = ""
    %assign currSigDimsSetStr    = ""
    %assign currSigDimsSizeStr   = ""
    %assign currSigDimsSize      = ConfigSet.TargetBitPerInt/8
    %assign currSigDimsSizeComma = ""
    %%
    %if ParamSettings.SaveFormat == "Array"
      {
      %if nDims == 1
        int_T  dimensions[1] = {%<dims[0]>};
      %else
        %assign dimsInit = "int_T  dimensions[%<nDims>] = {"
        %foreach dimsIdx = nDims
          %assign dimsInit = dimsInit + "%<dims[dimsIdx]>"
          %if dimsIdx != nDims-1
            %assign dimsInit = dimsInit + ", "
          %endif
        %endforeach
        %assign dimsInit = dimsInit + "};"
        %<dimsInit>
      %endif
      %%
      %% For continguous, fixed-point datatype use an RTWLogDataTypeConvert
      %% object for converting from fixed-point to double before logging.
      %% The alternative is to create a local variable large enough to hold
      %% the converted data.  For some video signals, this variable becomes
      %% so large that the generated code seg-faults when attempting to
      %% allocate it.
      %%
      %if LibIsDataTypeFixpt(sigDTypeId) && ParamSettings.InputContiguous == "yes"
        %assign typeQ              = "static "
        %assign sigFixPtDType      = FixPt_GetDataTypeFromIndex(sigDTypeId)
        %assign logFixPtDtype      = FixPt_GetDataTypeFromIndex(logDTypeId)
        %assign sigDTypeConvParams = FixPt_Fix2DblConvParams(logFixPtDtype,sigFixPtDType)
        %<typeQ> RTWLogDataTypeConvert rt_ToWksDataTypeConvert[] = {
          {1, %<logDTypeEnum>, %<sigDTypeEnum>, %<sigDTypeConvParams[0]>, %<sigDTypeConvParams[1]>, ...
            %<sigDTypeConvParams[2]>, %<sigDTypeConvParams[3]>, %<sigDTypeConvParams[4]>, %<sigDTypeConvParams[5]>}
        };	    
        
        %% "Array" format logging only supports fixed-size signal logging,
        %% so set currSigDims and currSigDimsSize to NULL, and set logValDims
        %% to NO_LOGVALDIMS
        %<SLibGenLogVarCreateWithConvert(logVar, name, logDTypeEnum, ...
          "rt_ToWksDataTypeConvert", 0, cmplx, ...
          frameData, width, nDims, "dimensions", "NO_LOGVALDIMS",...
          nulldef, nulldef, maxDataPoints, decimation, ts, 1)>
          if (%<logVar> == %<nulldef>) return;
        }
      %else
        %% "Array" format logging only supports fixed-size signal logging,
        %% so set currSigDims and currSigDimsSize to NULL, and set logValDims
        %% to NO_LOGVALDIMS
        %<SLibGenLogVarCreate(logVar, name, logDTypeEnum, 0, cmplx, ...
          frameData, width, nDims, "dimensions", "NO_LOGVALDIMS", ...
          nulldef, nulldef, maxDataPoints, decimation, ts, 1)>
          if (%<logVar> == %<nulldef>) return;
        }
      %endif
    %else %% Structure
      {
      %assign typeQ    = "static "
      %assign label    = ParamSettings.Label
      %%
      %<typeQ> int_T            rt_ToWksWidths[]         = {%<width>};
      %<typeQ> int_T            rt_ToWksNumDimensions[]  = {%<nDims>};
      %if nDims == 1
        %<typeQ> int_T            rt_ToWksDimensions[]   = {%<dims[0]>};
        
        %if isVarDims
          %% current signal dimensions
          %assign currSigDims = SLibGetCurrentInputPortDimensions(0, 0)
        %else
          %% actually we don't care if the signal is fixed-size signal
          %assign currSigDims = "rt_ToWksWidths[0]"
        %endif 
        %assign currSigDimsInitStr = "%<typeQ> void *rt_ToWksCurrSigDims[] ={%<nulldef>};"
        %assign currSigDimsSetStr = "rt_ToWksCurrSigDims[0] = &%<currSigDims>; \n"
        %assign currSigDimsSizeStr = %<currSigDimsSize>
      %else
        %assign dimsInit = "%<typeQ> int_T  rt_ToWksDimensions[] = {"
        %assign currSigDimsInitStr = "%<typeQ> void *rt_ToWksCurrSigDims[] = {"
        %foreach dimsIdx = nDims
          %assign currSigDimsSizeStr = currSigDimsSizeStr + currSigDimsSizeComma + "%<currSigDimsSize>"
          %assign currSigDimsSizeComma = ", "
            
          %assign dimsInit = dimsInit + "%<dims[dimsIdx]>"
          %assign currSigDimsInitStr = currSigDimsInitStr + nulldef
          %if isVarDims
            %assign currSigDims = SLibGetCurrentInputPortDimensions(0, dimsIdx)
          %else
            %assign currSigDims = "rt_ToWksWidths[0]"
          %endif           
          %assign currSigDimsSetStr = currSigDimsSetStr + ...
                      "rt_ToWksCurrSigDims[%<dimsIdx>] = &%<currSigDims>; \n"
          
          %if dimsIdx != nDims-1
            %assign dimsInit = dimsInit + ", "
            %assign currSigDimsInitStr = currSigDimsInitStr + ", "
          %endif
        %endforeach
        %assign dimsInit = dimsInit + "};"
        %assign currSigDimsInitStr = currSigDimsInitStr + "};"
        %<dimsInit>
      %endif
      %<typeQ> boolean_T        rt_ToWksIsVarDims[]      = {%<isVarDims>};
      %<currSigDimsInitStr>
      %<typeQ> int_T            rt_ToWksCurrSigDimsSize[] = {%<currSigDimsSizeStr>};
      %<typeQ> BuiltInDTypeId   rt_ToWksDataTypeIds[]    = {%<logDTypeEnum>};
      %<typeQ> int_T            rt_ToWksComplexSignals[] = {%<cmplx>};
      %<typeQ> int_T            rt_ToWksFrameData[]      = {%<frameData>};
      %<typeQ> const char_T     *rt_ToWksLabels[]       = {"%<STRING(label)>"};
      %if LibIsDataTypeFixpt(sigDTypeId) && ParamSettings.InputContiguous == "yes"
        %assign sigFixPtDType = FixPt_GetDataTypeFromIndex(sigDTypeId)
        %assign logFixPtDtype = FixPt_GetDataTypeFromIndex(logDTypeId)
        %assign sigDTypeConvParams = FixPt_Fix2DblConvParams(logFixPtDtype,sigFixPtDType)
        %<typeQ> RTWLogDataTypeConvert rt_ToWksDataTypeConvert[] = {
          {1, %<logDTypeEnum>, %<sigDTypeEnum>, %<sigDTypeConvParams[0]>, %<sigDTypeConvParams[1]>, ...
            %<sigDTypeConvParams[2]>, %<sigDTypeConvParams[3]>, %<sigDTypeConvParams[4]>, %<sigDTypeConvParams[5]>}
        };	    
        %<typeQ> RTWLogSignalInfo rt_ToWksSignalInfo       = {
          1,
          rt_ToWksWidths,
          rt_ToWksNumDimensions,
          rt_ToWksDimensions,
          rt_ToWksIsVarDims,
          rt_ToWksCurrSigDims,
          rt_ToWksCurrSigDimsSize,
          rt_ToWksDataTypeIds,
          rt_ToWksComplexSignals,
          rt_ToWksFrameData,
          {rt_ToWksLabels},
          %<nulldef>,
          %<nulldef>,
          %<nulldef>,
          {%<nulldef>},
          {%<nulldef>},
          %<nulldef>,
          rt_ToWksDataTypeConvert
        };
      %else
        %<typeQ> RTWLogSignalInfo rt_ToWksSignalInfo       = {
          1,
          rt_ToWksWidths,
          rt_ToWksNumDimensions,
          rt_ToWksDimensions,
          rt_ToWksIsVarDims,
          rt_ToWksCurrSigDims,
          rt_ToWksCurrSigDimsSize,
          rt_ToWksDataTypeIds,
          rt_ToWksComplexSignals,
          rt_ToWksFrameData,
          {rt_ToWksLabels},
          %<nulldef>,
          %<nulldef>,
          %<nulldef>,
          {%<nulldef>},
          {%<nulldef>},
          %<nulldef>,
          %<nulldef>
        }; 
      %endif
      
      %assign blockPath = STRING(LibGetBlockPath(block))
      %<typeQ> const char_T rt_ToWksBlockName[]          = "%<blockPath>";
  
      %if isVarDims
        /* set currSigDims field */
        %<currSigDimsSetStr>
      %endif
      
      %assign logTime  = (ParamSettings.SaveFormat == "StructureWithTime")
      %<SLibGenStructLogVarCreate(logVar, name, logTime, maxDataPoints, ...
        decimation, ts, "&rt_ToWksSignalInfo", "rt_ToWksBlockName")>
      if (%<logVar> == %<nulldef>) return;
      }
    %endif
  
  %elseif (IsModelReferenceSimTarget() && ParamSettings.SaveFormat == "Dataset" )
    %% Model Reference Simulation Target: Dataset Format
    
    %% Create dataset elements
    %<CreateDatasetVariable(block,system)>
    
    %% Constant-Time Output processed in Start
    %<logSample(block, system, -2)>
  %endif
%endfunction %% Start


%% Function: Outputs ===========================================================
%% Abstract:
%%      If we are using the standard .mat file logging and the to workspace
%%      block is not constant, then write out a call to log data. If the
%%      sample time of the to workspace is triggered, then we log whenever we
%%      are called, otherwise we log only in major time steps. Constant
%%      sample are handled in the Start function.
%%
%%      For dataset format in model reference in multitasking, OutputsForTID 
%%      should be called instead of this to handle port-based sample times.
%%
%function Outputs(block, system) Output
  %if  (MatFileLogging != 0) ...
    && (TargetType == "RT" || isRSim) ...
    && (CodeFormat != "S-Function")
    
    %assign arrayFormat = (ParamSettings.SaveFormat == "Array")
    %assign logVar = LibBlockPWork(LoggedData, "", "", 0)
    %assign sigDTypeId    = LibBlockInputSignalDataTypeId(0)
    %assign nulldef       = SLibGetNullDefinitionFromTfl()
    %%
    %if (LibIsDataTypeLogSupported(sigDTypeId, TLC_TRUE) == TLC_FALSE)
      %return
    %endif
    %%
    %assign logDTypeId = SLibSigToLogDataType(sigDTypeId, tSS_DOUBLE)
    %if ParamSettings.InputContiguous == "yes" && ...
      LibIsDataTypeBuiltinOrFixpt(sigDTypeId)
      %assign inpPtr = "%<LibBlockInputSignalAddr(0, "", "", 0)>"
      %if arrayFormat
        %if isRSimWithSolverModule
	  if (%<RTMGet("LogOutput")>) {
	%endif
        %% Array format logging supports fixed-size signal logging only
        %assign isVarDims = 0
	%<SLibGenLogVarUpdate("(LogVar*) (%<logVar>)", inpPtr, isVarDims)>
	%if isRSimWithSolverModule
	  }
	%endif
      %else
        %if ParamSettings.SaveFormat == "StructureWithTime"
          {
            double locTime = %<LibGetTaskTimeFromTID(block)>;
          %assign timePtr = "&locTime"
        %else
          %assign timePtr = nulldef
        %endif
        %if isRSimWithSolverModule
	  if (%<RTMGet("LogOutput")>) {
	%endif
	%<SLibGenStructLogVarUpdate(logVar, timePtr, inpPtr)>
	%if isRSimWithSolverModule
	  }
	%endif
        %if ParamSettings.SaveFormat == "StructureWithTime"
          }
        %endif
      %endif
    %else
    {
      %assign width = LibBlockInputSignalWidth(0)
      %assign cmplx = LibBlockInputSignalIsComplex(0)
      %if LibIsBuiltInDataType(sigDTypeId)
      %assign dtype = LibBlockInputSignalDataTypeName(0,"")
      %else
        %if !cmplx
          %assign dtype = LibGetDataTypeNameFromId(logDTypeId)
        %else
          %assign dtype = LibGetDataTypeComplexNameFromId(logDTypeId)
        %endif
      %endif
      %<dtype> u[%<width>];
\

      %assign rollVars = ["U"]
      %roll idx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
        %assign input = LibBlockInputSignal(0,"",lcv,idx)
        %assign rhs = LibGetIndexedElement("u", width, lcv, idx)
        %if LibIsBuiltInDataType(sigDTypeId)
        %<rhs> = %<input>;
        %else
          %assign convertBetweenFcn = ...
            LibConvertBetweenTLCFcnName(sigDTypeId)
          %if LibConvertBetweenTLCFcnFile(sigDTypeId) != ""
            %include "%<LibConvertBetweenTLCFcnFile(sigDTypeId)>"
          %endif
          %assign status = LibComplexConvertBetweenForSrcId(...
            logDTypeId, sigDTypeId, cmplx, input, "", rhs)
          %if status != 1
	    %%START_ASSERT
            %assign errTxt = ...
              "Error: funcion %<convertBetweenFcn> doesn't support " ...
              "converting the input signal to type double."
            %<LibBlockReportFatalError(block, errTxt)>
	    %%END_ASSERT
          %endif
        %endif
      %endroll

      %if arrayFormat
        %if isRSimWithSolverModule
	  if (%<RTMGet("LogOutput")>) {
	%endif
        %% Array format logging supports fixed-size signal logging only
        %assign isVarDims = 0       
	%<SLibGenLogVarUpdate("(LogVar*)%<logVar>", "u", isVarDims)>
        %if isRSimWithSolverModule
	  }
	%endif
      %else
        %if ParamSettings.SaveFormat == "StructureWithTime"
          {
            double locTime = %<LibGetTaskTimeFromTID(block)>;
            %assign timePtr = "&locTime"
        %else
          %assign timePtr = nulldef
        %endif
        %if isRSimWithSolverModule
	  if (%<RTMGet("LogOutput")>) {
	%endif
	%<SLibGenStructLogVarUpdate(logVar, timePtr, "u")>
        %if isRSimWithSolverModule
	  }
	%endif
        %if ParamSettings.SaveFormat == "StructureWithTime"
          }
        %endif
      %endif
    }
    %endif
  %elseif Accelerator
    /* Call into Simulink for To Workspace */
    %<SLibCallBlockInSimulink(system, block, "SS_CALL_MDL_OUTPUTS")>

  %elseif (IsModelReferenceSimTarget() && ParamSettings.SaveFormat == "Dataset" )
    %% Model Reference - Dataset format. This is called for Singletasking
    %% or blocks with 1 sample time. For multitasking, port-based sample
    %% times, OutputsForTID will be called
    %<logSingletasking(block, system)>
    
  %endif

%endfunction %% Outputs

%% Function: OutputsForTID =====================================================
%% Abstract:
%%      Update dataset format logged data for model reference multitasking. In
%%      non-dataset formats, the block has single sample time and therefore we
%%      call the standard Outputs.
%%
%function OutputsForTID(block, system, tid) Output

  %if (IsModelReferenceSimTarget() && ParamSettings.SaveFormat == "Dataset" )
    %<logMultitasking(block, system, tid)>
  %else
    %<Outputs(block, system)>
  %endif
  
%endfunction %% OutputsForTID

%% Function: CreateDatasetVariable =============================================
%% Abstract:
%%   Create the necessary variables for dataset format logging for model
%%   reference simulation.
%%
%function CreateDatasetVariable(block, system) Output  
  
  %% Settings common to all ports
  %assign simS          = RTMsGet(system, "MdlRefSfcnS")
  %assign blockPath     = STRING(ParamSettings.LogBlockPath)
  %assign maxDataPoints = ParamSettings.MaxDataPoints[0]
  %assign decimation    = ParamSettings.Decimation[0]
  %assign busHierIdx    = ParamSettings.HierInfoIndex[0]
  %assign nulldef       = SLibGetNullDefinitionFromTfl()

  { %% Open bracket for dataset creation  
    %% Construct dataset description
    %assign mapInfo = RTMsGet(system, "DataMapInfo")
    %if ParamSettings.SignalLogging[0]
      %assign dsName = nulldef
    %else
      %assign dsName = "\"" + STRING(ParamSettings.VariableName) + "\""
    %endif
    void *pDatasetDesc;
    _ssLoggerCreateDatasetDescriptWithMMI(%<simS>,
                                          &%<mapInfo>.mmi,
                                          0,
                                          %<nulldef>,
                                          %<dsName>,
                                          &pDatasetDesc);
    
    %% Get the number of elements to add - buses are always logged as 1 element
    %if busHierIdx < 0
      %assign numElements = block.NumDataInputPorts
    %else
      %assign numElements = 1
    %endif
    
    %% Iterate over number of elements
    %assign portIdx = 0
    %foreach elementIdx = numElements
      {
        %% Element name
        %assign elName = STRING(ParamSettings.ElementNames[elementIdx])
        
        %% Logged port index
        %if ParamSettings.ConnectedPortIdx[0] == 0
          %assign logPortIdx = portIdx + 1
        %else
          %assign logPortIdx = ParamSettings.ConnectedPortIdx[0]
        %endif     
    
        %% Construct the element description
        void *pValuesDesc;
        void *pElementDesc;
        ssLoggerCreateBusValuesDescription(%<simS>, %<busHierIdx>, &pValuesDesc);
        ssLoggerAddSignalDescriptionWithValuesDescription(%<simS>,
                                                          &pDatasetDesc,
                                                          "%<elName>",
                                                          "%<blockPath>",
                                                          %<logPortIdx>,
                                                          %<maxDataPoints>,
                                                          %<decimation>,
                                                          &pValuesDesc,
                                                          &pElementDesc);
                                          
        %% Determine how many signals are in this element
        %if busHierIdx < 0
          %assign numSignals = 1
        %else
          %assign numSignals = block.NumDataInputPorts
        %endif
        
        %% Iterate over all signals
        %foreach signalIdx = numSignals
          {
            %assign sigDTypeId    = LibBlockInputSignalDataTypeId(portIdx)
            %assign cmplx         = LibBlockInputSignalIsComplex(portIdx)
            %assign nDims         = LibBlockInputSignalNumDimensions(portIdx)
            %assign dims          = LibBlockInputSignalDimensions(portIdx)
            
            %assign isLinearInterp = ParamSettings.LinearInterpolation[portIdx]
            %assert(isLinearInterp == 0 || isLinearInterp == 1)
            %assign interpStr  =  "SS_LINEAR_INTERPOLATION"
            %if %<isLinearInterp> == 0
              %assign interpStr = "SS_ZOH_INTERPOLATION"
            %endif
            
            %% Signal name for non-bus signals
            %if busHierIdx < 0
              %assign sigName = "\"" + STRING(ParamSettings.SignalNames[portIdx]) + "\"" 
            %else
              %assign sigName = nulldef
            %endif
            
            %% Dimensions vector
            %if nDims == 1
              int_T  dimensions[1] = {%<dims[0]>};
            %else
              %assign dimsInit = "int_T  dimensions[%<nDims>] = {"
              %foreach dimsIdx = nDims
                %assign dimsInit = dimsInit + "%<dims[dimsIdx]>"
                %if dimsIdx != nDims-1
                  %assign dimsInit = dimsInit + ", "
                %endif
              %endforeach
              %assign dimsInit = dimsInit + "};"
              %<dimsInit>
            %endif

            %% ENUM data types
            %if LibIsEnumDataType(sigDTypeId)
	          %assign dtName = LibGetDataTypeNameFromId(sigDTypeId)
	          DTypeId dtId = ssGetDataTypeId(%<simS>, "%<dtName>");
              if(dtId == INVALID_DTYPE_ID) return;
		      %assign dtStr = "dtId"

            %% FIXED POINT data types
            %elseif LibIsDataTypeFixpt(sigDTypeId)
              %assign curDT = FixPt_GetDataTypeFromIndex(sigDTypeId)
	          DTypeId dtId = ssGetDataTypeId(%<simS>, "%<curDT.DataTypeName>");
              if(dtId == INVALID_DTYPE_ID) return;
		      %assign dtStr = "dtId"

            %% BUILT-IN data types
            %elseif LibIsBuiltInDataType(sigDTypeId)
              %assign dtStr = LibGetDataTypeEnumFromId(sigDTypeId)

            %% UNKNOWN types
            %else
              %assign errTxt = ...
                "User-defined data types not supported for model reference simulation logging."
              %<LibReportFatalError(errTxt)>
	        %endif

            %% Construct the timeseries description
            ssLoggerAddTimeseriesDescriptionWithInterpolation(
                                            %<simS>,
                                             &pDatasetDesc,
                                             &pElementDesc,
                                             %<sigName>,
                                             %<nDims>,
                                             dimensions,
                                             %<dtStr>,
                                             %<cmplx>,
                                             %<interpStr>);
                        
            %assign portIdx = portIdx + 1
          }
        %endforeach %% signalIdx
      }
    %endforeach %% elementIdx
  
    %% Store elements in Pwork vector. Note that ssDatasetCreateFromDescpt will
    %% set ALL elements in the pwork vector, not just index 0.
    %assign pwork = LibBlockPWork(LoggedData, "", "", 0)
    
    %% Construct dataset and elements from description
    ssLoggerCreateElementFromDescription(%<simS>, &pDatasetDesc, &%<pwork>);
    
  } %% Close bracket for dataset creation

%endfunction %% CreateDatasetVariable

%% [EOF] towks.tlc
