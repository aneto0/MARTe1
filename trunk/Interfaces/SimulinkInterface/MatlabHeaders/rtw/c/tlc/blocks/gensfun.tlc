%%
%% Copyright 1994-2012 The MathWorks, Inc.
%%
%% Abstract: Generic S-Function block target file
%%
%% Check if a specific TLC file for this s-function exists.
%% If so, execute its OOP function, otherwise, make an
%% s-function call.
%%

%implements "S-Function" "C"

%% Function: FcnChildSFunctionIndex ===========================================
%% Abstract:
%%      This function manages the global child s-function list,
%%      and returns the block's S-Function index.  The index
%%      is determined by the global variable NumChildSFunctions
%%
%%      In addition, the function sets all the S-Function's parameters
%%      to "required".
%%
%%      block = reference to the block
%%
%function FcnChildSFunctionIndex(block) void
  %if EXISTS("block.SFunctionIdx") == 0
    %% register the s-function in the global s-function list

    %assign SFunctionIdx = NumChildSFunctions
    %assign block = block + SFunctionIdx
    %assign ::CompiledModel.ChildSFunctionList = ...
      ::CompiledModel.ChildSFunctionList + block
    %assign ::CompiledModel.NumChildSFunctions = ...
      ::CompiledModel.NumChildSFunctions + 1

  %endif
  %return block.SFunctionIdx
%endfunction


%% Function: FcnCopyStatesFromWorkVector ======================================
%% Abstract:
%%      Function to copy the s-functions contiguous state vector to the
%%      "non-contiguous" model state vector.
%%
%%      s  = child simstruct
%%      xc = continuous states
%%      xd = discrete states
%%
%function FcnCopyStatesFromWorkVector(s, xc, xd) Output
  (void) %<LibGenMemFcnCall("memcpy", xc, "sfcnX", ...
    "ssGetNumContStates(%<s>)*sizeof(real_T)")>;
  (void) %<LibGenMemFcnCall("memcpy", xd, "sfcnX+ssGetNumContStates(%<s>)", ...
    "ssGetNumDiscStates(%<s>)*sizeof(real_T)")>;
%endfunction

%% Function: FcnGetAndCheckSFunctionType =======================================
%% Abstract:
%%      Function to determine SFunctionType from S-function's ParamSettings and
%%      does some checking based on the type.
%%
%function FcnGetAndCheckSFunctionType(block)
  %with block
    %assign funcName  = ParamSettings.FunctionName
    %%
    %% Determine S-function type (e.g. was it remapped, is it inlined, etc.)
    %%
    %% The result of this will be to set
    %%    SFunctionType  == "C-MEX", "TLC", or "OTHER"
    %%
    %if ParamSettings.Inlined == "yes"
      %assign fileExists = LibBlockSFunctionFileExists(funcName)
      %%
      %if !fileExists
	%assign errTxt = "Unable to locate inlined TLC file: %<funcName>.tlc"
	%<LibBlockReportFatalError(block, errTxt)>
      %endif
      %if Accelerator && (funcName == "stateflow")
	%% R12 Beta1: until BlockInstanceData and Terminate functions are
	%% supported, only run MEX-version of stateflow blocks.
	%assign SFunctionType = "OTHER"
      %else
	%%
	%% The S-function has a corresponding TLC file
	%%
	%assign SFunctionType = "TLC"
      %endif
    %elseif ParamSettings.Inlined == "skip"
      %assign SFunctionType = "OTHER"
    %elseif ParamSettings.FunctionType == "C-MEX"
      %assign SFunctionType = "C-MEX"
      %% ERT does not support multi-rate non-inlined sfunctions
      %% in single-tasking mode
      %if SLibIsERTCodeFormat() && TYPE(TID) == "Vector" && ...
	::CompiledModel.FixedStepOpts.SolverMode == "SingleTasking"
	%if IsModelReferenceTarget()
	  %assign target = "Model reference "
	%else
	  %assign target = "Embedded-C code format "
	%endif
      %endif
    %else
      %%
      %% The S-function is either a MATLAB File or a Fortran-MEX file.
      %%
      %if Accelerator
	%assign SFunctionType = "OTHER"
      %else
	%assign funcType = ParamSettings.FunctionType
	%assign blockName = LibGetFormattedBlockPath(block)
	%assign errTxt = "%<funcType> S-functions "  ...
	  "without a corresponding TLC file are not supported. " ...
	  "You can inline your S-function (%<funcName>) by creating " ...
	  "a TLC file for it. You can also remap your S-function to C by " ...
	  "creating a corresponding C Mex source file "...
	  "and a %<funcName>.tlc file in the same " ...
	  "directory as the %<funcType> S-function which contains (on the " ...
	  "first line):\n" ...
	  "  \%\% CallAsCMexLevel1\n"  ...
	  "or\n" ...
	  "  \%\% CallAsCMexLevel2\n"
	%<LibBlockReportFatalError(block, errTxt)>
      %endif
    %endif  %% Paramsettings
  %endwith  %% block

  %return SFunctionType

%endfunction %% FcnGetAndCheckSFunctionType


%% Function: FcnCacheRTWGeneratedChildSfcnInfo =================================
%% Abstract:
%%  If a model contains a generated S-Function, the model export file must
%%  include the child s-function export file in the case if it has custom
%%  data type
%function FcnCacheRTWGeneratedChildSfcnInfo(block, system) void
    %% Cache inlcude export files
    %if !ISFIELD(::CompiledModel, "RTWGeneratedChildSfcnExportFiles")
      %addtorecord  ::CompiledModel RTWGeneratedChildSfcnExportFiles ""
      %addtorecord ::CompiledModel RTWGeneratedChildSfcn {}
    %endif

    %assign sfcnName = ParamSettings.FunctionName
    %if !ISFIELD(::CompiledModel.RTWGeneratedChildSfcn, sfcnName)
      %% If there are several instances of the same s-function,
      %% cache one export file
      %addtorecord ::CompiledModel.RTWGeneratedChildSfcn %<sfcnName> 1

      %assign currExpFiles = ::CompiledModel.RTWGeneratedChildSfcnExportFiles
      %openfile buffer
      #undef S_FUNCTION_NAME
      #if !defined(RTW_GENERATED_SFCN_TUNABLE_PRMS_%<sfcnName>)
      #define RTW_GENERATED_SFCN_TUNABLE_PRMS_%<sfcnName>
      #endif
      %% Include the header file if we're not generating Accelerator
      %% code. The header is needed for any custom types, but we
      %% don't need them for the Accelerator since we'll just be
      %% calling back into Simulink and using the mex file anyway
      %if !Accelerator
	#include "%<sfcnName>.h"
      %endif

      %<currExpFiles>
      %closefile buffer
      %assign ::CompiledModel.RTWGeneratedChildSfcnExportFiles = buffer
      %assign buildDir = FEVAL("rtwprivate", "rtwattic", "getBuildDir")
      %assign errmsgFromCB = FEVAL("RTW.copySfcnModulesToBuildDir","%<sfcnName>", buildDir)
      %if !ISEMPTY(errmsgFromCB)
         %openfile errTxt
         %<errmsgFromCB>
         %closefile errTxt
         %<SLibReportErrorWithIdAndArgs("RTW:tlc:GenericMsg", errTxt)>
      %endif
   %endif
%endfunction %% FcnCacheRTWGeneratedChildSfcnInfo

%% Function: BlockInstanceSetup ===============================================
%% Abstract:
%%      0) Add Type/Level combo variable for comment
%%      1) Add a free buffer if using malloc
%%      2) If it's a Stateflow (not in Accelerator) / Inlined S-function, then
%%         call the BlockInstanceSetup function.
%%      3) If it's a C-Mex S-function, then register the s-function in the
%%         global child index table
%%      4) Otherwise, it's a MATLAB file or Fortran-Mex file.  If the number of
%%         outputs is greater than zero, exit.
%%
%function BlockInstanceSetup(block, system) void

  %assign funcName  = ParamSettings.FunctionName
  %assign str = ""

  %if LibSFunctionLevel() == "RTWLevel2"
    %% Cache #include child s-function export files
    %<FcnCacheRTWGeneratedChildSfcnInfo(block, system)>
  %endif
  %if LibSFunctionLevel() == "RTWLevel2"
    %assign str = "RTW Generated "
  %endif
  %assign TypeLevel = "%<str>Level%<ParamSettings.FunctionLevel> %<Type>"
  %assign block     = block + TypeLevel

  %assign sFunctionType = FcnGetAndCheckSFunctionType(block)
  %addtorecord block SFunctionType sFunctionType

  %if sFunctionType == "TLC"
     %% Mark destination system when fcn-call branches. This information is used to
     %% issue error message when obsolete TLC function LibExecuteFcnXXX and LibXXXFCSS
     %% are incorrectly used in customer TLC files. 
    %if SLibSfcnHasBranchFcnCall(block)
      %% Go over each element that invokes function-call
      %foreach callIdx = block.NumSFcnSysOutputCalls
        %assign nCalledFC = block.SFcnSystemOutputCallMappingInfo[callIdx].NumOfCalledFC
        %if nCalledFC > 1 %% This elements invokes a branched function-call
          %assign recIdx = block.SFcnSystemOutputCallMappingInfo[callIdx].StartingIdx
          %foreach fcIdx = nCalledFC
            %assign blockToCall = block.SFcnSystemOutputCall[recIdx].BlockToCall
        
            %assert !ISEQUAL(blockToCall, "unconnected")
            %assign sysIdx      = blockToCall[0]
            %assign blkIdx      = blockToCall[1]
            %assign calledBlock = ::CompiledModel.System[sysIdx].Block[blkIdx]
            
            %if calledBlock.Type != "ModelReference"
              %assert calledBlock.Type == "SubSystem"
              %with calledBlock
                %assign sysIdx = LibBlockParamSetting("Subsystem", "SystemIdx")
                %assign calledSys = System[sysIdx]
              %endwith
              %if !ISFIELD(calledSys, "IsBranchedSys")
                %addtorecord calledSys IsBranchedSys TLC_TRUE
              %endif %% if !ISFIELD(calledSys, "IsBranchedSys")
            %endif %% if calledBlock.Type != "ModelReference"

            %assign recIdx = recIdx + 1 %% Update the record index
          %endforeach %% foreach fcIdx = nCalledFC
        %endif %% if  nCalledFC > 1
      %endforeach %% foreach callIdx = block.NumSFcnSysOutputCalls
    %endif %% if SLibSfcnHasBranchFcnCall(block)
    %<GENERATE_TYPE(block, "BlockInstanceSetup", funcName, system)>
    
  %elseif sFunctionType == "C-MEX" || (sFunctionType == "OTHER" && ...
    Accelerator)
    %%
    %% The S-function is a C-MEX file (without a TLC file)
    %%

    %assign ps = ParamSettings
    %if ps.FunctionLevel == 1
      %%
      %% By default, all level 1 S-functions are called.
      %%
      %assign InitializeSizesEmpty       = 0
      %assign InitializeSampleTimesEmpty = 0
      %assign InitializeConditionsEmpty  = 0
      %assign StartEmpty                 = 0
      %assign OutputsEmpty               = 0
      %assign UpdateEmpty                = 0
      %assign DerivativesEmpty           = 0
      %assign ProjectionEmpty            = 0
      %assign ForcingFunctionEmpty       = 0
      %assign MassMatrixEmpty            = 0
      %assign ZeroCrossingsEmpty         = 1
      %assign EnableEmpty                = 0
      %assign DisableEmpty               = 0
      %assign TerminateEmpty             = 0
    %else
      %%
      %% By default, all level 2 S-functions are not called.
      %%
      %assign InitializeSizesEmpty       = 1
      %assign InitializeSampleTimesEmpty = 1
      %assign InitializeConditionsEmpty  = 1
      %assign StartEmpty                 = 1
      %assign OutputsEmpty               = 1
      %assign UpdateEmpty                = 1
      %assign DerivativesEmpty           = 1
      %assign ProjectionEmpty            = 1
      %assign ForcingFunctionEmpty       = 1
      %assign MassMatrixEmpty            = 1
      %assign ZeroCrossingsEmpty         = 1
      %assign EnableEmpty                = 1
      %assign DisableEmpty               = 1
      %assign TerminateEmpty             = 1
    %endif
    %assign ps = ps + InitializeSizesEmpty
    %assign ps = ps + InitializeSampleTimesEmpty
    %assign ps = ps + InitializeConditionsEmpty
    %assign ps = ps + StartEmpty
    %assign ps = ps + OutputsEmpty
    %assign ps = ps + UpdateEmpty
    %assign ps = ps + DerivativesEmpty
    %assign ps = ps + ProjectionEmpty
    %assign ps = ps + ForcingFunctionEmpty
    %assign ps = ps + MassMatrixEmpty
    %assign ps = ps + ZeroCrossingsEmpty
    %assign ps = ps + EnableEmpty
    %assign ps = ps + DisableEmpty
    %assign ps = ps + TerminateEmpty
    %%
    %% Determine if states are discontiguous and attach it to the block.
    %% This knowledge is required later in code generation, so just
    %% compute it once.  Note that this is only relevant for level 2
    %% S-functions
    %%
    %if ps.FunctionLevel == 1
      %assign numDiscStates = DiscStates[0]
      %assign numContStates = ContStates[0]
      %assign nStates = numDiscStates + numContStates
      %assign statesDiscontiguous = (numDiscStates > 0) && (numContStates > 0)
    %else
      %%
      %% Pinpoint exactly which functions are to be called.  (Note that
      %% an mdlRTW function is illegal since it is expected that the
      %% S-function has a corresponding TLC file).
      %%
      %foreach idx = SIZE(ps.SFcnmdlRoutines, 1)
        %switch ps.SFcnmdlRoutines[idx]
          %case "mdlInitializeSizes"
            %assign ps.InitializeSizesEmpty = 0
            %break
          %case "mdlInitializeSampleTimes"
            %assign ps.InitializeSampleTimesEmpty = 0
            %break
          %case "mdlInitializeConditions"
            %assign ps.InitializeConditionsEmpty = 0
            %break
          %case "mdlStart"
            %assign ps.StartEmpty = 0
            %break
          %case "mdlOutputs"
            %assign ps.OutputsEmpty = 0
            %break
          %case "mdlUpdate"
            %assign ps.UpdateEmpty = 0
            %break
          %case "mdlDerivatives"
            %assign ps.DerivativesEmpty = 0
            %break
          %case "mdlProjection"
            %assign ps.ProjectionEmpty = 0
            %break            
          %case "mdlForcingFunction"
            %assign ps.ForcingFunctionEmpty = 0
            %break
          %case "mdlMassMatrix"
            %assign ps.MassMatrixEmpty = 0
            %break                        
          %case "mdlZeroCrossings"
            %assign ps.ZeroCrossingsEmpty = 0
            %break
          %case "mdlTerminate"
            %assign ps.TerminateEmpty = 0
            %break
          %case "mdlEnable"
            %assign ps.EnableEmpty = 0
            %break
          %case "mdlDisable"
            %assign ps.DisableEmpty = 0
            %break
          %case "mdlRTW"
	    %if (LibSFunctionLevel() == "RTWLevel2") || Accelerator || IsModelReferenceSimTarget()
	      %break
	    %endif
            %assign errTxt = "This S-function block must have a " ...
              "corresponding TLC file since it has an mdlRTW() function."
            %<LibBlockReportError(block, errTxt)>
        %endswitch
      %endforeach
      %%
      %% States are contiguous by design
      %%
      %assign statesDiscontiguous = 0
    %endif
    %addtorecord block StatesDiscontiguous statesDiscontiguous
    %%
    %% register S-function in global index table
    %%
    %assign childSFunctionIdx = FcnChildSFunctionIndex(block)

    %% Loop over the Parameter Records and look for matrix parameters.
    %foreach paramIdx = Parameters[0]
      %assign param = Parameter[paramIdx]
      %% Go through each parameter in the AST and mark it as a MatlabMatrix if
      %% it is a matrix.  Note that we mark it in the Parameter record in the
      %% ModelParameters table, NOT in the block Parameter record.
      %assign param_array = SLibGetAllASTParamsForBlockParam(param)
      %foreach mdlParamIdx = SIZE(param_array, 1)
        %assign mdlParam = ModelParameters.Parameter[param_array[mdlParamIdx]]
        %if  (LibGetDataTypeIdAliasedThruToFromId(LibGetRecordDataTypeId(mdlParam)) != tSS_DOUBLE || ...
	      LibGetRecordIsComplex(mdlParam)) && !Accelerator && !IsModelReferenceTarget()
          %assign errTxt = "This non-inlined C-MEX Block " ...
            "has non-double and(or) complex parameters. The Real-Time " ...
            "Workshop does not support C-MEX S-Functions " ...
            "with non-double or complex parameters without a "...
            "corresponding TLC file."
          %<LibBlockReportFatalError(block, errTxt)>
        %endif
        %if SIZE(mdlParam.Value,0) > 1
          %% This is a Matrix Parameter of a non-inlined C-MEX S-Function.
          %% It needs to be declared in column-major form  (Matlab style).
          %<LibAddIdentifier(mdlParam, "MatlabMatrix", 1)>
        %endif
        %assign mdlParam.WasAccessedAsVariable = 1
      %endforeach
    %endforeach

  %endif

%endfunction %% BlockInstanceSetup


%% Function: BlockTypeSetup ===================================================
%% Abstract:
%%      Perform S-function BlockTypeSetup function
%%
%function BlockTypeSetup(block, system) void
  %assign funcName      = ParamSettings.FunctionName
  %% NOTE: sFunctionType is not from the Block record.
  %assign sFunctionType = FcnGetAndCheckSFunctionType(block)

  %switch sFunctionType

  %case "TLC"

    %<GENERATE_TYPE(block, "BlockTypeSetup", funcName, system)>
    %break

  %case "C-MEX"

    %% Model interface requires that all S-Functions are inlined

    %if LibSFunctionLevel() == "RTWLevel2"
      %assign sfcnInc1 = "%<funcName>cn_rtw/%<funcName>.h"
      %assign sfcnInc2 = "%<funcName>cn_rtw/%<funcName>_private.h"

      %openfile tmpBuf1
      #if !defined(RTW_GNERATED_SFCN_NOT_PRIVATE_%<funcName>)
        #define RTW_GNERATED_SFCN_NOT_PRIVATE_%<funcName>
      #endif
      %closefile tmpBuf1
      %openfile tmpBuf2
      #if !defined(MATLAB_MEX_FILE)
      #undef S_FUNCTION_NAME
      #include "%<sfcnInc1>"
      #include "%<sfcnInc2>"
      #endif
      %closefile tmpBuf2

      %openfile tmpBuf
      %<tmpBuf1>
      %<tmpBuf2>
      %closefile tmpBuf
      
      %<LibCacheIncludes(tmpBuf)>\
      %<SLibCacheCodeToFile("mdl_data_typedef", tmpBuf2)>
    %endif

  %endswitch
%endfunction %% BlockTypeSetup


%% Function: BlockInitialValues ================================================
%% Abstract:
%%      Return appropriate initializer "strings" for the various vector types.
%%
%function BlockInitialValues(block, system, vectType) void

  %assign ans = ""

  %assign funcName = ParamSettings.FunctionName
  %if SFunctionType == "TLC"

    %assign ans = GENERATE_TYPE(block, "BlockInitialValues", ...
      funcName, system, vectType)

  %endif
  %return ans

%endfunction %% BlockInitialValues


%% Function: BlockInstanceData ================================================
%% Abstract:
%%      Perform S-function BlockInstanceData function
%%
%function BlockInstanceData(block, system) Output
  %switch SFunctionType
    %case "TLC"
      %assign funcName = ParamSettings.FunctionName

      %<GENERATE_TYPE(block, "BlockInstanceData", funcName, system)>\

      %break
  %endswitch
%endfunction


%% Function: BlockOutputSignal =================================================
%% Abstract:
%%      Perform S-function BlockOutputSignal function
%%
%function BlockOutputSignal(block,system,portIdx,ucv,lcv,sigIdx,retType) void
  %switch SFunctionType
    %case "TLC"
      %assign funcName = ParamSettings.FunctionName

      %return GENERATE_TYPE(block, "BlockOutputSignal", funcName, ...
	system,portIdx,ucv,lcv,sigIdx,retType)

      %%break
  %endswitch
%endfunction


%% Function: Start ============================================================
%% Abstract:
%%      Perform S-function Start function
%%        o Only Level 2 C-MEX S-Functions have mdlStart
%%
%function Start(block, system) Output
  %%
  %switch SFunctionType
    %case "TLC"
      %assign funcName = ParamSettings.FunctionName

      %<GENERATE_TYPE(block, "Start", funcName, system)>

      %break
    %case "C-MEX"
      %if ParamSettings.FunctionLevel == 2 && !ParamSettings.StartEmpty
        %assign childSFunctionIdx = FcnChildSFunctionIndex(block)
        %assign s = tChildSimStruct
        /* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
        {
          SimStruct *%<s> = %<RTMGetIdxed("SFunction", childSFunctionIdx)>;
          sfcnStart(%<s>);
	  if(ssGetErrorStatus(%<s>) != %<SLibGetNullDefinitionFromTfl()>) return;
	}

      %endif
  %endswitch
%endfunction


%% Function: InitializeConditions =============================================
%% Abstract:
%%      1) Perform S-function InitializeConditions function
%%      2) Register the S-function in the registration table.
%%
%function InitializeConditions(block, system) Output
  %switch SFunctionType
    %case "OTHER"
      %% This is a MEX-version s-function, run it for the Accelerator
      %if Accelerator
        %if !ParamSettings.InitializeConditionsEmpty
          /* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
          /* Call into Simulink for MEX-version of S-function */
          %<SLibCallBlockInSimulink(system, block, ...
            "SS_CALL_MDL_INITIALIZE_CONDITIONS")>

        %endif
      %endif
      %break
    %case "TLC"
      %assign funcName = ParamSettings.FunctionName

      %<GENERATE_TYPE(block, "InitializeConditions", funcName, system)>

      %break
    %case "C-MEX"
      %if !ParamSettings.InitializeConditionsEmpty
        %if Accelerator
          /* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
          /* Call into Simulink for MEX-version of S-function */
          %<SLibCallBlockInSimulink(system, block, ...
            "SS_CALL_MDL_INITIALIZE_CONDITIONS")>

        %else
          %assign childSFunctionIdx = FcnChildSFunctionIndex(block)
          %assign s = tChildSimStruct
          /* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
          {
            SimStruct *%<s> = %<RTMGetIdxed("SFunction", childSFunctionIdx)>;
            %switch ParamSettings.FunctionLevel
              %case 1
                %%
                %% Level 1
                %%
                real_T *sfcnX  = ssGetContStates(%<s>);
                sfcnInitializeConditionsLevel1(sfcnX, %<s>);
		if(ssGetErrorStatus(%<s>) != %<SLibGetNullDefinitionFromTfl()>) return;
		%%
                %% need to check if the s-function has mixed continuous/discrete states.
                %% if so, and, they are not the only states in the system, then we must
                %% account for the fact that the continuous and discrete states are not
                %% contiguous in the model's state vector, and copy them back into the
                %% global state vector.
                %%
                %assign numContStates = ContStates[0]
                %assign numDiscStates = DiscStates[0]
                %assign numBlkStates = numContStates + numDiscStates
                %if numContStates > 0 && numDiscStates > 0
                  %assign Xc = "&%<LibBlockContinuousState("", "", 0)>"
                  %assign Xd = "&%<LibBlockDiscreteState("", "", 0)>"
                  %<FcnCopyStatesFromWorkVector(s, Xc, Xd)>\
                %endif
                %break

              %case 2
                %%
                %% Level 2
                %%
                sfcnInitializeConditions(%<s>);
		if(ssGetErrorStatus(%<s>) != %<SLibGetNullDefinitionFromTfl()>) return;
		%break
            %endswitch
          }
        %endif
      %endif
      %break
  %endswitch
%endfunction %% InitializeConditions


%% Function FcnGetTIDForSfcn =====================
%% Abstract:
%%    Hard-code the TID if subsystem is rate grouping
%% because rate grouping code may not pass the TID
%%
%%    Hard-code the TID for single-rate s-functions
%% This is necessary because ERT may not pass the TID to
%% the output function for single-rate systems
%%
%% Note: if TID = [0 1] and TID01EQ, need hard-code the TID
%% too. System that has tid [0 1] is treated as singl rate
%% subsystem. ERT may not pass the tid to output function.
%%
%function FcnGetTIDForSfcn(block, system)
  %assign tid = block.TID

  %if ISEQUAL(tid, "constant")
    %assign tid = 0
  %elseif SLibIsMultiRateAndRateGrouping(system)
    %assign tid = system.CurrentTID
  %elseif SLibIsERTCodeFormat()
    %if TYPE(tid) == "Vector"
      %assign isZeroTid = TLC_FALSE
      %if ISEQUAL(SolverType, "FixedStep") && FixedStepOpts.TID01EQ
        %assign isZeroTid = TLC_TRUE
        %foreach idx = SIZE(tid,1)
          %if !ISEQUAL(tid[idx], 0) && ...
            !ISEQUAL(tid[idx], 1)
            %assign isZeroTid = TLC_FALSE
            %break
          %endif
        %endforeach
      %endif
      %assign tid = isZeroTid ? 0 : LibTID()
    %else
      %assign tid = SLibGetNumericTID(block)
    %endif
  %else
    %assign tid = LibTID()
  %endif

  %if IsModelReferenceRTWTarget()
    %assign tidMap = FcnGetMdlRefGlobalTIDMap("")
    %assign indx = "%<tidMap>[%<tid>]"
    %return indx
  %else
    %return tid
  %endif
%endfunction

%% Function: Update ===========================================================
%% Abstract:
%%      Perform S-function Update function
%%
%function Update(block, system) Output
  %switch SFunctionType
    %case "OTHER"
      %% This is a MEX-version s-function, run it for the Accelerator
      %if Accelerator
        %if !ParamSettings.UpdateEmpty
          /* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
          /* Call into Simulink for MEX-version of S-function */
          %<SLibCallBlockInSimulink(system, block, "SS_CALL_MDL_UPDATE")>

        %endif
      %endif
      %break
    %case "TLC"
      %assign funcName = ParamSettings.FunctionName

      %<GENERATE_TYPE(block, "Update", funcName, system)>

      %break
    %case "C-MEX"
      %if Accelerator
        %if !ParamSettings.UpdateEmpty
          /* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
          /* Call into Simulink for MEX-version of S-function */
          %<SLibCallBlockInSimulink(system, block, "SS_CALL_MDL_UPDATE")>

        %endif
      %else
        %%
        %% A call to sfcnUpdate(...) is only generated when the number of
        %% discrete states in the s-function is greater than zero or the
        %% S-function is not direct feedthrough.
        %%
        %assign numDiscStates = DiscStates[0]
        %if ParamSettings.FunctionLevel == 1
          %assign directFeedthrough = ParamSettings.DirectFeedthrough
        %else
          %assign directFeedthrough = "no"
          %foreach ipIdx = NumDataInputPorts
            %if ParamSettings.DirectFeedthrough[ipIdx] == "yes"
              %assign directFeedthrough = "yes"
              %break
            %endif
          %endforeach
        %endif
        %%
        %% The rules for calling the S-function's update function
        %%
        %% Level 1: NumDiscStates > 0 || DirectFeedThrough
        %% Level 2: UpdateNotEmpty
        %%
        %% Note that UpdateNotEmpty means MDL_UPDATE was defined
        %%
        %assign callUpdate = 0
        %assign ps = ParamSettings
        %if ps.FunctionLevel == 1
          %% level 1
          %if numDiscStates > 0 || directFeedthrough == "no"
            %assign callUpdate = 1
          %endif
        %elseif ps.FunctionLevel == 2
          %% level 2
          %if !ps.UpdateEmpty
            %assign callUpdate = 1
          %endif
        %endif
        %if callUpdate
          /* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
          {
            %assign childSFunctionIdx = FcnChildSFunctionIndex(block)
            %assign s = tChildSimStruct
            %assign tid = FcnGetTIDForSfcn(block,system)
            SimStruct *%<s> = %<RTMGetIdxed("SFunction", childSFunctionIdx)>;
            %switch ps.FunctionLevel
              %case 1
                %%
                %% Level 1
                %%
                %if CodeFormat == "S-Function"
                  real_T *sfcnU = _ssGetU(%<s>);
                %else
                  real_T *sfcnU = ssGetU(%<s>);
                %endif
                real_T *sfcnX = ssGetContStates(%<s>);
                sfcnUpdateLevel1(sfcnX, sfcnU, %<s>, %<tid>);
		if(ssGetErrorStatus(%<s>) != %<SLibGetNullDefinitionFromTfl()>) return;

		%%
                %% Need to check if the s-function has mixed continuous/
                %% discrete states. If so, and, they are not the only states
                %% in the system, then we must account for the fact that the
                %% continuous and discrete states are not contiguous in the
                %% model's state vector.
                %%
                %assign numContStates = ContStates[0]
                %assign numBlkStates  = numContStates + numDiscStates
                %if numContStates > 0 && numDiscStates > 0
                  %assign Xc = "&%<LibBlockContinuousState("", "", 0)>"
                  %assign Xd = "&%<LibBlockDiscreteState("", "", 0)>"
                  %<FcnCopyStatesFromWorkVector(s, Xc, Xd)>\
                %endif
                %break

              %case 2
                %%
                %% Level 2
                %%
		sfcnUpdate(%<s>, %<tid>);
		if(ssGetErrorStatus(%<s>) != %<SLibGetNullDefinitionFromTfl()>) return;
		%break
            %endswitch
          }

        %endif
      %endif
      %break
  %endswitch
%endfunction %% Update


%% Function: Derivatives ======================================================
%% Abstract:
%%      Perform S-function Derivatives function
%%
%function Derivatives(block, system) Output
  %if CodeFormat == "S-Function" || IsModelReferenceTarget()
    %assign underScore = "_"
  %else
    %assign underScore = ""
  %endif
  %%
  %% a call to sfcnDerivatives(...) is only generated when the number of
  %% continuous states in the s-function is greater than zero.
  %%
  %assign numContStates = ContStates[0]
  %%
  %switch SFunctionType
  %case "OTHER"
    %% This is a MEX-version s-function, run it for the Accelerator
    %if Accelerator
      %if numContStates > 0  && !ParamSettings.DerivativesEmpty
	/* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
	/* Call into Simulink for MEX-version of S-function */
	%<SLibCallBlockInSimulink(system, block, "SS_CALL_MDL_DERIVATIVES")>
      %endif
    %endif
    %break
  %case "TLC"
    %assign funcName = ParamSettings.FunctionName

    %<GENERATE_TYPE(block, "Derivatives", funcName, system)>

    %break
  %case "C-MEX"
    %if numContStates > 0  &&  !ParamSettings.DerivativesEmpty
      %if Accelerator
        /* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
        /* Call into Simulink for MEX-version of S-function */
        %<SLibCallBlockInSimulink(system, block, "SS_CALL_MDL_DERIVATIVES")>

      %else
        /* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
        {
          %assign childSFunctionIdx = FcnChildSFunctionIndex(block)
          %assign s = tChildSimStruct
          %assign optStartIndex = SLibGet1DArrayIndexer(numContStates,"","",0)
          SimStruct *%<s> = %<RTMGetIdxed("SFunction", childSFunctionIdx)>;
	  %if IsModelReferenceTarget()
            real_T *sfcndX_fx = (real_T *) ...
              &%<LibBlockContinuousStateDerivative("", "", 0)>;
          %else
              %% caller used semantic sugar "with the block"
              %assign cs = ::CompiledModel.ContStates.ContState[ContStates[1]]
              real_T *sfcndX_fx = (real_T *) &((%<tXdotType> *) ...
                %<RTMGet("dX")>)->%<cs.Identifier>%<optStartIndex>;
          %endif
          %switch ParamSettings.FunctionLevel
            %case 1
              %%
              %% Level 1
              %%
              real_T *sfcnU = %<underScore>ssGetU(%<s>);
              real_T *sfcnX = ssGetContStates(%<s>);
              %%
              %% Note that Simulink 1.3 copies the non-contiguous states into
              %% the work vector, however this is not required.
              %%
              %<underScore>ssSetdX(%<s>, sfcndX_fx);
              sfcnDerivativesLevel1(sfcndX_fx, sfcnX, sfcnU, %<s>, 0);
              if(ssGetErrorStatus(%<s>) != %<SLibGetNullDefinitionFromTfl()>) return;
	      %break

            %case 2
              %%
              %% Level 2
              %%
              %<underScore>ssSetdX(%<s>, sfcndX_fx);
              sfcnDerivatives(%<s>);
	      if(ssGetErrorStatus(%<s>) != %<SLibGetNullDefinitionFromTfl()>) return;
	      %break
          %endswitch
        }

      %endif
    %endif
    %break
  %endswitch
%endfunction %% Derivatives


%% Function: Projection ======================================================
%% Abstract:
%%      Perform S-function Projection function
%%
%function Projection(block, system) Output
  %%
  %% a call to sfcnProjection(...) is only generated when the number of
  %% continuous states in the s-function is greater than zero.
  %%
  %assign numContStates = ContStates[0]
  %%
  %switch SFunctionType
  %case "OTHER"
    %% This is a MEX-version s-function, run it for the Accelerator
    %if Accelerator
      %if numContStates > 0  && !ParamSettings.ProjectionEmpty
	/* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
	/* Call into Simulink for MEX-version of S-function */
	%<SLibCallBlockInSimulink(system, block, "SS_CALL_MDL_PROJECTION")>
      %endif
    %endif
    %break
  %case "TLC"
    %if ParamSettings.HasMdlProjection == "yes"
      %assign funcName = ParamSettings.FunctionName
      %<GENERATE_TYPE(block, "Projection", funcName, system)>
    %endif
    %break
  %case "C-MEX"
    %if numContStates > 0  &&  !ParamSettings.ProjectionEmpty
      %if Accelerator
        /* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
        /* Call into Simulink for MEX-version of S-function */
        %<SLibCallBlockInSimulink(system, block, "SS_CALL_MDL_PROJECTION")>

      %else
        /* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
        {
          %assign childSFunctionIdx = FcnChildSFunctionIndex(block)
          %assign s = tChildSimStruct
          %assign optStartIndex = SLibGet1DArrayIndexer(numContStates,"","",0)
          %switch ParamSettings.FunctionLevel
            %case 2
              %%
              %% Level 2
              %%
              SimStruct *%<s> = %<RTMGetIdxed("SFunction", childSFunctionIdx)>;
              sfcnProjection(%<s>);
	      if(ssGetErrorStatus(%<s>) != %<SLibGetNullDefinitionFromTfl()>) return;
	      %break
          %endswitch
        }

      %endif
    %endif
    %break
  %endswitch
%endfunction %% Projection


%% Function: ForcingFunction ======================================================
%% Abstract:
%%      Perform S-function ForcingFunction function
%%
%function ForcingFunction(block, system) Output
  
  %if ParamSettings.IsLinearlyImplicit == "no"
    %% Call Derivatives for explicit pieces of linearly-implicit systems.
    %<Derivatives(block,system)>
    %return
  %endif
        
  %if CodeFormat == "S-Function" || IsModelReferenceTarget()
    %assign underScore = "_"
  %else
    %assign underScore = ""
  %endif
  %%
  %% a call to sfcnForcingFunction(...) is only generated when the number of
  %% continuous states in the s-function is greater than zero.
  %%
  %assign numContStates = ContStates[0]
  %%
  %switch SFunctionType
  %case "OTHER"
    %% This is a MEX-version s-function, run it for the Accelerator
    %if Accelerator
      %if numContStates > 0  && !ParamSettings.ForcingFunctionEmpty
	/* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
	/* Call into Simulink for MEX-version of S-function */
	%<SLibCallBlockInSimulink(system, block, "SS_CALL_MDL_FORCINGFUNCTION")>
      %endif
    %endif
    %break
  %case "TLC"
    %if ParamSettings.IsLinearlyImplicit == "yes"
      %assign funcName = ParamSettings.FunctionName

      %<GENERATE_TYPE(block, "ForcingFunction", funcName, system)>
    %endif
    %break
  %case "C-MEX"
    %if numContStates > 0  &&  !ParamSettings.ForcingFunctionEmpty
      %if Accelerator
        /* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
        /* Call into Simulink for MEX-version of S-function */
        %<SLibCallBlockInSimulink(system, block, "SS_CALL_MDL_FORCINGFUNCTION")>

      %else
        /* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
        {
          %assign childSFunctionIdx = FcnChildSFunctionIndex(block)
          %assign s = tChildSimStruct
          %assign optStartIndex = SLibGet1DArrayIndexer(numContStates,"","",0)
          SimStruct *%<s> = %<RTMGetIdxed("SFunction", childSFunctionIdx)>;
	  %if IsModelReferenceTarget()
            real_T *sfcndX_fx = (real_T *) ...
              &%<LibBlockContinuousStateDerivative("", "", 0)>;
          %else
              %% caller used semantic sugar "with the block"
              %assign cs = ::CompiledModel.ContStates.ContState[ContStates[1]]
              real_T *sfcndX_fx = (real_T *) &((%<tXdotType> *) ...
                %<RTMGet("dX")>)->%<cs.Identifier>%<optStartIndex>;
          %endif
          %switch ParamSettings.FunctionLevel
            %case 2
              %%
              %% Level 2
              %%
              %<underScore>ssSetdX(%<s>, sfcndX_fx);
              sfcnForcingFunction(%<s>);
	      if(ssGetErrorStatus(%<s>) != %<SLibGetNullDefinitionFromTfl()>) return;
	      %break
          %endswitch
        }

      %endif
    %endif
    %break
  %endswitch
%endfunction %% ForcingFunction


%% Function: MassMatrix ======================================================
%% Abstract:
%%      Perform S-function MassMatrix function
%%
%function MassMatrix(block, system) Output
  %%
  %% a call to sfcnMassMatrix(...) is only generated when the number of
  %% continuous states in the s-function is greater than zero.
  %%
  %assign numContStates = ContStates[0]
  %%
  %switch SFunctionType
  %case "OTHER"
    %% This is a MEX-version s-function, run it for the Accelerator
    %if Accelerator
      %if numContStates > 0  && !ParamSettings.MassMatrixEmpty
	/* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
	/* Call into Simulink for MEX-version of S-function */
	%<SLibCallBlockInSimulink(system, block, "SS_CALL_MDL_MASSMATRIX")>
      %endif
    %endif
    %break
  %case "TLC"
    %if ParamSettings.IsLinearlyImplicit == "yes"
      %assign funcName = ParamSettings.FunctionName      
      %<GENERATE_TYPE(block, "MassMatrix", funcName, system)>
    %endif
    %break
  %case "C-MEX"
    %if numContStates > 0  &&  !ParamSettings.MassMatrixEmpty
      %if Accelerator
        %assert ParamSettings.Inlined != "yes"
        /* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
        /* Call into Simulink for MEX-version of S-function */
        %<SLibCallBlockInSimulink(system, block, "SS_CALL_MDL_MASSMATRIX")>

      %else
        /* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
        {
          %assign childSFunctionIdx = FcnChildSFunctionIndex(block)
          %assign s = tChildSimStruct
          SimStruct *%<s> = %<RTMGetIdxed("SFunction", childSFunctionIdx)>;
          %switch ParamSettings.FunctionLevel
            %case 2
              %%
              %% Level 2
              %%
              %% set MassMatrixPr on local SimStructs
              ssSetMassMatrixPr(%<s>,%<SLibBlockMassMatrixPr()>);
              sfcnMassMatrix(%<s>);
	      if(ssGetErrorStatus(%<s>) != %<SLibGetNullDefinitionFromTfl()>) return;
	      %break
          %endswitch
        }

      %endif
    %endif
    %break
  %endswitch
%endfunction %% MassMatrix


%% Function: Outputs ==========================================================
%% Abstract:
%%      Perform S-function Outputs function
%%
%function Outputs(block, system) void
  %openfile tmpBuf
  %%
  %switch SFunctionType
    %case "OTHER"
      %% This is a MEX-version s-function, run it for the Accelerator
      %if Accelerator
        %if !ParamSettings.OutputsEmpty
          /* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
          /* Call into Simulink for MEX-version of S-function */
          %<SLibCallBlockInSimulink(system, block, "SS_CALL_MDL_OUTPUTS")>

        %endif
      %endif
      %break
    %case "TLC"
      %% We must generate code of a subsystem associated with an
      %% asynchronous rate after code generation of other blocks is done.
      %% When a block calls a async system, a new field "GenCodeForTopAsyncSS"
      %% is added to the block. This field will be use later to generate async
      %% system code after code generation of other blocks is done.
      %%
      %% We generate code for this block only if
      %%    1. This block does not call an async system
      %%    2. This block calls an async system and the block itself
      %%       generates code
      %%    3. Flag GenCodeForTopAsyncSS is TLC_TRUE
      %%
      %if !ISFIELD(block, "GenCodeForTopAsyncSS") && ...
	ISFIELD(block, "NumSFcnSysOutputCallDsts")
	%foreach callIdx = NumSFcnSysOutputCallDsts
	  %% Get downstream block if there is one
	  %if "%<SFcnSystemOutputCall[callIdx].BlockToCall>" == "unconnected"
	    %continue
	  %endif
          %if FcnBlkIsAsyncTopSfcn(block)
            %addtorecord block GenCodeForTopAsyncSS TLC_FALSE
            %break
          %endif
	%endforeach
      %endif
      %%
      %assign genCode = TLC_FALSE
      %if !ISFIELD(block, "GenCodeForTopAsyncSS")
	%% not a TopAsyncSS caller, always generate code
	%assign genCode = TLC_TRUE
      %elseif ISFIELD(block, "AsyncCallerGenCode") && ...
        AsyncCallerGenCode == TLC_TRUE
        %% Async system caller itself generates code
        %assign genCode = TLC_TRUE
      %elseif block.GenCodeForTopAsyncSS
	%% generate TopAsyncSS code when GenCodeForTopAsyncSS
	%% is set to true
	%assign genCode = TLC_TRUE
      %endif
      %%
      %if genCode
        %assign funcName = ParamSettings.FunctionName
        %%
        %<GENERATE_TYPE(block, "Outputs", funcName, system)> \

      %endif
      %%
      %break
    %case "C-MEX"
      %%
      %with block
	%if SLibIsERTCodeFormat() && !IsModelReferenceSimTarget()
          %assert TYPE(TID) == "Vector" || ...
            TYPE(TID) == "Number" || ...
            ISEQUAL(TID, "triggered") || ...
            ISEQUAL(TID, "constant")
         
	  %if TYPE(TID) == "Vector"
            %if !FcnBlkIsAsyncTopSfcn(block)
              %assign numTids = SIZE(TID,1)
              %assign ::CompiledModel.RequireMultiRateSampleHits = (numTids > 1)
              %foreach i = numTids
                %foreach j = numTids - i - 1
                  %% If is multirate sfunction no-inline sfunction,
                  %% assume RequireMultiRateSampleHit between all
                  %% of it tids.
                  %assign tid = TID[i]
                  %assign sti = TID[j+i+1]
                  %% Need update special sample hit flag for 
                  %% noninlned multirate sfcn
                  %<SLibSetNeedRateInteraction(sti,tid)>
                %endforeach
                %% assume each tid of the sfunc need absolute time
                %% and NeedFloatTime
                %%
                %<SLibSetNeedFloatAbsoluteTime(i)>
              %endforeach
            %endif
	  %elseif TYPE(TID) == "Number"
            %<SLibSetNeedFloatAbsoluteTime(TID)>
	  %elseif ISEQUAL(TID, "triggered")
	    %assert TYPE(TriggerTID) == "Number" && TriggerTID >= 0
            %<SLibSetNeedFloatAbsoluteTime(TriggerTID)>
	  %endif
	%endif
      %endwith
      %if !ParamSettings.OutputsEmpty
        %if Accelerator
          /* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
          /* Call into Simulink for MEX-version of S-function */
          %<SLibCallBlockInSimulink(system, block, "SS_CALL_MDL_OUTPUTS")>

        %else
          /* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
	  %if ISFIELD(block, "SampleTimeIdx") && ...
	    !ISEQUAL(SampleTimeIdx, TID)
	    %% this is a Rate-Transition non-inlined sfunction
	    %% it output code must guarded by IsSpecialSampleHit
	    %assert TYPE(TID) == "Number" &&  TYPE(SampleTimeIdx) == "Number"
	    if( %<LibIsSpecialSampleHit(SampleTimeIdx, TID)> ) {
	  %else
	    {
	  %endif
            %assign childSFunctionIdx = FcnChildSFunctionIndex(block)
            %assign s = tChildSimStruct
            %assign tid = FcnGetTIDForSfcn(block,system)
            SimStruct *%<s> = %<RTMGetIdxed("SFunction", childSFunctionIdx)>;
	    %switch ParamSettings.FunctionLevel
              %case 1
                %%
                %% Level 1
                %%
                %if CodeFormat == "S-Function"
                  real_T *sfcnU = _ssGetU(%<s>);
                %else
                  real_T *sfcnU = ssGetU(%<s>);
                %endif
                real_T *sfcnX = ssGetContStates(%<s>);
                %%
                %assign sfcnY = SLibGetNullDefinitionFromTfl()
                %if NumDataOutputPorts > 0
		  %assign idnum = IDNUM(DataOutputPort[0].SignalSrc[0])
                  %if idnum[0] != "F" %%FcnCall
                    %assign sfcnY = "sfcnY"
                    real_T *sfcnY = &(%<LibBlockOutputSignal(0,"","",0)>);
                  %endif
                %endif
                %%
                %% need to check if the s-function has mixed continuous/
		%% discrete states. if so, and, they are not the only states in
		%% the system, then we must account for the fact that the
		%% continuous and discrete states are not contiguous in the
		%% model's state vector.
                %%
                %assign numContStates = ContStates[0]
                %assign numDiscStates = DiscStates[0]
                %assign numBlkStates = numContStates + numDiscStates
                %if numContStates > 0 && numDiscStates > 0
                  %assign Xc = "&%<LibBlockContinuousState("", "", 0)>"
                  %assign Xd = "&%<LibBlockDiscreteState("", "", 0)>"
		  (void) %<LibGenMemFcnCall("memcpy", "sfcnX", Xc, ...
		    "ssGetNumContStates(%<s>)*sizeof(real_T)")>;
		  if (ssIsMajorTimeStep(%<s>) ) {
		  (void) %<LibGenMemFcnCall("memcpy", ...
		    "sfcnX+ssGetNumContStates(%<s>)", Xd, ...
		    "ssGetNumDiscStates(%<s>)*sizeof(real_T)")>;
                  }
                  sfcnOutputsLevel1(%<sfcnY>, sfcnX, sfcnU, %<s>, %<tid>);
		  %if CodeFormat == "S-Function" || IsModelReferenceTarget()
		    if(ssGetErrorStatus(%<s>) != %<SLibGetNullDefinitionFromTfl()>) return;
		  %endif
		  if( ssIsMajorTimeStep(%<s>) ) {
		    %<FcnCopyStatesFromWorkVector(s, Xc, Xd)>\
		  }
		%else
		  sfcnOutputsLevel1(%<sfcnY>, sfcnX, sfcnU, %<s>, %<tid>);
		  %if CodeFormat == "S-Function" || IsModelReferenceTarget()
		    if(ssGetErrorStatus(%<s>) != %<SLibGetNullDefinitionFromTfl()>) return;
		  %endif
		%endif
                %break

              %case 2
                %%
                %% Level 2
                %%
		%if ParamSettings.HasVariableSampleTime == "yes"
                  if(ssGetTNext(%<s>) <= ssGetT(%<s>)){
                    real_T tNext;
                    sfcnGetTimeOfNextVarHit(%<s>);
                    tNext = ssGetTNext(%<s>);
                    %<LibSetVarNextHitTime(block,"tNext")>;
                  }
		%endif
		%%
                %foreach opIdx = NumDataOutputPorts
                  %if !LibBlockOutputSignalIsInBlockIO(opIdx)
		    %assign idnum = IDNUM(DataOutputPort[0].SignalSrc[0])
		    %if idnum[0] != "F" %%FcnCall
		      %assign yAddr = LibBlockOutputSignalAddr(opIdx, "", "", 0)
                      %if CodeFormat == "S-Function" || IsModelReferenceTarget()
                        _ssSetOutputPortSignal(%<s>, %<opIdx>, %<yAddr>);
                      %else
                        ssSetOutputPortSignal(%<s>, %<opIdx>, %<yAddr>);
                      %endif
                    %endif
                  %endif
		%endforeach
		sfcnOutputs(%<s>, %<tid>);
		%if CodeFormat == "S-Function" || IsModelReferenceTarget()
		  if(ssGetErrorStatus(%<s>) != %<SLibGetNullDefinitionFromTfl()>) return;
		%endif
		%break
            %endswitch
          }
        %endif
      %endif
      %break
  %endswitch
  %closefile tmpBuf
  %return tmpBuf
%endfunction


%% Function: SetDims ==========================================================
%% Abstract:
%%      Perform S-function SetDims function
%%
%function SetDims(block, system, oIdx, rIdx) void
  %openfile tmpBuf
  %%
  %switch SFunctionType
    %case "TLC"

      %assign funcName = ParamSettings.FunctionName
      %%
      %<GENERATE_TYPE(block, "SetDims", funcName, system, oIdx, rIdx)> \

      %break
    %case "C-MEX"
      %if Accelerator
        %<SLibCallSFcnSetDimsInSimulink(system, block, oIdx, rIdx)>
      %endif
      %break      
  %endswitch
  %closefile tmpBuf
  %return tmpBuf
%endfunction


%% Function: FinalizeAllDims ==========================================================
%% Abstract:
%%      Perform S-function FinalizeAllDims function
%%
%function FinalizeAllDims(block, system) void
  %openfile tmpBuf
  %%
  %switch SFunctionType
    %case "TLC"

      %assign funcName = ParamSettings.FunctionName
      %%
      %<GENERATE_TYPE(block, "FinalizeAllDims", funcName, system)> \

      %break
  %endswitch
  %closefile tmpBuf
  %return tmpBuf
%endfunction


%% Function: Enable ============================================================
%% Abstract:
%%      Perform S-function Enable for generated S-Functions
%%
%function Enable(block, system) Output
  %openfile buffer
 
  %switch SFunctionType
    %case "TLC"
      %if ParamSettings.HasVariableSampleTime == "yes"
        %<SLibResetNextVHTDueToEnable(block)>
      %endif
      %if LibSFunctionLevel() == "RTWLevel2"
        %if ParamSettings.FunctionLevel == 2 && !ParamSettings.EnableEmpty
          %<LibBlockReportError(block, "Inlined Enable function not supported.")>
        %endif
      %else
	%assign funcName = ParamSettings.FunctionName
        %if !ISFIELD(block, "GenCodeForTopAsyncSS") && ...
          FcnBlkIsAsyncTopSfcn(block) && ...
          (IsModelReferenceTarget() || ...
           (FEVAL("slfeature", "RootFcnCallInportTopLevelBuild") > 0))
          %addtorecord block GenCodeForTopAsyncSS TLC_FALSE
        %endif
	%<GENERATE_TYPE(block, "Enable", funcName, system)>
      %endif
      %break
    %case "C-MEX"     
      %if ParamSettings.HasVariableSampleTime == "yes"
        %<SLibResetNextVHTDueToEnable(block)>
      %endif
      %if Accelerator
	/* Call into Simulink for MEX-version of S-function */
	%<SLibCallBlockInSimulink(system,block,"SS_CALL_RTW_GENERATED_ENABLE")>
      %else
	%if LibSFunctionLevel() == "RTWLevel2"
	  %if ParamSettings.FunctionLevel == 2 && !ParamSettings.EnableEmpty
	    %assign childSFunctionIdx = FcnChildSFunctionIndex(block)
	    %assign s = tChildSimStruct
	    {
              SimStruct *%<s> = %<RTMGetIdxed("SFunction", childSFunctionIdx)>;
	      sfcnRTWGeneratedEnable(%<s>);
	    }
	  %endif
	%else
	  %if ParamSettings.FunctionLevel == 2 && !ParamSettings.EnableEmpty
	    %assign childSFunctionIdx = FcnChildSFunctionIndex(block)
	    %assign s = tChildSimStruct
	    {
              SimStruct *%<s> = %<RTMGetIdxed("SFunction", childSFunctionIdx)>;
	      sfcnEnable(%<s>);
	      if(ssGetErrorStatus(%<s>) != %<SLibGetNullDefinitionFromTfl()>) return;
	    }
	  %endif
	%endif
      %endif
  %endswitch
  %closefile buffer
  %if !ISEMPTY(buffer) && !WHITE_SPACE(buffer)
    /* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
    %<buffer>

  %endif
%endfunction  %% Enable


%% Function: Disable ===========================================================
%% Abstract:
%%      Perform S-function Disable for generated S-Functions
%%
%function Disable(block, system) Output
  %openfile buffer
  %if ParamSettings.HasVariableSampleTime == "yes"
    %<LibSetVarNextHitTime(block,LibRealNonFinite("-inf"))>;
  %endif
  %switch SFunctionType
    %case "TLC"
      %if LibSFunctionLevel() == "RTWLevel2"
        %if ParamSettings.FunctionLevel == 2 && !ParamSettings.DisableEmpty
          %<LibBlockReportError(block, "Inlined Disable function not supported.")>
        %endif
      %else
	%assign funcName = ParamSettings.FunctionName
        %if !ISFIELD(block, "GenCodeForTopAsyncSS") && ...
          FcnBlkIsAsyncTopSfcn(block) && ...
          (IsModelReferenceTarget() || ...
           (FEVAL("slfeature", "RootFcnCallInportTopLevelBuild") > 0))
          %addtorecord block GenCodeForTopAsyncSS TLC_FALSE
        %endif
	%<GENERATE_TYPE(block, "Disable", funcName, system)>
      %endif
      %break
    %case "C-MEX"
      %if Accelerator
	/* Call into Simulink for MEX-version of S-function */
	%<SLibCallBlockInSimulink(system,block,"SS_CALL_RTW_GENERATED_DISABLE")>
      %else
	%if LibSFunctionLevel() == "RTWLevel2"
	  %if ParamSettings.FunctionLevel == 2 && !ParamSettings.DisableEmpty
	    %assign childSFunctionIdx = FcnChildSFunctionIndex(block)
	    %assign s = tChildSimStruct
	    {
              SimStruct *%<s> = %<RTMGetIdxed("SFunction", childSFunctionIdx)>;
	      sfcnRTWGeneratedDisable(%<s>);
	    }
	  %endif
	%else
	  %if ParamSettings.FunctionLevel == 2 && !ParamSettings.DisableEmpty
	    %assign childSFunctionIdx = FcnChildSFunctionIndex(block)
	    %assign s = tChildSimStruct
	    {
              SimStruct *%<s> = %<RTMGetIdxed("SFunction", childSFunctionIdx)>;
	      sfcnDisable(%<s>);
	      if(ssGetErrorStatus(%<s>) != %<SLibGetNullDefinitionFromTfl()>) return;
	    }
	  %endif
	%endif
      %endif
  %endswitch
  %closefile buffer
  %if !ISEMPTY(buffer) && !WHITE_SPACE(buffer)
    /* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
    %<buffer>

  %endif
%endfunction %% Disable


%% Function: ZeroCrossings =====================================================
%% Abstract:
%%
%function ZeroCrossings(block, system) Output
  %if ParamSettings.FunctionLevel == 2
    %switch SFunctionType
      %case "TLC"
        %assign funcName = ParamSettings.FunctionName

	%<GENERATE_TYPE(block, "ZeroCrossings", funcName, system)>

	%break
      %case "C-MEX"
	%if Accelerator
	  /* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
	  /* Call into Simulink for MEX-version of S-function */
	  %<SLibCallBlockInSimulink(system,block,"SS_CALL_MDL_ZERO_CROSSINGS")>
	%else
	  %if !ParamSettings.ZeroCrossingsEmpty
	    /* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
	    {
	      %assign childSFunctionIdx = FcnChildSFunctionIndex(block)
	      %assign s = tChildSimStruct
              SimStruct *%<s> = %<RTMGetIdxed("SFunction", childSFunctionIdx)>;
	      ssSetNonsampledZCs(%<s>, &(%<LibBlockZCSignalValue("", "", 0, 0)>));
	      sfcnZeroCrossings(%<s>);
	      if(ssGetErrorStatus(%<s>) != %<SLibGetNullDefinitionFromTfl()>) return;
	    }
	  %endif
	%endif

        %break
    %endswitch
  %endif
%endfunction


%% Function: Terminate ========================================================
%% Abstract:
%%      Perform S-function Terminate function
%%
%function Terminate(block, system) Output
  %switch SFunctionType
    %case "TLC"
      %assign funcName = ParamSettings.FunctionName

      %<GENERATE_TYPE(block, "Terminate", funcName, system)>

      %break
    %case "C-MEX"
      %if !ParamSettings.TerminateEmpty
        /* %<TypeLevel> Block: '%<Name>' (%<ParamSettings.FunctionName>) */
        {
          %assign childSFunctionIdx = FcnChildSFunctionIndex(block)
          %assign s = tChildSimStruct
          SimStruct *%<s> = %<RTMGetIdxed("SFunction", childSFunctionIdx)>;
          sfcnTerminate(%<s>);
        }

      %endif
      %break
  %endswitch
%endfunction

%% [EOF] gensfun.tlc
