%% $Revision: 1.1.6.24 $
%% 
%%
%% Copyright 1994-2010 The MathWorks, Inc.
%%
%% Abstract:
%%   Subsystem block target file.
%%

%implements SubSystem "C"

%% Function: BlockInstanceSetup ================================================
%% Abstract:
%%      Create any files that were user specified.
%%      Rename the functions for this system to what the user specifies if
%%      they are unique.
%%
%function BlockInstanceSetup(block, system) void
  %<LibBlockSetIsExpressionCompliant(block)>
  %assign ss = System[CallSiteInfo.SystemIdx]
  %if ss.Type == "function-call"
    %% Check for unconnected function-call inputs, warn or error out.
    %assign allGround = 1
    %foreach idx = LibGetRecordWidth(ControlInputPort)
      %if ControlInputPort.SignalSrc[idx] != "G0"
        %assign allGround = 0
        %break
      %endif
    %endforeach
    %if allGround
      %if ConfigSet.Diagnostics.InvalidFcnCallConnMsg != "none" && ...
          ConfigSet.Diagnostics.InvalidFcnCallConnMsg != "off"
        %if SLibIsERTCodeFormat() && !GenerateGRTWrapper
          %openfile errTxt
Simulink Coder does not guarantee proper execution of models containing \
unconnected function-call inputs.
Try using the Simulink Function-Call Generator block for this subsystem.
          %closefile errTxt
          %if ConfigSet.Diagnostics.InvalidFcnCallConnMsg == "error"
            %<LibBlockReportError(block, errTxt)>
          %else
            %<LibBlockReportWarning(block, errTxt)>
          %endif
        %else
          %openfile errTxt
Simulink Coder does not guarantee proper execution of models containing \
unconnected function-call inputs.
Try using the Simulink Function-Call Generator block for subsystem
%<LibGetFormattedBlockPath(block)>.
          %closefile errTxt
          %selectfile STDOUT

NOTE: %<errTxt>
          %selectfile NULL_FILE
        %endif
      %endif
    %endif %% if allGround
  %endif
%endfunction %% BlockInstanceSetup


%% Function: BlockInstanceData =================================================
%% Abstract:
%%      Exercise each blocks BlockInstanceData function.  Note that this is
%%      recursive for subsystem blocks.
%%
%function BlockInstanceData(ssBlock, parentSystem) Output
  %assign childSystem = ::CompiledModel.System[CallSiteInfo.SystemIdx]
  %openfile bufferSS
  %foreach blkIdx = childSystem.NumBlocks
    %openfile buffer

    %<GENERATE(childSystem.Block[blkIdx], "BlockInstanceData", childSystem)>

    %closefile buffer
    %if WHITE_SPACE(buffer) == 0
      {
      \
      %<buffer>\
      }
    %endif
  %endforeach
  %closefile bufferSS
  %if WHITE_SPACE(bufferSS) == 0
    /* Blocks in %<childSystem.Type> subsystem: '%<ssBlock.Name>' */ \
    %<bufferSS>\
  %endif
%endfunction %% BlockInstanceData




%% [EOF] subsystm.tlc
