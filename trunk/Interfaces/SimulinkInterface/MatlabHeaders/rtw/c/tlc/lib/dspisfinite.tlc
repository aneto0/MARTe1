%%
%% dspisfinite.tlc 
%%
%% Copyright 1995-2007 The MathWorks, Inc.
%% $Revision: 1.1.6.2 $ $Date: 2010/09/24 12:39:27 $

%if EXISTS("_DSPISFINITELIB_") == 0
%assign _DSPISFINITELIB_ = 1

%if !EXISTS("dspIsFiniteUtils")
  %createrecord dspIsFiniteUtils { ...
  NothingMacro 1}
%endif

%function dspIsFinite(dTypeIdentifier, val) Output
  %%
  %if ((dTypeIdentifier == "D") || (dTypeIdentifier == "Z"))
    %assign utilityName = "dspIsFinite"
    %assign dTypeLabel = "double"
  %else 
    %assign utilityName = "dspIsFinite32"
    %assign dTypeLabel = "float"
  %endif
  %%
  %<utilityName>(%<val>)
  %%
  %if !(ISFIELD(dspIsFiniteUtils, utilityName))
    %%
    %<LibPushEmptyStackSharedUtils()>\
    %%
    %% register utility 
    %%
    %assign tmpRet = SETFIELD(dspIsFiniteUtils,utilityName,1)
    %%
    %% utility function prototype
    %%
    %assign funcDeclarationRoot = "int_T %<utilityName>(%<dTypeLabel> x)"
    %openfile funcProto
      %<funcDeclarationRoot>;
    %closefile funcProto
    %%
    %% utility definition
    %%
    %openfile utilityDef
    %<funcDeclarationRoot>
      %if (dTypeIdentifier == "D") | (dTypeIdentifier == "Z")
        {
        int hx;
        if (%<dspIsLittleEndian()>) {
            hx = *(1+(int32_T*)&x); /* Little Endian */
        } else {
            hx = *((int32_T *)&x); /* Big Endian */
        }
        return (int32_T) (((uint32_T)((hx & 0x7fffffff)-0x7ff00000)>>31) != 0);
        }
      %else
        {
          return (int32_T) ((uint32_T)(((*((int32_T *)&x)) & 0x7fffffff) - 0x7f800000) >> 31 != 0);
        }
      %endif
    %closefile utilityDef
    %%
    %<SLibAddMathIncludeForUtilsSourceCode(utilityDef)>
    %<SLibDumpUtilsSourceCodeAndCacheFunctionPrototype(utilityName,funcProto,utilityDef)>\
    %%
    %assign GSUStackBuf = LibPopStackSharedUtilsIncludes()
    %% 
  %endif
 
%endfunction %% dspIsFinite

%endif %% _DSPISFINITELIB_
 
%% [EOF] dspisfinite.tlc
