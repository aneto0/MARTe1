%%
%% This file contains tlc code for generation of
%%    fixed point addition, subtraction.
%%
%% Copyright 1994-2011 The MathWorks, Inc.
%%

%% Function: FixPt_Accumulate ==========================================
%%
%% Abstract:
%%  Fixed Point Accumulation
%%
%%  Vc += Vb or
%%  Vc -= Vb
%%
%% Synopsis:
%%      FixPt_Accumulate(C,B,roundMode,satMode,doAdd)
%%
%%      cLabel = string that gives output lvalue
%%      cDT    = output data type
%%      bLabel = string that gives input rvalue
%%      bDT    = input data type
%%      roundMode  = string specifying round to "Zero", "Nearest", etc.
%%      satMode    = string specifying "Wrap" or "Saturate" on overflow
%%      doAdd = boolean 0 = subtraction, otherwise addition
%%
%%  It is required that the input and output have identical storage types,
%%  identical scaling, and zero biases
%%  because of these requirements the formulas for the
%%  Stored Integers (not counting saturation) are trivial
%%
%%  C += B or
%%  C -= B
%%
%function FixPt_Accumulate(cLabel,cDT,bLabel,bDT,satMode,doAdd) Output
  %%
  %if !FixPt_DataTypeIsFloat(cDT)
    %%
    %<FixPt_FloatingPointNotSupported(bDT)>\
    %%
    %% Check that storage types and scaling are identical
    %% and biases are zero
    %%
    %if (bDT.Bias != 0) || ...
      (cDT.RequiredBits != bDT.RequiredBits) || ...
      (cDT.IsSigned   != bDT.IsSigned  ) || ...
      !FixPt_FracSlopesSame(cDT.FracSlope, bDT.FracSlope ) || ...
      (cDT.FixedExp   != bDT.FixedExp  )
      %%
      %%START_ASSERT
      %<LibReportFatalError("FixPt_Accumulate: Incompatible Input and Output Data Types.")>
      %%END_ASSERT
    %endif
  %endif
  %%
  %if doAdd
    %assign opStr = "FixPtAdd"
  %else
    %assign opStr = "FixPtSubtract"
  %endif
  %%  
  %<FixPt_WordLengthLimitationCheck(cDT)>\
  %<FixPt_WordLengthLimitationCheck(bDT)>\
  %%
  %assign vec = FixPt_BinaryOp(opStr, cLabel, cDT, cLabel, cDT, bLabel, bDT, ...
    "Simplest", satMode)
  %%
  %<vec[2]>\
  %%
%endfunction  %% FixPt_Accumulate



%% Function: FixPt_AccumPos ==========================================
%%
%% Abstract:
%%  Fixed Point Positive Accumulation
%%
%%  Vc += Vb
%%
%%  See FixPt_Accumulation for more details
%%
%function FixPt_AccumPos(cLabel,cDT,bLabel,bDT,satMode) Output
    %%
    %<FixPt_Accumulate(cLabel,cDT,bLabel,bDT,satMode,1)>\
    %%
%endfunction  %% FixPt_AccumPos



%% Function: FixPt_AccumNeg ==========================================
%%
%% Abstract:
%%  Fixed Point Negative Accumulation
%%
%%  Vc += Vb
%%
%%  See FixPt_Accumulation for more details
%%
%function FixPt_AccumNeg(cLabel,cDT,bLabel,bDT,satMode) Output
    %%
    %<FixPt_Accumulate(cLabel,cDT,bLabel,bDT,satMode,0)>\
    %%
%endfunction  %% FixPt_AccumPos



%% Function: FixPt_Accumulate_Easy ==========================================
%%
%% Abstract:
%%  Fixed Point Accumulation
%%
%%  Vc += Vb
%%
%%  This EASY version of FixPt_Accumulate
%%  Handles all data types and all scalings.
%%  If needed it always does the conversion from b's data type and scaling
%%  to c's data type and scaling.  It also declares a local variable to
%%  handle the cast if needed.
%%    The reason to use the "hard" version FixPt_Accumulate instead of
%%  this easy version would be to move the casts and declarations outside
%%  to a more efficient and/or readable location in the generated code.
%%
%function FixPt_Accumulate_Easy(cLabel,cDT,bLabel,bDT,roundMode,satMode,doAdd) Output
    %%
    %% create Bias Free version of output Data Type
    %%
    %copyrecord cNoBiasDT cDT
    %%
    %assign cNoBiasDT.Bias = 0.0
    %%
    %assign castInLabel = "castIn_Accumulate"
    %%
    %openfile gutsOfAdd
    %%
    %assign castInWasUsed = 0
    %%
    %% cast input to outputs data type
    %% add or subtract input from output
    %%
    %assign retVecStr = FixPt_Fix2Fix(castInLabel,cNoBiasDT,...
                                      bLabel,     bDT,...
                                      roundMode,satMode)
    %%
    %if SIZE(retVecStr,1) == 3
        %%
        %<FixPt_Accumulate(cLabel,      cNoBiasDT,...
                           retVecStr[1],cNoBiasDT,...
                           satMode,doAdd)>\
    %else
        %assign castInWasUsed = 1
        %<FixPt_Accumulate(cLabel,     cNoBiasDT,...
                           castInLabel,cNoBiasDT,...
                           satMode,doAdd)>\
    %endif
    %%
    %closefile gutsOfAdd
    %%
    %if castInWasUsed
    {
        %<cNoBiasDT.NativeType> %<castInLabel>;

        %<gutsOfAdd>\
    }
    %else
        %<gutsOfAdd>\
    %endif
    %%
%endfunction  %% FixPt_Accumulate_Easy



%% Function: FixPt_AccumPos_Easy ==========================================
%%
%% Abstract:
%%  Fixed Point Positive Accumulation
%%
%%  Vc += Vb
%%
%%  See FixPt_Accumulation_Easy for more details
%%
%function FixPt_AccumPos_Easy(cLabel,cDT,bLabel,bDT,roundMode,satMode) Output
    %%
    %<FixPt_Accumulate_Easy(cLabel,cDT,bLabel,bDT,roundMode,satMode,1)>\
    %%
%endfunction  %% FixPt_AccumPos_Easy



%% Function: FixPt_AccumNeg_Easy ==========================================
%%
%% Abstract:
%%  Fixed Point Negative Accumulation
%%
%%  Vc += Vb
%%
%%  See FixPt_Accumulation_Easy for more details
%%
%function FixPt_AccumNeg_Easy(cLabel,cDT,bLabel,bDT,roundMode,satMode) Output
    %%
    %<FixPt_Accumulate_Easy(cLabel,cDT,bLabel,bDT,roundMode,satMode,0)>\
    %%
%endfunction  %% FixPt_AccumPos_Easy
