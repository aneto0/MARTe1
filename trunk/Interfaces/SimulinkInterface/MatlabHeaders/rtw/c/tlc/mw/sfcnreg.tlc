%% ============================================================================
%% $RCSfile: sfcnreg.tlc,v $
%% $Revision: 1.43.4.38 $
%% $Date: 2010/10/15 12:05:48 $
%%
%% Abstract:
%%   This system file creates model_reg.h for the generated S-Function code format.
%%
%% January 28, 1997
%% Copyright 1994-2010 The MathWorks, Inc.
%%
%selectfile NULL_FILE

%% ============================================================================
%% The S-Function file model_reg.h is created as follows:
%%
%% /* File banner */
%%
%% User code ....................... LibRegFileCustomCode(buffer, "header")
%%
%% mdlInitializeSizes()
%% mdlInitializeSampleTimes()
%% mdlRTW()
%%
%% #ifdef MATLAB_MEX_FILE
%% # include "simulink.c"
%% #else
%% # include "cg_sfun.h"
%% #endif
%%
%% User code ..................... LibRegFileCustomCode(buffer, "trailer")
%%
%% /* [EOF] model_reg.h */
%%

%if EXISTS("_SFCNREG_") == 0
%assign _SFCNREG_ = 1

%realformat "CONCISE"

%% ============================================================================
%% Create an alias for the root and child SimStruct
%%
%assign S = "%<RTMGetModelSS()>"

%%
%% ============================================================================
%% Top of registration file custom code
%%
%openfile tmpBuf
%<LibDumpTopOfRegFileUserCode()>\
%closefile tmpBuf
%<SLibCacheCodeToFile("mdl_src_userTop", tmpBuf)>

%% ============================================================================
%% Generate parameter handling buffer
%%
%assign prmHandlingInfo   = SLibGenRTWSFcnParamHandlingFcns()
%assign numTunablePrms    = prmHandlingInfo[0]
%assign prmHandlingBuffer = prmHandlingInfo[1]

%openfile fcnsBuf
%if numTunablePrms > 0
  %<prmHandlingBuffer>\
%endif

%% ============================================================================
%% MdlInitializeSizes
%%
#if defined(RT_MALLOC) || defined(MATLAB_MEX_FILE)
#  include "%<LibGetModelName()>_mid.h"
#endif

%assign fcnAbstract = "Function to initialize sizes."
%assign fcnName = "mdlInitializeSizes"
%assign fcnReturns = "static void"
%assign fcnParams = "SimStruct *%<RTMGetModelSS()>"
%createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; Abstract fcnAbstract; ...
  Category "model"; GeneratedBy "sfcnreg.tlc"; Type "Initialize"}
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
%<fcnReturns> %<fcnName>(%<fcnParams>)
{
  %%
  %% Outputs
  %% (Cache into a buffer so the need for constant sample time can
  %%  be determined)
  %%
  %assign NeedConstantST = 0
  %assign setU32Compliant = TLC_TRUE
  %openfile extOutBuffer
  %with ExternalOutputs

    /* Number of output ports */
    if (!%<RTMSet("NumOutputPorts", NumExternalOutputs)>) return;
      
    %if NumExternalOutputs > 0
      %foreach idx = NumExternalOutputs
	%assign extOut       = ExternalOutput[idx]
	%assign sysIdx       = extOut.Block[0]
	%assign blkIdx       = extOut.Block[1]
	%assign outportBlock = System[sysIdx].Block[blkIdx]
	%with outportBlock
	  %assign portIdx    = LibBlockParamSetting("Outport", "PortNumber") -1
	  %assign width      = LibBlockInputSignalWidth(0)
	  %assign nDims      = LibBlockInputSignalNumDimensions(0)
	  %assign dtId       = LibBlockInputSignalDataTypeId(0)
	  %assign isComplex  = LibBlockInputSignalIsComplex(0)
          %assign isFrame    = extOut.FrameData == "yes"
          %assign dims       = LibBlockInputSignalDimensions(0)
          %assign isBus      = LibDataTypeIsBus(dtId)

          /* outport number: %<portIdx> */
          %if ISFIELD(extOut, "HasVarDims") && !isBus
            ssSetOutputPortDimensionsMode(S, %<portIdx>, VARIABLE_DIMS_MODE);
          %endif

          %<SLibDumpSfcnOutDims(S,portIdx,width,nDims,dims)>
          %%
          %%

          %if setU32Compliant
            %% Be U32Bit Region Compliant
            %% If the generated S-Function calls published fixedpoint API functions 
            %% to handle 33+ fixed point data, it must call set this flag to be 
            %% U32BitRegionCompliant.
            %if LibIsNonBuiltInTypeNeededForFixpt(dtId) 
              ssFxpSetU32BitRegionCompliant(S, 1);
              %assign setU32Compliant = TLC_FALSE
            %endif
          %endif
          %<SLibSfunRegisterAndSetDataType("output",S,portIdx,dtId,"namedObject")>
	  %assign locBusObj = LibBlockParamSetting("Outport", "BusObject")
	  %if !WHITE_SPACE(locBusObj)
	    ssSetBusObjectName(S, %<portIdx>, (void *)"%<locBusObj>");
	    ssSetBusOutputAsStruct(S, %<portIdx>, \
  	          %<LibBlockParamSetting("Outport", "OutputAsStructure")>);
	  %endif
	  %if isComplex
	    ssSetOutputPortComplexSignal(%<S>, %<portIdx>, COMPLEX_YES);
	  %endif
          %if isFrame
            ssSetOutputPortFrameData(%<S>, %<portIdx>, FRAME_YES);
          %endif
          
	  %if AllSampleTimesInherited == "yes"
	    %% Do nothing.  This is a single rate discrete model so
	    %% don't touch the I/O.  The S-Function will be registered
	    %% with a (block based) inherited sample time.
	    ssSetOutputPortOptimOpts(%<S>, %<portIdx>, SS_REUSABLE_AND_LOCAL);
	  %elseif !ISEQUAL(TID,"constant")
	    %assign period = SampleTime[TID].PeriodAndOffset[0]
	    %assign offset = SampleTime[TID].PeriodAndOffset[1]
	    ssSetOutputPortSampleTime(%<S>, %<portIdx>, %<period>);
	    ssSetOutputPortOffsetTime(%<S>, %<portIdx>, %<offset>);
	    ssSetOutputPortOptimOpts(%<S>, %<portIdx>, SS_REUSABLE_AND_LOCAL);
	  %else
	    %assign NeedConstantST = 1
	    %% *** Fix Port Based Sample Times
	    ssSetOutputPortSampleTime(%<S>, %<portIdx>, %<LibRealNonFinite("inf")>);
	    ssSetOutputPortOffsetTime(%<S>, %<portIdx>, 0.0);
	    ssSetOutputPortOptimOpts(%<S>, %<portIdx>, SS_NOT_REUSABLE_AND_LOCAL);
	  %endif
	%endwith
      %endforeach
    %endif
    %undef sysIdx, blkIdx, portIdx
  %endwith
  %closefile extOutBuffer
  %%
  %% Sample times
  %%
  %if 0 %% NeedConstantST   *** Fix Port Based Sample Times
    %<RTMSet("NumSampleTimes", (NumSynchronousSampleTimes+1))>; /* Number of sample times */  
  %else
    %assign nTs = AllSampleTimesInherited == "yes" ? 1 : NumSynchronousSampleTimes
    %<RTMSet("NumSampleTimes", nTs)>; /* Number of sample times */  
  %endif
  %% States
  %<RTMSet("NumContStates", NumContStates)>; /* Number of continuous states */
  %%
  %% Solver related setup
  %%
  %if NumNonsampledZCs > 0
    %<RTMSet("NumNonsampledZCs", ZCVectorlength)>; /* Number of nonsampled ZCs */
  %else 
    %<RTMSet("NumNonsampledZCs", NumNonsampledZCs)>; /* Number of nonsampled ZCs */  
  %endif
  %if SolverType == "VariableStep"
    %<RTMSet("ZCCacheNeedsReset", "%<SolverResetInfo.ZCCacheNeedsReset>")>;
    %<RTMSet("DerivCacheNeedsReset", "%<SolverResetInfo.DerivCacheNeedsReset>")>;
  %endif

  %% Dump External Outputs 
  %<extOutBuffer>
  
  %%
  %% Inputs and direct feedthrough
  %%
  %with ExternalInputs
  
    /* Number of input ports */
    if (!%<RTMSet("NumInputPorts", NumExternalInputs)>) return;
  
    %if NumExternalInputs > 0
      %foreach portIdx = NumExternalInputs
        %assign extInp    = ExternalInput[portIdx]
	%assign dtId      = LibGetRecordDataTypeId(extInp)
	%assign width     = LibGetRecordWidth(extInp)
	%assign inputTid  = extInp.TID
	%assign isComplex = LibGetRecordIsComplex(extInp)
        %assign isFrame   = extInp.FrameData == "yes"
        %assign isBus     = LibDataTypeIsBus(dtId)        
        
	%assign directFT  = extInp.DirectFeedThrough == "yes"
	
	/* inport number: %<portIdx> */
	{
          %if ISFIELD(extInp, "HasVarDims")
             ssSetInputPortRequiredContiguous(S, %<portIdx>, true);
             %if isBus == TLC_FALSE
               ssSetInputPortDimensionsMode(S, %<portIdx>, VARIABLE_DIMS_MODE);
             %endif
          %endif

          %assign dims    = LibGetRecordDimensions(extInp)
          %assign numDims = SIZE(%<dims>,1)
          %<SLibDumpSfcnInpDims(S,portIdx,width,numDims,dims)>

          %if setU32Compliant
            %% Be U32Bit Region Compliant
            %% If the generated S-Function calls published fixedpoint API functions 
            %% to handle 33+ fixed point data, it must call set this flag to be 
            %% U32BitRegionCompliant.
            %if LibIsNonBuiltInTypeNeededForFixpt(dtId) 
              ssFxpSetU32BitRegionCompliant(S, 1);
              %assign setU32Compliant = TLC_FALSE
            %endif
          %endif
	  %<SLibSfunRegisterAndSetDataType("input",S,portIdx,dtId,"namedObject")>
	  %if LibDataTypeIsBus(dtId)
	    ssSetBusInputAsStruct(S, %<portIdx>, 1);
	  %endif
	  %if isComplex
	    ssSetInputPortComplexSignal(%<S>, %<portIdx>, COMPLEX_YES);
	  %endif
          %if isFrame
            ssSetInputPortFrameData(%<S>, %<portIdx>, FRAME_YES);
          %endif
	  %if directFT
	    ssSetInputPortDirectFeedThrough(%<S>, %<portIdx>, 1);
	  %endif
	  %if AllSampleTimesInherited == "yes"
	    %% Do nothing.  This is a single rate discrete model so
	    %% don't touch the I/O.  The S-Function will be registered
	    %% with a (block based) inherited sample time.
	  %else  
	    %assign period = SampleTime[inputTid].PeriodAndOffset[0]
	    %assign offset = SampleTime[inputTid].PeriodAndOffset[1]
	    ssSetInputPortSampleTime(%<S>, %<portIdx>, %<period>);
	    ssSetInputPortOffsetTime(%<S>, %<portIdx>, %<offset>);
	  %endif
	  ssSetInputPortOverWritable(%<S>, %<portIdx>, 0);
	  ssSetInputPortOptimOpts(%<S>, %<portIdx>, SS_NOT_REUSABLE_AND_GLOBAL);
	}
      %endforeach
    %endif
  %endwith

  %<RTMSet("RTWGeneratedSFcn", 1)>; /* Generated S-function */

  %%
  %% DWork
  %%
  %assign numDWorks = ::CompiledModel.DWorks.NumDWorks
  %if numDWorks > 0
    /* DWork */
    if ( !%<RTMSet("NumDWork", numDWorks)>) {
      return;
    }
    %foreach dwIdx = numDWorks
      %assign dwRec     = ::CompiledModel.DWorks.DWork[dwIdx]
      %assign dwId      = SLibDWorkDataTypeId(dwRec)
      %assign dtRec     = ::CompiledModel.DataTypes.DataType[dwId]
      %assign isComplex = LibGetRecordIsComplex(dwRec)
      %assign dTypeEnum = LibGetDataTypeEnumFromId(dwId)
      
      /* '%<SLibGrBlockName(dwRec.GrSrc)>': %<dwRec.Name> */
      %<RTMSetIdxed("DWorkName", dwIdx, "\"DWORK%<dwIdx>\"")>;
      %<RTMSetIdxed("DWorkWidth", dwIdx, SLibDWorkWidth(dwRec))>;
      %if LibIsNonBuiltInTypeNeededForFixpt(dwId) || SLibDataTypeHasObject(dwId)
          %if setU32Compliant
            %% Be U32Bit Region Compliant
            %% If the generated S-Function calls published fixedpoint API functions 
            %% to handle 33+ fixed point data, it must call set this flag to be 
            %% U32BitRegionCompliant.
            ssFxpSetU32BitRegionCompliant(S, 1);
            %assign setU32Compliant = TLC_FALSE
          %endif
          %<SLibSfunRegisterAndSetDataType("dwork",S,dwIdx,dwId,"namedObject")>
      %elseif dTypeEnum==""  
	%% custom data type. Need to register it
	#if SS_SFCN_FOR_SIM
	{
	  int id = %<RTMRegisterDataType("\"%<dtRec.DTName>\"")>;
	  if (id == INVALID_DTYPE_ID ) return;
	  
	  %assign sizeStr = "sizeof(%<dtRec.DTName>)"
	  if(!%<RTMSetIdxed("DataTypeSize", "id", "%<sizeStr>")>) return;
	  %<RTMSetIdxed("DWorkDataType", dwIdx, "id")>;
	}
	#endif
      %else
	%if SLibDWorkDataTypeId(dwRec) != tSS_DOUBLE
	  %<RTMSetIdxed("DWorkDataType", dwIdx, dTypeEnum)>;
	%endif
      %endif
      %if isComplex
        %<RTMSetIdxed("DWorkComplexSignal", dwIdx, "COMPLEX_YES")>;
      %endif
      %if dwRec.UsedAs == "DSTATE"
        %<RTMSetIdxed("DWorkUsedAsDState", dwIdx, 1)>;
      %endif
    %endforeach
  %endif

  %%
  %% Data-Store registration
  %%
  %<SLibRegisterDataStores("%<S>")>
  
  %%
  %% Parameters
  %%
  /* Tunable Parameters */
  %<RTMSet("NumSFcnParams", ModelParameters.SfcnParamIdx)>;
  /* Number of expected parameters */
  #if defined(MATLAB_MEX_FILE)
  if (%<RTMGet("NumSFcnParams")> == %<RTMGet("SFcnParamsCount")>) {
    #if defined(MDL_CHECK_PARAMETERS)
    mdlCheckParameters(S);
    #endif /* MDL_CHECK_PARAMETERS */
    if( %<RTMGetErrStat()> != %<SLibGetNullDefinitionFromTfl()> ) {
      return;
    }
  } else {
    return; /* Parameter mismatch will be reported by Simulink */
  }
  #endif /* MATLAB_MEX_FILE */
  %%
  %% SS_OPTIONS
  %%
  %assign optionStr = []
  %assign optionStr = optionStr + "SS_OPTION_RUNTIME_EXCEPTION_FREE_CODE "
  %if AllSampleTimesInherited == "yes"
    %% Do nothing.  This is a single rate discrete model so
    %% don't touch the I/O.  The S-Function will be registered
    %% with a (block based) inherited sample time.
  %elseif NeedConstantST  %% *** Fix Port Based Sample Times
    %assign warntxt="Switching to block based sample times for the\n" + ...
      "generated S-Function because one or more model outputs are constant."
    %<LibReportWarning(warntxt)>
  %else
    %assign optionStr = optionStr + "\nSS_OPTION_PORT_SAMPLE_TIMES_ASSIGNED "
  %endif
  %% S-function that accesses wrapper DWorks cannot have constant sample time
  %if ::CompiledModel.DWorks.NumSFcnWrapperDWorks >0
    %assign optionStr = optionStr +"\nSS_OPTION_DISALLOW_CONSTANT_SAMPLE_TIME "
  %endif
  %assign numStr = SIZE(optionStr, 1)
  %if numStr > 0
    
    /* Options */
%openfile tmpBuf
(%<optionStr[0]>\
    %foreach strIdx = numStr-1
| %<optionStr[strIdx+1]>\
    %endforeach
)\
%closefile tmpBuf
    %<RTMSet("Options", tmpBuf)>;
  %endif
  
  #if SS_SFCN_FOR_SIM
  {
    %% Register block's compliance with implicit iterator
    %<SLibDumpSupportsMultipleExecInstancesFlag()>
  
    %<SLibDumpHasStateInsideForEachSSFlag()>
  }
  #endif
}

%% ============================================================================
%% MdlInitializeSampleTimes
%%
%assign fcnAbstract = "Function to initialize sample times."
%assign fcnName = "mdlInitializeSampleTimes"
%assign fcnReturns = "static void"
%assign fcnParams = "SimStruct *%<RTMGetModelSS()>"
%createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; Abstract fcnAbstract; ...
  Category "model"; GeneratedBy "sfcnreg.tlc"; Type "Initialize"}
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
%<fcnReturns> %<fcnName>(%<fcnParams>)
{
  %<LibDumpModelInitializeSampleTimes()>\
  %% Add a constant sample time if needed
  %if 0 %% NeedConstantST   *** Fix Port Based Sample Times
    /* additional sample time for constant sample time ports */
    %<RTMSetIdxed("SampleTime", NumSynchronousSampleTimes, rtInf)>;
    %<RTMSetIdxed("OffsetTime", NumSynchronousSampleTimes, 0.0)>;
  %endif
    
}

%% ============================================================================
%% MdlSetWorkWidths
%%
%assign genWrapperDWorks = ::CompiledModel.DWorks.NumSFcnWrapperDWorks > 0
%assign constTsErrCheck  = ...
  AllSampleTimesInherited == "yes" && ::CompiledModel.DWorks.NumDWorks > 0

%if genWrapperDWorks || constTsErrCheck
%assign fcnName = "mdlSetWorkWidths"
%assign fcnReturns = "static void"
%assign fcnParams = "SimStruct *S"
%createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; Abstract ""; ...
  Category "model"; GeneratedBy "sfcnreg.tlc"}
#define MDL_SET_WORK_WIDTHS
#if defined(MDL_SET_WORK_WIDTHS) && defined(MATLAB_MEX_FILE)
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
%<fcnReturns> %<fcnName>(%<fcnParams>)
{
  %if constTsErrCheck
    %<SLibConstantTsErrorCheck("%<S>")>  
    
  %endif  
  %if genWrapperDWorks
    %<SLibGenDataStoreChecks("%<S>")>
    
  %endif
}
#endif /* MDL_SET_WORK_WIDTHS */
%endif


%% ============================================================================
%% MEX-glue
%%
#if defined(MATLAB_MEX_FILE)

# include "fixedpoint.c"
# include "simulink.c"

#else

# undef S_FUNCTION_NAME 
# define S_FUNCTION_NAME %<Name> 
%if GenCPP
extern "C" {
%endif
# include "cg_sfun.h"
%if GenCPP
}
%endif
#endif /* defined(MATLAB_MEX_FILE) */
%closefile fcnsBuf
%<SLibCacheCodeToFile("mdl_fcn_defn", fcnsBuf)>

%%
%% ============================================================================
%% Custom trailer code
%%
%openfile tmpBuf
%<LibDumpBottomOfRegFileUserCode()>\
%closefile tmpBuf
%<SLibCacheCodeToFile("mdl_src_userBottom", tmpBuf)>

%% ============================================================================
%% Undef aliases for consistency checking
%%
%undef S

%selectfile NULL_FILE

%endif %% _SFCNREG_

%% [EOF] sfcnreg.tlc
