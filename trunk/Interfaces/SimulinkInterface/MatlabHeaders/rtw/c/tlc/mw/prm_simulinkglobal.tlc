%% =============================================================================
%% File: prm_simulinkglobal.tlc
%%
%% Abstract:
%%   
%%   
%%  
%%
%% Copyright 1994-2012 The MathWorks, Inc.
%% 
%% =============================================================================
%selectfile NULL_FILE

%if EXISTS("_PRM_SIMULINKGLOBAL_") == 0
%assign _PRM_SIMULINKGLOBAL_ = 1

%include "prm_cacheutils.tlc"


%% Function: SLibCacheSimulinkGlobalPrmBuffers =================================
%% Abstract:
%%   Generate the Decl & Instance buffers for SimulinkGlobal parameters.
%%  
%function SLibCacheSimulinkGlobalPrmBuffers(startIdx) void
  %% The UnstructuredSimulinkGlobal buffers Decl and Instance could be created
  %% by either FcnGenUnstructuredSimulinkGlobalPrmDeclsAndInstances 
  %% or SLibCacheUnstructuredSimulinkGlobalPrmBuffers.
  %% The first case happens only when the parameter tuning mode is not DialogOnly.
  %% The second case happens only for DialogOnly mode (to handle parameters in the 
  %% ModelReferenceGlobal section). These two calls are mutually exclusive, thus 
  %% ensuring no double creation of the same buffers.
  %% Notice that for a top model in Accelerator mode, calls to 
  %% SLibIsParamUnstructured in FcnGenUnstructuredSimulinkGlobalPrmDeclsAndInstances
  %% ensures that we get empty UnstructuredSimulinkGlobal buffers as expected.
  %if InlineParameters != 0
    %<FcnGenUnstructuredSimulinkGlobalPrmDeclsAndInstances(startIdx)>
  %endif

  %if !SLibAreSimulinkGlobalParamsUnstructured()
    %<FcnGenStructuredSimulinkGlobalPrmDeclsAndInstances()>
  %endif
%endfunction  

%% Loop through entries in Model Parameters table to write out unstructured
%% SimulinkGlobal variables
%function FcnGenUnstructuredSimulinkGlobalPrmDeclsAndInstances(startIdx) void
  %<SLibCreatePrmBuffer("UnstructuredSimulinkGlobal", "Decl")>
  %<SLibCreatePrmBuffer("UnstructuredSimulinkGlobal", "Instance")>
  %assign declBuffer = ""
  %assign instanceBuffer = ""
  %assign numParams = NumInrtP
  %foreach prmIdx = numParams
    %assign mdlParam = Parameter[startIdx + prmIdx]
    %if SLibIsParamUnstructured(mdlParam)
      %assign declBuffer = declBuffer + SLibGenModelParamDecl(mdlParam, TLC_TRUE)
      %assign instanceBuffer = instanceBuffer + SLibGenUnstrModelParamInstance(mdlParam, TLC_TRUE)
    %endif
  %endforeach
  %<SLibSetPrmBufferPart("UnstructuredSimulinkGlobal", "Decl", ...
    "Code", declBuffer)>
  %<SLibSetPrmBufferPart("UnstructuredSimulinkGlobal", "Instance", ...
    "Code", instanceBuffer)>
%endfunction 
  
%% Loop through systems to write out structured SimulinkGlobal variables.
%% This is necessary as structured variables are stored in the buffer associated 
%% with appropriate system. Notice that we skip unstructured variables in
%% FcnScopeParameters.
%function FcnGenStructuredSimulinkGlobalPrmDeclsAndInstances() void
  %assign numsys = GetNumSystemsForCodeGen()
  %foreach sysIdx = numsys
    %assign sys = System[sysIdx]
    %<SLibCreateSystemPrmBuffer(sys, "SimulinkGlobal", "Typedef")>
    %<SLibCreateSystemPrmBuffer(sys, "SimulinkGlobal", "Decl")>

    %% Generate the parameter structure typedef & decl buffers for this system
    %assign result = FcnGenOneSimulinkGlobalPrmStructDecl(sysIdx)
    %<SLibSetSystemPrmBufferPart(sys, "SimulinkGlobal", "Typedef", "Code", result[0])>
    %<SLibSetSystemPrmBufferPart(sys, "SimulinkGlobal", "Decl",    "Code", result[1])>
  %endforeach

  %<SLibCreatePrmBuffer("SimulinkGlobal", "Instance")>
  %<LibAddToCompiledModel("NumPrmStructElements", INVALID_COUNTER)>
  %assign result = FcnGenSimulinkGlobalPrmInstance()
  %<SLibSetPrmBufferPart("SimulinkGlobal", "Instance", "Code", result[0])>
  %assign CompiledModel.NumPrmStructElements = result[1]
%endfunction %% FcnGenAllSimulinkGlobalPrmDecls
  
%% Function: FcnGenOneSimulinkGlobalPrmStructDecl ==============================
%% Abstract:
%%   Generate the structure declaration for the given system.
%%
%function FcnGenOneSimulinkGlobalPrmStructDecl(sysIdx) void
  %assign numsys = GetNumSystemsForCodeGen()
  %assign result = ["", ""]
  %if SLibSystemHasOwnDataScope(System[sysIdx])
    %assign parameterBuff = SLibGetSystemParameters(sysIdx)
    %assign userTypeAndPrmStructDecl = ""
    %assign prmStructTypedef = ""
    %if (sysIdx < (numsys-1))
      %assign identifierType = FcnSysVarGroupType(System[sysIdx],"Parameter")
      %openfile comment
      %if  LibSystemIsReusedLibraryFcn(System[sysIdx]) && ISFIELD(System[sysIdx], "RLSCommentName")
        %assign sysName = System[sysIdx].RLSCommentName
      %else
        %assign sysName = "'" + System[sysIdx].Name + "'"
      %endif
      /* Parameters for system: %<sysName> */
      %closefile comment
    %else %% RootSystem (sysIdx == numsys-1)
      %assign  identifierType = tParametersType
      %openfile comment
      /* Parameters (auto storage) */
      %closefile comment
    %endif
    %%
    %assign userTypes = LibDumpTypedefsCache()
    %if sysIdx == (numsys-1)
      %assign ::CompiledModel.TypedefsCache = ""
    %endif
    %%
    %% Insert user-defined types before defining the parameter structure
    %%
    %if userTypes!=""
      %assign userTypeAndPrmStructDecl = userTypeAndPrmStructDecl + userTypes
    %endif
    %if parameterBuff[1] > 0
      %%
      %% Generate the structure declaration
      %%
      %openfile prmStructDecl
      
      %assign align = ""
      %if CompiledModel.ModelParameters.StructAlignment > 0 && structAlign
        %assign structName = identifierType + "_"
        %assign align = SLibGetAlignmentSyntax(::CompiledModel.Name, structName, "", ...
                                 CompiledModel.ModelParameters.StructAlignment, "DATA_ALIGNMENT_WHOLE_STRUCT")
      %endif
      %%
      %<comment>\
      %<SLibIfNetPreprocessorCondition(System[sysIdx])>
      %if align != ""
        %switch(structDAFlag.position)
          %case "DATA_ALIGNMENT_PREDIRECTIVE"
            %<align> struct %<identifierType>_ {
              %<parameterBuff[0]>
            };
            %break
          %case "DATA_ALIGNMENT_POSTDIRECTIVE"
            struct %<identifierType>_ {
              %<parameterBuff[0]>
            } %<align>;
            %break
          %case "DATA_ALIGNMENT_PRECEDING_STATEMENT"
            %<align>
            struct %<identifierType>_ {
              %<parameterBuff[0]>
            };
            %break
          %case "DATA_ALIGNMENT_FOLLOWING_STATEMENT"
            struct %<identifierType>_ {
              %<parameterBuff[0]>
            };
            %<align>
            %break
        %endswitch
      %else
        struct %<identifierType>_ {
          %<parameterBuff[0]>
        };
      %endif
      
      %<SLibEndIfNetPreprocessorCondition(System[sysIdx])>
      %closefile prmStructDecl
      %assign userTypeAndPrmStructDecl = ...
	userTypeAndPrmStructDecl + prmStructDecl
      %%
      %% Generate the structure typedef
      %%
      %openfile prmStructTypedef
      
      %<comment> \
      typedef struct %<identifierType>_ %<identifierType>;
      %closefile prmStructTypedef
    %endif
    %%
    %assign result[0] = "%<prmStructTypedef>"
    %assign result[1] = "%<userTypeAndPrmStructDecl>"
  %endif
  %return result
%endfunction %% FcnGenOneSimulinkGlobalPrmStructDecl


%% Function: FcnGenSimulinkGlobalPrmInstance ===================================
%% Abstract:
%%   Generate the instantiation of the parameters structure
%%
%function FcnGenSimulinkGlobalPrmInstance() void
  
  %if IsModelReferenceTarget()
    %assign result = FcnScopeParameters(NumSystems-2, 0)
  %else
    %assign result = FcnScopeParameters(NumSystems-1, 0)
  %endif

  %return result

%endfunction %% FcnGenSimulinkGlobalPrmInstance


%%Function: SLibGetSystemParameters ============================================
%%Abstract:
%%  Returns the contents of a systems parameter structure.
%%
%function SLibGetSystemParameters(sysIdx) void
  %assign sysParams = ""
  %assign paramArg = System[sysIdx].Interface.ParameterArgDef
  %assign numElements   = 0
  %assign res           = ["", 0]
  %openfile sysParams
  %if paramArg.NumFlatFields > 0
    %with CompiledModel.ModelParameters
      %foreach prmIdx = paramArg.NumFlatFields
	%assign prm = Parameter[paramArg.FirstLocation + prmIdx]
        %if SLibIsParamUnstructured(prm)
          %continue
        %endif
	%if !ISEMPTY(prm.Value) && !SLibOmitParameter(prm)
          %assign prmWidth = LibGetRecordWidth(prm)
          %if prmWidth > 0
            %% alignment
            %assign name = LibGetRecordIdentifier(prm)
            %assign dataType = SLibGetRecordContainerTypeName(prm)
            %assign  comment = SLibGenModelPrmDefnComment(prm)
            %assign optWidth = LibOptionalVectorWidth(prmWidth)
            
            %assign align=""
            %if prm.Alignment > 0 && fieldAlign
              %assign align = SLibGetAlignmentSyntax(LibGetModelName(), ...
                name, dataType, prm.Alignment, "DATA_ALIGNMENT_STRUCT_FIELD")
            %endif
            %% end            
            %<align> %<dataType> %<name>%<optWidth>; /*%<comment>*/
            %assign numElements = numElements + 1
          %endif
	%endif
	%if prm.Padding != 0 
	  %assign optPadWidth = LibOptionalVectorWidth(prm.Padding)
	  char pad_%<LibGetRecordIdentifier(prm)>%<optPadWidth>;
	%endif
      %endforeach
    %endwith
  %endif
  %assign childTypedefs = ...
    FcnGetHStructChildSystemTypedefs(sysIdx, "Parameters", "Parameter", numElements > 0)
  %assign numElements = numElements + childTypedefs[1]
  %<childTypedefs[0]>
  %closefile sysParams
  %assert (LibGetFieldSet(System[sysIdx], "HasParametersArg") == 0)
  %if numElements > 0
    %assign System[sysIdx].HasParametersArg = 1
    %% For model reference, we igore anything set in the root system
    %if !(IsModelReferenceTarget() && (NumSystems-1 == sysIdx))
      %assign CompiledModel.HasParametersArg = 1
    %endif
  %endif
  %<LibSetFieldSet(System[sysIdx], "HasParametersArg")>
  %if numElements > 0
    %assign res[0] = "%<sysParams>"
    %assign res[1] = numElements
  %endif
  %return res %% return [%<sysParams>, %<numElements>]
%endfunction %% SLibGetSystemParameters


%% Function: FcnScopeParameters ================================================
%% Abstract:
%%    This function generates a systems non-inlined parameter initialization.
%%    This function also calls SLibChildScopeValues to inline any child-system
%%    structure initialization.
%%
%% Arguments:
%%        sysIdx - index for the system to generate initialization
%%     mdlPrmPtr - index into the ModelParametes vector, that points
%%                 to the first element of a system instance parameter
%%                 vector (simliar to first-instance index but also for
%%                 second and greater instance of a system)
%%
%function FcnScopeParameters(sysIdx, mdlPrmPtr) void
  %assign prmBuff = ""
  %assign paramArg = System[sysIdx].Interface.ParameterArgDef
  %assign numElements = 0
  %assign comma = ""
  %assign res = ["", 0, 0]
  %% --- comment generation variables ---
  %assign bGenerateComments = SLibCommentParameterInstances()
  %assign scalC = ""
  %assign vectC = ""
  
  %openfile prmBuff
  %if paramArg.NumFlatFields > 0
    %with CompiledModel.ModelParameters
      %% Assert that this function is being called for the first
      %% system parameter for System[sysIdx]
      %assert (InlineParameters != 0 || ...
	(sysIdx == Parameter[mdlPrmPtr].OwnerSysIdx[0]))
      %assert (InlineParameters != 0 || (mdlPrmPtr == 0) || ...
	(sysIdx != Parameter[mdlPrmPtr-1].OwnerSysIdx[0]) || ...
	(Parameter[mdlPrmPtr].OwnerSysIdx[1] != ...
	Parameter[mdlPrmPtr-1].OwnerSysIdx[1]))
      %%
      %foreach prmIdx = paramArg.NumFlatFields
	%assign prm = Parameter[mdlPrmPtr+prmIdx]
        %if SLibIsParamUnstructured(prm)
          %continue
        %endif
	%if !ISEMPTY(prm.Value) && !SLibOmitParameter(prm)
	  %assign prmWidth = LibGetRecordWidth(prm)
          %if bGenerateComments
	    %if prmWidth > 1
	      %assign scalC = ""
	      %assign vectC = SLibGenModelPrmDefnComment(prm)
	    %else
	      %assign scalC = "/*" + SLibGenModelPrmDefnComment(prm) + "*/\n"
	      %assign vectC = ""
	    %endif
	  %endif
	  %assign numElements = numElements + prmWidth
	  %assign initString = comma + " " + SLibGetFormattedPrmValue(prm, vectC)
	  %<initString> \
          %assign comma = ", %<scalC>\n"
        %endif
        %if prm.Padding != 0 
          %if prm.Padding == 1
            %<comma> 'a' \
          %else
            %assign padInit = "{"
            %foreach loopIdx = prm.Padding
              %assign padInit = padInit +"'a'"
              %if loopIdx != prm.Padding-1
                %assign padInit = padInit + ","
              %endif
            %endforeach
            %assign padInit = padInit +"}"
            %<comma> %<padInit> \
          %endif	    
        %endif
      %endforeach
    %endwith
  %endif
  %assign childValues = SLibChildScopeValues(sysIdx, ...
    mdlPrmPtr+paramArg.NumFlatFields, "Parameters", "Parameter", numElements > 0)
  %assign numElements = numElements + childValues[1]
  %if childValues[1] > 0
    %<comma>%<childValues[0]> \
  %else
    %<scalC>
  %endif
  %closefile prmBuff
  
  %if numElements > 0
    %assign res[0] = "%<prmBuff>"
    %assign res[1] = numElements
  %endif
  %assign res[2] = childValues[2]
  %return res
%endfunction %% FcnScopeParameters


%% Function: LibParametersStructIsEmpty ========================================
%% Abstract:
%%   NOTE: All calls to this function could be modified to be calls to
%%   (CompiledModel.NumPrmStructElements == 0).   However, to facilitate
%%   code readability, we will keep this as a wrapper function for now.
%%               
%function LibParametersStructIsEmpty() void
  
  %if ISFIELD(CompiledModel,"NumPrmStructElements")
    %% Counter should not be accessed before it has been set.
    %assert (CompiledModel.NumPrmStructElements != INVALID_COUNTER)
    
    %return (CompiledModel.NumPrmStructElements == 0)
  %else
    %return TLC_TRUE
  %endif
  
%endfunction %% LibParametersStructIsConst

%function SLibModelParametersStructIsEmpty() void
  %return (CompiledModel.HasParametersArg == 0)
%endfunction
  

%% Function: SLibAreSimulinkGlobalParamsUnstructured ==========================
%% Abstract:
%%   In the following cases, we treat SimulinkGlobal parameters as if they 
%%   were ExportedGlobal (unstructured):
%%    - For models that are model reference submodels.
%%    - For models that contain model reference blocks
%%    - For models that contain standalone subsystems.
%function SLibAreSimulinkGlobalParamsUnstructured()
  %if Accelerator
    %assert !IsModelReferenceTarget()
    %return TLC_FALSE
  %elseif (InlineParameters == 1 && ...
    (IsModelReferenceTarget() || ...
     HasModelReferenceBlocks()))
    %return TLC_TRUE
  %else
    %return TLC_FALSE
  %endif
%endfunction 

%% Function: SLibIsParamUnstructured ==========================================
%% Abstract:
%%   Return true if the given parameter should be generated as unstructured.
%% This is a global flag for models, except for global parameters owned by
%% model blocks when the top model has inline parameters off.
%function SLibIsParamUnstructured(param)
  %if Accelerator
    %assert !IsModelReferenceTarget()
    %return TLC_FALSE
  %endif

  %if ((IsModelReferenceTarget() || HasModelReferenceBlocks())) 
    %if (param.InModelRefGlobalSection)
      %return TLC_TRUE
    %endif

    %if !ISEMPTY(param.WorkspaceVarName)
      %% if param.WorkspaceVarName is empty, we are dealing with a 
      %% pseudo workspace variable generated for a mask parameter 
      %% whose value expression is not tunable. We should treat such 
      %% parameters exactly like a block parameter, and hence always
      %% structured.
      %return TLC_TRUE
    %endif
  %endif
  %return TLC_FALSE
%endfunction 

%endif %% EXISTS("_PRM_SIMULINKGLOBAL_")

%% [EOF] prm_simulinkglobal.tlc
