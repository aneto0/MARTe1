%% $RCSfile: graphmaplib.tlc,v $
%% $Revision: 1.2.4.16 $
%% $Date: 2011/08/17 18:09:10 $
%%
%% April 10, 2001
%% Copyright 1994-2009 The MathWorks, Inc.
%%
%% Disclaimer
%% ==========
%%
%% The functionality provided in this TLC module is currently under
%% development.
%% 
%% Nomenclature
%% ============
%% 
%%  ? Lines and words marked with the question mark are subject to discussion,
%%    change or general not settled at this point in time
%%
%%  i Lines leaded by "i" marking Mathworks internal fields that should not
%%    be used by a customer
%%
%% Syntax  
%% ======
%%
%% Subsystem - Sybsystem or root level system
%%
%% Abstract
%% ========
%%
%% The BlockHierarchyMap provides a in memory representation of the
%% graphical model.
%%
%% Note that there are two block diagram parameters that control whether
%% virtual blocks and regions are writen into BlockHierarchyMap:
%%   'IncludeVirtualBlocksInRTWFileBlockHierarchyMap'
%%   'IncludeRegionsInRTWFileBlockHierarchyMap'
%% By default these two parameters are 'off'.
%%
%% BlockHierarchyMap {
%%   NumSubsystems           - Number of node records in the 
%%
%%   Subsystem {
%%     Name                  - Mangled subsystem name
%%     SLName                - Unmangled subsystem name
%%
%%     SubsystemBlkIndex     - [ Subsystem index, Block index ] back reference
%%                             to the subsystem block in the 
%%                             BlockHierarchyMap
%%
%%     Type                  - Subsystem type (root, enable, trigger, fcncall
%%                             action, virtual)
%%     MaskType              - empty ("") if not mask other wise mask type
%%     ChildSubsystems       - Vector of subsystem indices that include all
%%                             child subsystem blocks
%%     ChildSubsystemBlks    - Vector of block indices that include all 
%%                             child subsystem blocks
%%     InputPortBlocks       - Vector of indices that include all input port
%%                             blocks
%%     OutputPortBlocks      - Vector of indices that include all output port
%%                             blocks
%%     DataStoreBlocks       - Vector of indices that include all data store
%%                             memory blocks
%%     NumBlocks             - Number of Blocks
%%     Block {
%%       Name                - Mangled block name
%%       SLName              - Unmangled block name
%%       Type                - BlockType includes subsystems, input and output 
%%                             port blocks
%%       Virtual [0, 1, 2]   - (no, yes, pcv) pcv ... post compile virtual
%%
%% i     _blkref             - [system idx, instance idx, block idx]
%% i                           This field is for internal usage only. A library
%% i                           function will be provided that returns the real
%% i                           block record ([-1, -1, -1] for virtual or pcv)
%%       NumDataOutputPorts  - Number of data output ports
%%       NumDataInputPorts   - Number of data input ports                      
%%       NumControlInputPorts
%%                           - Number of control (enable, trigger, fcn-call)
%%                             input ports
%%
%%       DataOutputPort {
%%         Name              - Mangled port name
%%         SLName            - Unmangled port name
%%         SignalLabel       - Label of the signal line connected
%%                             to the output port
%%         Connected         - (no, yes, partial) or (0,1,2)
%%         TestPoint         - 1 if the user marked the output port as a
%%                             testpoint (0 otherwise)
%%         NumRegions        - Number of contiguous memory regions
%%         
%%         Region {
%%           MemoryMapIdx    - Index into the global memory map
%%                             Information about data type, dimension, ...
%%                             can be read from the global memory map
%%           _Source         - The actual source of this signal
%%           Offset          - non zero if connected to a merge block
%%           Length          - length of the contiguous memory region
%%           Dimensions      
%%           Connected       - (no, yes) or (0, 1) 
%%           FunctionArgumentIdx
%%                           - (For reused function input or output) index
%%                             of canonical input or output in the function
%%                             argument list. Only supported for ERT target
%%         }
%%
%%       DataInputPort {     - same contents as DataOutputPort
%%       }
%%
%%       ControlInputPort {  - same contents as DataOutputPort
%%       }
%%
%%       NumParameters
%%       Parameter {
%%         Name              - Mangled parameter name
%%         IsReference       - (no, yes) or (0, 1) is references by a 
%%                              workspace or mask variable
%%         MemoryMapIdx
%%       }
%%  
%%       NumContStates
%%       ContState {
%%         Name             - Named continues state
%%         Dimensions
%%         MemoryMapIdx
%%       }
%%       
%%       NumDiscStates
%%       DiscState {
%%         Name             - Named discrete state
%%         Dimensions
%%         MemoryMapIdx
%%       }
%%       
%%       NumDerivatives
%%       Derivative {
%%         Name             - empty
%%         Dimensions
%%         MemoryMapIdx
%%       }
%%       
%%       NumDataStores      - non zero if data store memory block
%%       DataStore {
%%         Name             - Name of the data store
%%         SLName           - 
%%         MemoryName       -  
%%         Dimenstion
%%         MemoryMapIdx
%%       }
%% 
%%     } %% end of Block
%%   } %% end of Subsystem
%%#if Generate Bus Hierarchy
%%|    NumSignalHierarchyDescriptors - Number of Signal Hierarchy Descriptors
%%|    SignalHierarchyDescriptor { - Equivalent of a Block record
%%| #if Block exists in BHM
%%|      GrSrc               - The BlockHierarchyMap index that corresponds to this SHD
%%| #else
%%|      FullBlockPath       - The full mangled block path for a block that does not exist in BHM
%%| #endif
%%|      OutputPortIdx       - Output port index of the block that this SHD belongs to
%%|      Type                - BlockType includes subsystems, input and output 
%%|                            port blocks
%%|      Virtual [0, 1, 2]   - (no, yes, pcv) pcv ... post compile virtual
%%|      Synthesized [0, 1]  - (no, yes) Is the block synthesized? Synthesized blocks will not 
%%|                            appear in BHM
%%|i     _blkref             - [system idx, instance idx, block idx]
%%|i                           This field is for internal usage only. A library
%%|i                           function will be provided that returns the real
%%|i                           block record ([-1, -1, -1] for virtual or pcv)
%%|       NumHierarchyNodes   - Currently, there is always one Hierarchy Node per SHD
%%|       HierarchyNode {     - Equivalent of a DataOutputPort record for a block
%%|                             This node corresponds to a node in the bus hierarchy. If
%%|                             the node is a subbus, a Region record is generated for each
%%|                             component signal (which points to the shdIdx that
%%|                             describes that component). Otherwise, a single Region is
%%|                             generated that has Source, Dimensions and Offset information.
%%|       SignalLabel        - Name of this signal
%%| #if NumRegions > 1  
%%| |     NumRegions         - Number of regions
%%| |      Region {
%%| | #if Region is a subbus
%%| | |       Type           - Set to "Bus"
%%| | |       SigHierIdx     - shdIdx. Index into the SignalHierarchyDescriptor
%%| | |                        record that describes this sub bus signal
%%| | #else
%%| | |       Type           - Set to "Region"
%%| | |       SigHierIdx     - shdIdx. Index into the SignalHierarchyDescriptor
%%| | |                        record that describes this leaf signal
%%| | #endif 
%%| |      }
%%| #else
%%| |      Region {
%%| |        MemoryMapIdx    - Index into the global memory map
%%| |                          Information about data type, dimension, ...
%%| |                          can be read from the global memory map
%%| |        _Source         - The actual source of this signal       
%%| |        Offset          - non zero => actual source = _Source + offset
%%| |        Length          - length of the contiguous memory region
%%| |        Dimensions      
%%| |        Connected       - (no, yes) or (0, 1) 
%%| |        FunctionInputIdx
%%| |                        - For reused subsystem input port
%%| |      }
%%| #endif
%%|      } % end of HierarchyNode
%%|    } % end of SignalHierarchyDescriptor
%%#endif
%% } %% end of BlockHierarchyMap
%%
%%
%if EXISTS("_GRAPHMAPLIB_") == 0
%assign _GRAPHMAPLIB_ = 1
%<LibAddToCompiledModel("BlockHierarchyMapGenerated", 0)>

%% Function: FcnMapBlockHierarchy =============================================
%% Abstract:
%%   Maps the block hierarchy map to the global mememory map.
%%
%function FcnMapBlockHierarchy() void
  %with ::CompiledModel
    %if BlockHierarchyMapGenerated == 0
      %with BlockHierarchyMap  
        %foreach sybsysIdx = NumSubsystems
          %with Subsystem[sybsysIdx]
            %foreach blkIdx = NumBlocks
              %with Block[blkIdx]
                %foreach portIdx = NumDataInputPorts
                  %<FcnMapPort(DataInputPort[portIdx])>
                %endforeach
                %foreach portIdx = NumControlInputPorts
                  %<FcnMapPort(ControlInputPort[portIdx])>
                %endforeach
                %foreach portIdx = NumDataOutputPorts
                  %<FcnMapPort(DataOutputPort[portIdx])>
                %endforeach
                %foreach paraIdx = NumParameters
                  %<FcnMapParameter(Parameter[paraIdx])>
                %endforeach
                %foreach dstateIdx = NumDiscStates
                  %<FcnMapDState(DiscState[dstateIdx])>
                %endforeach
                %foreach cstateIdx = NumContStates
                  %<FcnMapCState(ContState[cstateIdx])>
                %endforeach
                %foreach cderivIdx = NumDerivatives
                  %<FcnMapCStateDerivatives(Derivative[cderivIdx])>
                %endforeach
                %foreach dstoreIdx = NumDataStores
                  %<FcnMapDStore(DataStore[dstoreIdx])>
                %endforeach
              %endwith
            %endforeach
          %endwith
        %endforeach
        
        %assign useDatasetLoggingHier = TLC_FALSE
        %if IsModelReferenceSimTarget() && EXISTS(NumSignalHierLoggingInfo) && (NumSignalHierLoggingInfo > 0)          
          %assign useDatasetLoggingHier = TLC_TRUE
        %endif
          
        %% Process any SignalHierarchyDescriptor records
        %if IsModelReferenceSimTarget() && !useDatasetLoggingHier && EXISTS(NumSignalHierarchyDescriptors)
          %foreach shdIdx = NumSignalHierarchyDescriptors
            %with SignalHierarchyDescriptor[shdIdx]
              %foreach hnIdx = NumHierarchyNodes
                %<FcnMapPortSigHier(HierarchyNode[hnIdx])>
              %endforeach
            %endwith
          %endforeach
        %endif
      %endwith %% BlockHierarchyMap
      %assign ::CompiledModel.BlockHierarchyMapGenerated = 1
    %endif %% BlockHierarchyMapGenerated == 0
  %endwith %% CompiledModel
%endfunction

%% Function: SLibSystemBlockExist =============================================
%% Abstract:
%%   Returns true if there a one to one mapping from a block record in the
%%   block hierarchy map to a block record in the Systems record exist.
%%
%function SLibSystemBlockExist(grBlock) void
  %return (ISFIELD(grBlock, "_blkref") && grBlock._blkref[2] != -1) ? ...
    TLC_TRUE : TLC_FALSE
%endfunction

%% Function: SLibGraphicalBlockExist ==========================================
%% Abstract:
%%   Returns true if there a one to one mapping from a block record in the
%%   Systems record to a block record in block hierarchy map the exist.
%%
%function SLibGraphicalBlockExist(block) void
  %return (ISFIELD(block, "GrSrc") && block.GrSrc[1] != -1) ? ...
    TLC_TRUE : TLC_FALSE
%endfunction

%% Function: SLibGetGraphicalBlockIdx =========================================
%% Abstract:
%%   This function returns the graphical block index for System block record.
%%
%% Example:
%%
%%   %if SLibGraphicalBlockExist(block)
%%     %assign grBlockIndex = SLibGetGraphicalBlockIdx(block)
%%     %with CompiledModel.BlockHierarchyMap
%%       %assign grSubSys = Subsystem[grBlockIndex[0]]
%%       %assign grBlock  = grSubSys.Block[grBlockIndex[1]]
%%     %endwith
%%   %endif
%%
%function SLibGetGraphicalBlockIdx(block) void
  %return ISFIELD(block, "GrSrc") ? block.GrSrc : [-1, -1]
%endfunction

%% Function: SLibGetSystemBlockIdx ============================================
%% Abstract:
%%   This function returns the system block index for block hierarchy map block
%%   record.
%% 
%% Example:
%%
%%   %if SLibSystemBlockExist(grBlock)
%%     %assign blockIndex = SLibGetSystemBlockIdx(grBlock)
%%     %with CompiledModel
%%       %assign system = System[blockIndex[0]]
%%       %assign  block = system.Block[blockIndex[2]]
%%     %endwith
%%   %endif
%%
%function SLibGetSystemBlockIdx(grBlock) void
  %return ISFIELD(grBlock, "_blkref") ? grBlock._blkref : [-1, -1, -1]
%endfunction

%% Function: FcnMapPort =======================================================
%% Abstract:
%%   Maps a port object to the global memory map.
%%
%function FcnMapPort(port) void
  %createrecord portObj { SignalSrc [-1] SignalOffset [-1] Width 1 }
  %with port
    %if IsModelReferenceSimTarget() 
      %% Support bus hierarchy
      %foreach regIdx = NumRegions
        %with Region[regIdx]
          %if (Type == "Bus" || !ISEMPTY("SigHierIdx"))
            %continue
          %endif
          %assign portObj.SignalSrc = _Source
          %assign sigRec = SLibGetSourceRecord(portObj, 0)
          %if !ISEMPTY(sigRec) %% grounded or function call
            %assign Region[regIdx].MemoryMapIdx = sigRec.MemoryMapIdx
          %endif
        %endwith %% Region[regIdx]
      %endforeach %% regIdx = NumRegions
    %else  %% Bus hierarchy
      %foreach regIdx = NumRegions
        %assign portObj.SignalSrc = Region[regIdx]._Source
        %assign sigRec = SLibGetSourceRecord(portObj, 0)
        %if !ISEMPTY(sigRec) %% grounded or function call
          %assign Region[regIdx].MemoryMapIdx = sigRec.MemoryMapIdx
        %endif
      %endforeach
    %endif %% Bus hierarchy
  %endwith %% port
%endfunction

%% Function: FcnMapPortSigHier ================================================
%% Abstract:
%%   Maps a port object to the global memory map. Works with the HierarchyNodes
%%
%function FcnMapPortSigHier(sigHierNode) void
  %createrecord portObj { SignalSrc [-1] SignalOffset [-1] Width 1 }
  %with sigHierNode
      %% Support bus hierarchy
      %foreach regIdx = NumRegions
        %with Region[regIdx]
          %if (!ISEMPTY("SigHierIdx"))
            %continue
          %endif
          %assign portObj.SignalSrc = _Source
          %assign sigRec = SLibGetSourceRecord(portObj, 0)
          %if !ISEMPTY(sigRec) %% grounded or function call
            %assign Region[regIdx].MemoryMapIdx = sigRec.MemoryMapIdx
          %endif
        %endwith %% Region[regIdx]
      %endforeach %% regIdx = NumRegions
  %endwith
%endfunction

%% Function: FcnMapParameter ==================================================
%% Abstract:
%%   Maps a parameter object to the global memory map.
%%
%function FcnMapParameter(parameter) void
  %if parameter._idx > -1 %% post compile virtual blocks
    %assign parameter.MemoryMapIdx = ...
      ModelParameters.Parameter[parameter._idx].MemoryMapIdx
  %endif
%endfunction

%% Function: FcnMapDState =====================================================
%% Abstract:
%%   Maps a discrete state object to the global memory map.
%%
%function FcnMapDState(dstate) void
  %if dstate._idx > -1 %% post compile virtual blocks
    %assign dstate.MemoryMapIdx = ...
      ::CompiledModel.DWorks.DWork[dstate._idx].MemoryMapIdx
  %endif
%endfunction

%% Function: FcnMapCState =====================================================
%% Abstract:
%%   Maps a Continuous state object to the global memory map.
%%
%function FcnMapCState(cstate) void
  %assign cstate.MemoryMapIdx = ...
    ::CompiledModel.ContStates.ContState[cstate._idx].MemoryMapIdx 
%endfunction

%% Function: FcnMapCStateDerivatives =========================================
%% Abstract:
%%   Maps a Continuous state object to the global memory map.
%%
%function FcnMapCStateDerivatives(cderiv) void
  %assign cderiv.MemoryMapIdx = ...
    ::CompiledModel.ContStates.ContState[cderiv._idx].DerivativeMemoryMapIdx 
%endfunction

%% Function: FcnMapDStore =====================================================
%% Abstract:
%%   Maps a data store memory block to the global memory map.
%%
%function FcnMapDStore(dstore) void
  %if dstore._idx > -1 %% post compile virtual blocks
    %assign dstore.MemoryMapIdx = ...
      ::CompiledModel.DWorks.DWork[dstore._idx].MemoryMapIdx
  %endif
%endfunction


%endif %% _GRAPHMAPLIB_

%% [EOF] graphmaplib.tlc
