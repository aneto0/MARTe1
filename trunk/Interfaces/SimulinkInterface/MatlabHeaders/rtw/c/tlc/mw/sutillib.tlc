%% 
%% $Revision: 1.1.6.11 $
%% 
%%
%% Copyright 1994-2009 The MathWorks, Inc.
%%
%% Abstract:
%%      This TLC library file contains system utility functions.
%%

%if EXISTS("_SUTILLIB_") == 0
%assign _SUTILLIB_ = 1

%% Function: SLibSetNeedAbsoluteTime(tid) ===================
%%
%function SLibSetNeedAbsoluteTime(tid)
  %if SLibIsERTCodeFormat()
    %assert TYPE(tid) == "Number" && tid >= 0
    %assign ::CompiledModel.SampleTime[tid].NeedAbsoluteTime = "yes"
    %if ::CompiledModel.SampleTime[tid].TimeSource == "BaseRate"
      %<SLibSetNeedAbsoluteTime(0)>
    %elseif ::CompiledModel.SampleTime[tid].TimeSource == "Caller"
       %<SLibSetNeedAbsoluteTime(FcnGetAsyncPromotedTID(tid))>
    %endif
    %assign fcnType = ::BlockFcn
    %if LibAsynchronousTriggeredTID(tid) && fcnType != "UNKNOWN"
      %assign flagName = "asyncTaskAccessTimeIn%<fcnType>"
      %if !ISFIELD(::CompiledModel.SampleTime[tid],flagName)
        %addtorecord ::CompiledModel.SampleTime[tid] %<flagName> 1
      %endif
    %endif
  %endif
  %return ""
%endfunction

%% DocFunction{Sample Time Functions}: LibAsyncTaskAccessTimeInFcn ==================
%% Abstract:
%%   Returns 1 if the specified asynchronous task identifier (TID) access absolute time
%%   in given function type 
%%
%function LibAsyncTaskAccessTimeInFcn(tid, fcnType)
  %if fcnType == "Output" ||  fcnType == "Outputs"
    %assign fcnType = "OutputUpdate"
  %endif
  %assign flagName = "asyncTaskAccessTimeIn%<fcnType>"
  %return ISFIELD(::CompiledModel.SampleTime[tid],flagName) && ...
    ::CompiledModel.SampleTime[tid].%<flagName>
%endfunction

%% Function: SLibSetNeedFloatAbsoluteTime(tid) ===================
%%  
%%
%function SLibSetNeedFloatAbsoluteTime(tid)
  %if SLibIsERTCodeFormat()
    %assert TYPE(tid) == "Number" && tid >= 0
    %assign ::CompiledModel.SampleTime[tid].NeedAbsoluteTime = "yes"
    %assign ::CompiledModel.SampleTime[tid].NeedFloatTime = "yes"
  %endif
  %return ""
%endfunction

%% Function: SLibNeedAbsoluteTime ==============================================
%% Abstract:
%%   Return true if any of SampleTime need absolute time.
%%
%function SLibNeedAbsoluteTime() 
  %assign needAbsoluteT = TLC_FALSE
  %with ::CompiledModel
    %foreach tid = NumSampleTimes
      %if SampleTime[tid].NeedAbsoluteTime == "yes"
	%assign needAbsoluteT = TLC_TRUE
	%break
      %endif
    %endforeach
  %endwith
  %return(needAbsoluteT)
%endfunction

%% Function: SLibNeedAbsoluteTimeForTID ==============================================
%% Abstract:
%%   Return true if TID need absolute time, if tid passed in is "",
%%  Return true if any of SampleTime need absolute time.
%%
%function SLibNeedAbsoluteTimeForTID(tid) 
   %if TYPE(tid) == "Number" && tid >= 0
     %return(::CompiledModel.SampleTime[tid].NeedAbsoluteTime == "yes")
   %else
     %return(SLibNeedAbsoluteTime())
   %endif
%endfunction

%% Function: SLibClockTickIsUnit32Pair ==============================================
%% Abtract: 
%%   Return true if the data type id of ClockTickDataTypeId is
%% tSS_TIMER_UINT32_PAIR 
%function SLibClockTickIsUnit32Pair(tid)
  %assert TYPE(tid) == "Number" && tid >= 0
  
  %return (::CompiledModel.SampleTime[tid].ClockTickDataTypeId == ...
    tSS_TIMER_UINT32_PAIR)
%endfunction

%% Function: SLibGetReimAndIdx =================================================
%% Abstract:
%%   Split the input argument sigIdx into reim and idx.
%%
%function SLibGetReimAndIdx(sigIdx) void
  %%
  %assign idxType = TYPE(sigIdx)
  %%
  %if idxType == "String"
    %%
    %assign idNum = IDNUM(sigIdx)
    %%
  %elseif idxType == "Number"
    %%
    %assign idNum = ["", %<sigIdx>]
    %%
  %else
    %assign errTxt = "The last input argument '%<sigIdx>' is of type " ...
      "'%<idxType>', expecting an argument of type \"Number\" or " ...
      "\"String\". "
    %<LibReportError(errTxt)>
    %%
    %assign idNum = "error"
  %endif
  %%
  %return idNum
  %%
%endfunction %% SLibGetReimAndIdx


%endif %% _SUTILLIB_

%% [EOF] sutillib.tlc
