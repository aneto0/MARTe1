%% ============================================================================
%% File : commonhdr_extiolib.tlc
%%
%% Abstract:
%%   This system TLC library file contains functions that are common
%%   between the different code generators for producing the the model's
%%   external IO definition.
%%
%%  
%% Copyright 1994-2011 The MathWorks, Inc.
%%
%% ============================================================================

%if EXISTS("_COMMONHDR_EXTIOLIB_") == 0
%assign _COMMONHDR_EXTIOLIB_ = 1

%% ============================================================================
%% Create global cache variables to hold each structure definition
%% ============================================================================

%<LibAddToCompiledModel("ExportedGlobalSignalsDefn", 0)>
%<LibAddToCompiledModel("ImportedExternSignalsDefn", 0)>
%<LibAddToCompiledModel("ImportedExternPointerSignalsDefn", 0)>
%<LibAddToCompiledModel("ExportedGlobalDWorkDefn", 0)>
%<LibAddToCompiledModel("ImportedExternDWorkDefn", 0)>
%<LibAddToCompiledModel("ImportedExternPointerDWorkDefn", 0)>
%<LibAddToCompiledModel("ExternalInputsStructDefn", 0)>
%<LibAddToCompiledModel("ExternalOutputsStructDefn", 0)> 
%<LibAddToCompiledModel("ExternalInputSizesStructDefn", 0)>
%<LibAddToCompiledModel("ExternalOutputSizesStructDefn", 0)> 

%% Function: FcnGenerateBlockIOExternalSignalDefinition =======================
%% Abstract:
%%   Generate the definition of an external signal from block io
%%
%function FcnGenerateBlockIOExternalSignalDefinition(bo) void
  %openfile tmpFcnBuf
  %with bo
    %assert !ISEMPTY(SigSrc)
    %assign blkName = SLibReferencedBy(bo)
    %assign descStr = SLibGetDescriptionForData(bo)
    %assign descStr = ISEMPTY(descStr) ? "" : "\n* " + descStr + "\n"

    %assign comment  = "/* " + blkName + descStr + " */"
    %assign dataType = SLibGetRecordContainerTypeName(bo)
    %assign star = (bo.StorageClass == "ImportedExternPointer") ? "*" : ""
    %assign optWidth = (bo.StorageClass == "ImportedExternPointer") ? ...
      "" : LibOptionalVectorWidth(LibGetRecordWidth(bo))
    %assign ppStuff = SLibDataPreprocessorStuff(bo)
    %assign ppIf = ppStuff[0]
    %assign ppFi = ppStuff[1]
    %assign id = LibGetRecordIdentifier(bo)
    %<ppIf>
    %openfile decls
    extern %<bo.StorageTypeQualifier> %<dataType> ...
      %<star>%<id>%<optWidth>; %<comment>
    %closefile decls
    %<decls>
    %<ppFi>
  %endwith
  %closefile tmpFcnBuf
  %return tmpFcnBuf
%endfunction


%% Function: FcnGenerateRootInportExternalSignalDefinition ====================
%% Abstract:
%%   Generate the definition of an external signal from the root inports
%%
%function FcnGenerateRootInportExternalSignalDefinition(ei, portNum) void
  %openfile tmpFcnBuf
  %with ei
    %assign descStr = SLibGetDescriptionForData(ei)
    %assign descStr = ISEMPTY(descStr) ? "" : "\n* " + descStr + "\n"
    %assign comment = "/* '%<ei.BlockName>'%<descStr> */"
    %assign dataType = SLibGetRecordContainerTypeName(ei)
    %assign id = LibGetRecordIdentifier(ei)
    %assign star = (ei.StorageClass == "ImportedExternPointer") ? "*" : ""
    %assign optWidth = (ei.StorageClass == "ImportedExternPointer") ? ...
      "" : LibOptionalVectorWidth(LibGetRecordWidth(ei))
    %openfile decls
    extern %<ei.StorageTypeQualifier> %<dataType> ...
      %<star>%<id>%<optWidth>; %<comment>
    %closefile decls
    %<decls>
  %endwith
  %closefile tmpFcnBuf
  %return tmpFcnBuf
%endfunction


%% Function: FcnGenerateBlockDWorkExternalDefinition =======================
%% Abstract:
%%   Generate the definition of an external dwork for a block
%%
%function FcnGenerateBlockDWorkExternalDefinition(dwRec) void
  %openfile tmpFcnBuf
  %with dwRec
  %if dwRec.StorageClass == "Custom"
    %% do nothing
  %else
    %assign descStr = SLibGetDescriptionForData(dwRec)
    %assign descStr = ISEMPTY(descStr) ? "" : "\n* " + descStr + "\n"
    
    %assign comment = "/* " + SLibReferencedBy(dwRec) + descStr + " */"
    %assign dataType = SLibGetRecordContainerTypeName(dwRec)
    %assign star = (dwRec.StorageClass == "ImportedExternPointer") ? ...
      "*" : ""
    %assign optWidth = (dwRec.StorageClass == "ImportedExternPointer") ? ...
      "" : LibOptionalVectorWidth(SLibDWorkWidth(dwRec))
    %assign typeQualifier = dwRec.StorageTypeQualifier
    %assign id = LibGetRecordIdentifier(dwRec)
    %assign ppIf = ""
    %assign ppFi = ""
    %if SLibGraphicalBlockExist(dwRec)
      %assign sysIdx = BlockHierarchyMap.Subsystem[GrSrc[0]].NVOwnerSysIdx
      %assign ppIf = SLibIfNetPreprocessorCondition(::CompiledModel.System[sysIdx])
      %assign ppFi = SLibEndIfNetPreprocessorCondition(::CompiledModel.System[sysIdx])
    %endif
    %<ppIf>
    %openfile decls
    extern %<typeQualifier> %<dataType> %<star>%<id>%<optWidth>; %<comment>
    %closefile decls
    %<decls>
    %<ppFi>
  %endif
  %endwith
  %closefile tmpFcnBuf
  %return tmpFcnBuf
%endfunction


%% Function: LibCacheExportedGlobalSignalsDefinition ==========================
%% Abstract:
%%      Cache the exported global signals
%%
%function LibCacheExportedGlobalSignalsDefinition() void
  %if ::CompiledModel.NumExportedGlobalSignals > 0
    %openfile tmpFcnBuffer
    %if ::CompiledModel.Name == "mextsignals"
      %% Required for internal testing of textsignals model in simulink
      %% engine directory.
      #define myqual
    %endif
    %% external root inport signals
    %if ExternalInputs.NumExportedGlobalSignals > 0
      %foreach idx = ExternalInputs.NumExternalInputs
	%assign extInp = ExternalInputs.ExternalInput[idx]
	%if extInp.StorageClass == "ExportedGlobal" && ...
          extInp.IsEliminated == "false"
	  %<FcnGenerateRootInportExternalSignalDefinition(extInp, idx+1)>\
	%endif
      %endforeach
    %endif
    %% external block io signals
    %if BlockOutputs.NumExportedGlobalSignals > 0
      %foreach boIdx = BlockOutputs.NumExternalBlockOutputs
	%assign bo = BlockOutputs.ExternalBlockOutput[boIdx]
	%if bo.StorageClass == "ExportedGlobal"
          %<FcnGenerateBlockIOExternalSignalDefinition(bo)>\
	%endif
      %endforeach
    %endif
    %closefile tmpFcnBuffer
    %assign ::CompiledModel.ExportedGlobalSignalsDefn = tmpFcnBuffer
  %else
    %assign ::CompiledModel.ExportedGlobalSignalsDefn = ""
  %endif
%endfunction %% LibCacheExportedGlobalSignalsDefinition

	  
	  
%% Function: LibCacheImportedExternSignalsDefinition ==========================
%% Abstract:
%%      Cache the imported extern signals
%%
%function LibCacheImportedExternSignalsDefinition() void
  %if ::CompiledModel.NumImportedExternSignals > 0
    %openfile tmpFcnBuffer
    %% external block io signals
    %if BlockOutputs.NumImportedExternSignals > 0
      %foreach boIdx = BlockOutputs.NumExternalBlockOutputs
	%assign bo = BlockOutputs.ExternalBlockOutput[boIdx]
	%if bo.StorageClass == "ImportedExtern"
	  %<FcnGenerateBlockIOExternalSignalDefinition(bo)>\
	%endif
      %endforeach
    %endif
    %% external root inport signals
    %if ExternalInputs.NumImportedExternSignals > 0
      %foreach idx = ExternalInputs.NumExternalInputs
	%assign extInp = ExternalInputs.ExternalInput[idx]
	%if extInp.StorageClass == "ImportedExtern"
	  %<FcnGenerateRootInportExternalSignalDefinition(extInp, idx+1)>\
	%endif
      %endforeach
    %endif
    %closefile tmpFcnBuffer
    %assign ::CompiledModel.ImportedExternSignalsDefn = tmpFcnBuffer
  %else
    %assign ::CompiledModel.ImportedExternSignalsDefn = ""
  %endif
%endfunction


%% Function: LibCacheImportedExternPointerSignalsDefinition ===================
%% Abstract:
%%      Cache the imported extern pointer signals
%%
%function LibCacheImportedExternPointerSignalsDefinition() void
  %if ::CompiledModel.NumImportedExternPointerSignals > 0
    %openfile tmpFcnBuffer
    %% external block io signals
    %if BlockOutputs.NumImportedExternPointerSignals > 0
      %foreach boIdx = BlockOutputs.NumExternalBlockOutputs
	%assign bo = BlockOutputs.ExternalBlockOutput[boIdx]
	%if bo.StorageClass == "ImportedExternPointer"
	  %<FcnGenerateBlockIOExternalSignalDefinition(bo)>\
	%endif
      %endforeach
    %endif
    %% external root inport signals
    %if ExternalInputs.NumImportedExternPointerSignals > 0
      %foreach idx = ExternalInputs.NumExternalInputs
	%assign extInp = ExternalInputs.ExternalInput[idx]
	%if extInp.StorageClass == "ImportedExternPointer"
	  %<FcnGenerateRootInportExternalSignalDefinition(extInp, idx+1)>\
	%endif
      %endforeach
    %endif
    %closefile tmpFcnBuffer
    %assign ::CompiledModel.ImportedExternPointerSignalsDefn = tmpFcnBuffer
  %else
    %assign ::CompiledModel.ImportedExternPointerSignalsDefn = ""
  %endif
%endfunction


%% Function: LibCacheExternalInputsStructDefinitionByVarGroup ===========================
%% Abstract:
%%   Cache the external inputs struct definitions in to a buffer that will be
%%   sent to the output stream latter. This version gets all information from
%%   vargroups.
%function LibCacheExternalInputsStructDefinitionByVarGroup() void
  %% Look up root system record to see if there is any external input
  %% NOTE: we're on an assumption that root System exists, and it has only one vargroup for ExternalInput
  %assign rootSystem = ::CompiledModel.System[::CompiledModel.NumSystems-1]
  %assign externalInputVarGroupIdx = FcnSysVarGroupIndex(rootSystem,"ExternalInput",0)
  %% If there is no external input, just return
  %if externalInputVarGroupIdx < 0
    %assign ::CompiledModel.ExternalInputsStructDefn = ""
    %return
  %endif
  %openfile tmpFcnBuffer
  %assign externalInputVarGroup = VarGroups.VarGroup[externalInputVarGroupIdx]
  %foreach idx = externalInputVarGroup.NumVarGroupElements
    %% TODO: Here we are on an assumption that all info are in CGType "ExternalInputs_Model"
    %assign externalInputmember = CGTypes.CGType[externalInputVarGroup.CGTypeIdx].Members.Member[idx]
    %% NOTE: Here we assume that all inports are at root level.
    %assign id = externalInputmember.Name
    %assign idNum = IDNUM(externalInputVarGroup.VarGroupElements[idx])
    %assign recType = idNum[0]
    %assign recIdx = idNum[1]
    %% if it is a padding field, just generate it without asking for its type
      %if recType == "PD"
         %assign width = LibOptionalVectorWidth(recIdx)
         char %<id>%<width>;
         %continue
    %endif
    %assign dataType = SLibGetRecordContainerTypeName(externalInputmember)
    
    %assert (recType == "U")
    %assign firstSubSys = ::CompiledModel.BlockHierarchyMap.Subsystem[0]
    %assert (firstSubSys.Type == "root")

    %% If the current block digram does not include this inport block.
    %if recIdx >= firstSubSys.NumInportBlocks
      %assign blkName = "<Root>/B_%<firstSubSys.SubsystemBlockIndex[0]>_%<firstSubSys.SubsystemBlockIndex[1]>"
    %else
      %assign GrSrc = [0, %<recIdx>]
      %assign blkName = SLibGrBlockName(GrSrc)
    %endif
    %assign optWidth = LibOptionalVectorWidth(LibGetRecordWidth(externalInputmember))
    %assign align = ""
    %assign cgType = ::CompiledModel.CGTypes.CGType[externalInputmember.CGTypeIdx]
    %assign isComplex = LibCGTypeIsComplex(externalInputmember.CGTypeIdx)
    %if cgType.Constructor != "struct" && !isComplex && ...
        externalInputmember.Alignment > 0 && fieldAlign
       %assign align = SLibGetAlignmentSyntax(::CompiledModel.Name, id, dataType, ...
                                              externalInputmember.Alignment, "DATA_ALIGNMENT_STRUCT_FIELD")
    %endif
    %if CodeFormat == "S-Function" && !Accelerator
       %<dataType> *%<id>%<optWidth>;  \
    %else
       %<align> %<dataType> %<id>%<optWidth>;  \
   %endif
    /* '%<blkName>' */

 %endforeach
 %closefile tmpFcnBuffer
 %assign ::CompiledModel.ExternalInputsStructDefn = tmpFcnBuffer
%endfunction



%% cache the directive that aligns the whole structure.
%function LibDumpExternalIOStructAlignment(aStructType, structAlign)
  %assign align = ""
  %if structAlign > 0
    %assign align = SLibGetAlignmentSyntax(::CompiledModel.Name, aStructType, "", ...
                                           structAlign, "DATA_ALIGNMENT_WHOLE_STRUCT")
  %endif
  %return align
%endfunction

%% this is not needed for model reference target.
%% not needed for generated S-Fcn target and accelerator, (rapid accelerator target?).
%% it is needed for other targets, including normal GRT, ERT build.
%function LibCacheExternalInputSizesStructDefinition() void
  %if NumModelInputs > 0
    %openfile tmpFcnBuffer
    %foreach idx = ExternalInputs.NumExternalInputs
      %assign extInp = ExternalInputs.ExternalInput[idx]
      %if extInp.StorageClass != "Auto"
        %continue
      %endif
      %if ISFIELD(extInp, "SizeVarGroupIdx")
        %assert ISFIELD(extInp, "HasVarDims")
        %assign sizeTypeIdx = SLibCGVarGroupMemberCGTypeIdx(...
          extInp.SizeVarGroupIdx[0], extInp.SizeVarGroupIdx[1])
        %assign dataType = LibCGTypeName(sizeTypeIdx)
        %assign optWidth = LibOptionalVectorWidth(LibCGTypeWidth(sizeTypeIdx))
        %assign id = LibGetRecordIdentifier(extInp)
        %<dataType>  %<id>%<optWidth>; \
        /* '%<extInp.BlockName>' */
      %endif
    %endforeach
    %closefile tmpFcnBuffer
    %assign ::CompiledModel.ExternalInputSizesStructDefn = tmpFcnBuffer
  %else
    %assign ::CompiledModel.ExternalInputSizesStructDefn = ""
  %endif
%endfunction

%% Function: LibCacheExternalOutputsStructDefinitionByVarGroup ==========================
%% Abstract:
%%   Cache the external outputs struct definitions in to a buffer that will be 
%%   sent to the output stream latter.
%%
%function LibCacheExternalOutputsStructDefinitionByVarGroup() void
  %% Look up root system record to see if there is any external output
  %% NOTE: we're on an assumption that root System exists, and it has only one vargroup for ExternalInput
  %assign rootSystem = ::CompiledModel.System[::CompiledModel.NumSystems-1]
  %assign externalOutputVarGroupIdx = FcnSysVarGroupIndex(rootSystem,"ExternalOutput",0)

  %% If there is no external output, just return
  %if externalOutputVarGroupIdx < 0
    %assign ::CompiledModel.ExternalOutputsStructDefn = ""
    %return
  %endif

  %openfile tmpFcnBuffer
  %assign externalOutputVarGroup = VarGroups.VarGroup[externalOutputVarGroupIdx]
  %assign sysIdx = externalOutputVarGroup.SysIdx
  %foreach idx = externalOutputVarGroup.NumVarGroupElements
    %% TODO: Here we are on an assumption that all info are in CGType "ExternalInputs_Model"
    %assign idNum = IDNUM(externalOutputVarGroup.VarGroupElements[idx])
    %assign recType = idNum[0]
    %assign recIdx = idNum[1]
    %% if it is a padding field, just generate it without asking for its type
    %if recType == "PD"
      %assign width = LibOptionalVectorWidth(recIdx)
      char pad_%<id>%<width>;
    %continue
    %endif

    %assign externalOutputmember = CGTypes.CGType[externalOutputVarGroup.CGTypeIdx].Members.Member[idx]

    %assign cgType = ::CompiledModel.CGTypes.CGType[externalOutputmember.CGTypeIdx]
    %assign id = externalOutputmember.Name
    %assign align=""
    %assign dataType = SLibGetRecordContainerTypeName(externalOutputmember)
    
    %if cgType.Constructor != "struct" && !LibCGTypeIsComplex(externalOutputmember.CGTypeIdx) && ...
        externalOutputmember.Alignment > 0 && fieldAlign
      %assign align = SLibGetAlignmentSyntax(::CompiledModel.Name, id, dataType, ...
                                               externalOutputmember.Alignment, "DATA_ALIGNMENT_STRUCT_FIELD")
    %endif
    %assign optWidth = LibOptionalVectorWidth(LibGetRecordWidth(externalOutputmember))
    %if CodeFormat == "S-Function"
      %<dataType> *%<id>%<optWidth>; \
    %else
      %<align> %<dataType> %<id>%<optWidth>; \
    %endif
    %assign outportBlock = ::CompiledModel.System[sysIdx].Block[recIdx]
    /* '%<outportBlock.Name>' */
  %endforeach
  %closefile tmpFcnBuffer
  %assign ::CompiledModel.ExternalOutputsStructDefn = tmpFcnBuffer
%endfunction
  

%function LibCacheExternalOutputSizesStructDefinition() void
  %if NumModelOutputs > 0
    %openfile tmpFcnBuffer
    %foreach idx = ExternalOutputs.NumExternalOutputs
      %assign extOut       = ExternalOutputs.ExternalOutput[idx]
      %assign sysIdx       = extOut.Block[0]
      %assign blkIdx       = extOut.Block[1]
      %assign outportBlock = System[sysIdx].Block[blkIdx]
      %if SLibExternalOutputIsVirtual(outportBlock)
        %continue
      %endif
      %if ISFIELD(extOut, "HasVarDims")
        %assign sizeTypeIdx = SLibCGVarGroupMemberCGTypeIdx(...
          extOut.SizeVarGroupIdx[0], extOut.SizeVarGroupIdx[1])
        %assign dataType = LibCGTypeName(sizeTypeIdx)
        %assign optWidth = LibOptionalVectorWidth(LibCGTypeWidth(sizeTypeIdx))
        %assign id = LibGetRecordIdentifier(extOut)
        %<dataType>  %<id>%<optWidth>; \
        /* '%<outportBlock.Name>' */
      %endif
    %endforeach
    %closefile tmpFcnBuffer
    %assign ::CompiledModel.ExternalOutputSizesStructDefn = tmpFcnBuffer
  %else
    %assign ::CompiledModel.ExternalOutputSizesStructDefn = ""
  %endif
%endfunction

%% Function: SLibExportedGlobalSignalsIsEmpty =================================
%% Abstract:
%%   Is the cache empty?
%%
%function SLibExportedGlobalSignalsIsEmpty() void
  %<LibTrapCacheAssert(ExportedGlobalSignalsDefn)>
  %return WHITE_SPACE(ExportedGlobalSignalsDefn)
%endfunction


%% Function: SLibDumpExportedGlobalSignalsDefinition ==========================
%% Abstract:
%%   Is the cache empty?
%%
%function SLibDumpExportedGlobalSignalsDefinition() void
  %<LibTrapCacheAssert(ExportedGlobalSignalsDefn)>
  %assign retVal = ExportedGlobalSignalsDefn
  %<SLibResetTLCGlobal("ExportedGlobalSignalsDefn")>
  %return retVal
%endfunction


%% Function: SLibImportedExternSignalsIsEmpty =================================
%% Abstract:
%%   Is the cache empty?
%%
%function SLibImportedExternSignalsIsEmpty() void
  %<LibTrapCacheAssert(ImportedExternSignalsDefn)>
  %return WHITE_SPACE(ImportedExternSignalsDefn)
%endfunction


%% Function: SLibDumpImportedExternSignalsDefinition ==========================
%% Abstract:
%%   Is the cache empty?
%%
%function SLibDumpImportedExternSignalsDefinition() void
  %<LibTrapCacheAssert(ImportedExternSignalsDefn)>
  %assign retVal = ImportedExternSignalsDefn
  %<SLibResetTLCGlobal("ImportedExternSignalsDefn")>
  %return retVal
%endfunction


%% Function: SLibImportedExternPointerSignalsIsEmpty ==========================
%% Abstract:
%%   Is the cache empty?
%%
%function SLibImportedExternPointerSignalsIsEmpty() void
  %<LibTrapCacheAssert(ImportedExternPointerSignalsDefn)>
  %return WHITE_SPACE(ImportedExternPointerSignalsDefn)
%endfunction


%% Function: SLibDumpImportedExternPointerSignalsDefinition ===================
%% Abstract:
%%   Is the cache empty?
%%
%function SLibDumpImportedExternPointerSignalsDefinition() void
  %<LibTrapCacheAssert(ImportedExternPointerSignalsDefn)>
  %assign retVal = ImportedExternPointerSignalsDefn
  %<SLibResetTLCGlobal("ImportedExternPointerSignalsDefn")>
  %return retVal
%endfunction


%% Function: SLibExportedGlobalDWorkIsEmpty =================================
%% Abstract:
%%   Is the cache empty?
%%
%function SLibExportedGlobalDWorkIsEmpty() void
  %<LibTrapCacheAssert(ExportedGlobalDWorkDefn)>
  %return WHITE_SPACE(ExportedGlobalDWorkDefn)
%endfunction


%% Function: SLibDumpExportedGlobalDWorkDefinition ==========================
%% Abstract:
%%   Is the cache empty?
%%
%function SLibDumpExportedGlobalDWorkDefinition() void
  %<LibTrapCacheAssert(ExportedGlobalDWorkDefn)>
  %assign retVal = ExportedGlobalDWorkDefn
  %<SLibResetTLCGlobal("ExportedGlobalDWorkDefn")>
  %return retVal
%endfunction


%% Function: SLibImportedExternDWorkIsEmpty =================================
%% Abstract:
%%   Is the cache empty?
%%
%function SLibImportedExternDWorkIsEmpty() void
  %<LibTrapCacheAssert(ImportedExternDWorkDefn)>
  %return WHITE_SPACE(ImportedExternDWorkDefn)
%endfunction


%% Function: SLibDumpImportedExternDWorkDefinition ==========================
%% Abstract:
%%   Is the cache empty?
%%
%function SLibDumpImportedExternDWorkDefinition() void
  %<LibTrapCacheAssert(ImportedExternDWorkDefn)>
  %assign retVal = ImportedExternDWorkDefn
  %<SLibResetTLCGlobal("ImportedExternDWorkDefn")>
  %return retVal
%endfunction


%% Function: SLibImportedExternPointerDWorkIsEmpty ==========================
%% Abstract:
%%   Is the cache empty?
%%
%function SLibImportedExternPointerDWorkIsEmpty() void
  %<LibTrapCacheAssert(ImportedExternPointerDWorkDefn)>
  %return WHITE_SPACE(ImportedExternPointerDWorkDefn)
%endfunction


%% Function: SLibDumpImportedExternPointerDWorkDefinition ===================
%% Abstract:
%%   Is the cache empty?
%%
%function SLibDumpImportedExternPointerDWorkDefinition() void
  %<LibTrapCacheAssert(ImportedExternPointerDWorkDefn)>
  %assign retVal = ImportedExternPointerDWorkDefn
  %<SLibResetTLCGlobal("ImportedExternPointerDWorkDefn")>
  %return retVal
%endfunction


%% Function: LibExternalInputsStructIsEmpty ===================================
%% Abstract:
%%   Is the cache empty?
%%
%function LibExternalInputsStructIsEmpty() void
  %if SLibAutosarActive() && !SLibAutosarIsServerOperation()
    %return TLC_TRUE
  %else
    %<LibTrapCacheAssert(ExternalInputsStructDefn)>
    %return WHITE_SPACE(ExternalInputsStructDefn)
  %endif
%endfunction


%% Function: LibDumpExternalInputsStructDefinition ============================
%% Abstract:
%%   dump external inputs struct definition.
%%
%function LibDumpExternalInputsStructDefinition() void
  %<LibTrapCacheAssert(ExternalInputsStructDefn)>
  %assign retVal = ExternalInputsStructDefn
  %<SLibResetTLCGlobal("ExternalInputsStructDefn")>
  %return retVal
%endfunction


%% Function: LibExternalOutputsStructIsEmpty ==================================
%% Abstract:
%%   Is the cache empty?
%%
%function LibExternalOutputsStructIsEmpty() void
  %if SLibAutosarActive() && !SLibAutosarIsServerOperation()
    %return TLC_TRUE
  %else
    %<LibTrapCacheAssert(ExternalOutputsStructDefn)>
    %return WHITE_SPACE(ExternalOutputsStructDefn)
  %endif
%endfunction


%% Function: LibDumpExternalOutputsStructDefinition ===========================
%% Abstract:
%%   dump external outputs struct definition.
%function LibDumpExternalOutputsStructDefinition() void
  %<LibTrapCacheAssert(ExternalOutputsStructDefn)>
  %assign retVal = ExternalOutputsStructDefn
  %<SLibResetTLCGlobal("ExternalOutputsStructDefn")>
  %return retVal
%endfunction

%% Function: LibExternalInputSizesStructIsEmpty ==============================
%% Abstract:
%%   Is the cache empty?
%%
%function LibExternalInputSizesStructIsEmpty() void
  %if SLibAutosarActive() && !SLibAutosarIsServerOperation()
    %return TLC_TRUE
  %else
    %<LibTrapCacheAssert(ExternalInputSizesStructDefn)>
    %return WHITE_SPACE(ExternalInputSizesStructDefn)
  %endif
%endfunction

%function LibDumpExternalInputSizesStructDefinition() void
  %<LibTrapCacheAssert(ExternalInputSizesStructDefn)>
  %assign retVal = ExternalInputSizesStructDefn
  %<SLibResetTLCGlobal("ExternalInputSizesStructDefn")>
  %return retVal
%endfunction

%% Function: LibExternalOutputSizesStructIsEmpty ==============================
%% Abstract:
%%   Is the cache empty?
%%
%function LibExternalOutputSizesStructIsEmpty() void
  %if SLibAutosarActive() && !SLibAutosarIsServerOperation()
    %return TLC_TRUE
  %else
    %<LibTrapCacheAssert(ExternalOutputSizesStructDefn)>
    %return WHITE_SPACE(ExternalOutputSizesStructDefn)
  %endif
%endfunction

%function LibDumpExternalOutputSizesStructDefinition() void
  %<LibTrapCacheAssert(ExternalOutputSizesStructDefn)>
  %assign retVal = ExternalOutputSizesStructDefn
  %<SLibResetTLCGlobal("ExternalOutputSizesStructDefn")>
  %return retVal
%endfunction

%endif %% _COMMONHDR_EXTIOLIB_
