%% 
%% 
%%
%% Copyright 1994-2012 The MathWorks, Inc.
%%
%% Abstract:
%%   Library file to create a sample main for ERT code format
%%   calling grt wrapper for a given model.
%%
%selectfile NULL_FILE

%% Function: FcnGenSTOneStepFcnForGRTWrapper ==========================
%% Generate SingleTasking OneStep function for GRTWrapper
%%
%function FcnGenSTOneStepFcnForGRTWrapper()
  %openfile tmpBuf
   %openfile fcnAbstract
  Perform one step of the model. This function is modeled such that
it could be called from an interrupt service routine (ISR) with minor
modifications.

  This routine is modeled for use in a multitasking environment and
therefore needs to be fully re-entrant when it is called from an
interrupt service routine.

Note:
  Error checking is provided which will only be used if this routine
  is attached to an interrupt.
   %closefile fcnAbstract
   %assign fcnName = "rt_OneStep"
   %assign fcnReturns = "static void"
   %assign fcnParams = Name + "_rtModel *S"
   %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; Abstract fcnAbstract; ...
     Category "model"; GeneratedBy "ertmain_grtinterface.tlc"; Type "Step"}
   %<SLibDumpFunctionBanner(fcnRec)>
   %undef fcnRec
   %<fcnReturns> %<fcnName>(%<fcnParams>)
   {

    /***********************************************
     * Check and see if base step time is too fast *
     ***********************************************/

    if (GBLbuf.isrOverrun++) {
        GBLbuf.stopExecutionFlag = 1;
        return;
    }

    /***********************************************
     * Check and see if error status has been set  *
     ***********************************************/

    if (rtmGetErrorStatus(S) != %<SLibGetNullDefinitionFromTfl()>) {
        GBLbuf.stopExecutionFlag = 1;
        return;
    }

    /* enable interrupts here */

    %if LibIsDeploymentDiagram() 
      %<SLibDeploymentCallGRTEntryPoints(0, "Output")>
    %else
      MdlOutputs(0);
    %endif
    
    %if ExtMode == 1
      rtExtModeSingleTaskUpload(S);
    %endif
    
    %if MatFileLogging
      GBLbuf.errmsg = rt_UpdateTXYLogVars(rtmGetRTWLogInfo(S),
                                          rtmGetTPtr(S));
      if (GBLbuf.errmsg != %<SLibGetNullDefinitionFromTfl()>) {
	GBLbuf.stopExecutionFlag = 1;
	return;
      }
    %endif
    
    %if LibIsDeploymentDiagram() 
      %<SLibDeploymentCallGRTEntryPoints(0, "Update")>
    %else
      MdlUpdate(0);
    %endif
    
    GBLbuf.isrOverrun--;
    
    %if ExtMode == 1
      rtExtModeCheckEndTrigger();
    %endif

  } /* end rtOneStep */
  %closefile tmpBuf
  %return tmpBuf
%endfunction

%% Function: FcnGenMTOneStepFcnForGRTWrapper ===========================
%% Generate multitasking OntStep fcn call grt wrapper
%%
%function FcnGenMTOneStepFcnForGRTWrapper() 
  %openfile tmpBuf
  %assign firstTid = FixedStepOpts.TID01EQ? 1:0
   %openfile fcnAbstract
  Perform one step of the model. This function is modeled such that
it could be called from an interrupt service routine (ISR) with minor
modifications.

  This routine is modeled for use in a multitasking environment and
therefore needs to be fully re-entrant when it is called from an
interrupt service routine.

Note:
  Error checking is provided which will only be used if this routine
  is attached to an interrupt.

   %closefile fcnAbstract
   
   %assign fcnName = "rt_OneStep"
   %assign fcnReturns = "static void"
   %assign fcnParams = Name + "_rtModel *S"
   %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; Abstract fcnAbstract; ...
     Category "main"; GeneratedBy "ertmain_grtinterface.tlc"; Type "Step"}
   %<SLibDumpFunctionBanner(fcnRec)>
   %undef fcnRec
   %<fcnReturns> %<fcnName>(%<fcnParams>)
   {
     int_T  eventFlags[NUMST];
     int_T  i;
     real_T tnext;
     %if LibIsDeploymentDiagram() 
       %<SLibDeploymentDeclareTasksSampleTimeIndex()>
     %endif
     int_T  *sampleHit = rtmGetSampleHitPtr(S);

    /***********************************************
     * Check and see if base step time is too fast *
     ***********************************************/

    if (GBLbuf.isrOverrun++) {
        GBLbuf.stopExecutionFlag = 1;
        return;
    }

    /***********************************************
     * Check and see if error status has been set  *
     ***********************************************/

    if (rtmGetErrorStatus(S) != %<SLibGetNullDefinitionFromTfl()>) {
        GBLbuf.stopExecutionFlag = 1;
        return;
    }
    /* enable interrupts here */
    	
    tnext = rt_SimUpdateDiscreteEvents(rtmGetNumSampleTimes(S),
                                       rtmGetTimingData(S),
                                       rtmGetSampleHitPtr(S),
                                       rtmGetPerTaskSampleHitsPtr(S));
    rtsiSetSolverStopTime(rtmGetRTWSolverInfo(S),tnext);
    %if firstTid == 0 
    for (i=1; i < NUMST; i++) {
    %else
    for (i=2; i < NUMST; i++) {
    %endif
        eventFlags[i] = sampleHit[i];
    }
    
    /*******************************************
     * Step the model for the base sample time *
     *******************************************/
    %if LibIsDeploymentDiagram() 
      %<SLibDeploymentCallGRTEntryPoints(0, "Output")>
    %else
      MdlOutputs(%<firstTid>);
    %endif
    
    %if ExtMode == 1
	rtExtModeUploadCheckTrigger(%<NumSynchronousSampleTimes>);
	rtExtModeUpload(%<firstTid>, %<RTMGetTaskTimeForTID(0)>);
    %endif
	
    %if MatFileLogging
      GBLbuf.errmsg = rt_UpdateTXYLogVars(rtmGetRTWLogInfo(S),
                                          rtmGetTPtr(S));
      if (GBLbuf.errmsg != %<SLibGetNullDefinitionFromTfl()>) {
	GBLbuf.stopExecutionFlag = 1;
	return;
      }
    %endif
    
    %if LibIsDeploymentDiagram()      
      %<SLibDeploymentCallGRTEntryPoints(0, "Update")>
    %else
      MdlUpdate(%<firstTid>);
    %endif
    
    /************************************************************************
     * Model step complete for base sample time, now it is okay to          *
     * re-interrupt this ISR.                                               *
     ************************************************************************/

     GBLbuf.isrOverrun--;


    /*********************************************
     * Step the model for any other sample times *
     *********************************************/
     %if firstTid == 0 
     for (i=1; i < NUMST; i++) {
     %else
     for (i=2; i<NUMST; i++) {
     %endif
       if (eventFlags[i]) {
	 if (GBLbuf.overrunFlags[i]++) {  /* Are we sampling too fast for */
	   GBLbuf.stopExecutionFlag=1;  /*   sample time "i"?           */
	   return;
	 }
         
         %if LibIsDeploymentDiagram() 
           %assign indexVar = "i"
           %<SLibDeploymentGRTCustomizeRtOneStep(indexVar, "Output")>
         %else
           MdlOutputs(i);
         %endif
	 
         %if ExtMode == 1
	   rtExtModeUpload(i, rtmGetTaskTime(S,i));
	 %endif
         
         %if LibIsDeploymentDiagram() 
           %assign indexVar = "i"
           %<SLibDeploymentGRTCustomizeRtOneStep(indexVar, "Update")>
         %else
           MdlUpdate(i);
         %endif
         
	 /* Indicate task complete for sample time "i" */
	 GBLbuf.overrunFlags[i]--;
       }
     }
     %if ExtMode == 1
       rtExtModeCheckEndTrigger();
     %endif
     
   } /* end rtOneStep */
   
   %closefile tmpBuf
   %return tmpBuf
%endfunction   

%% Function: FcnGenMainFcnForGRTWrapper ==============================
%%
%%
%function FcnGenMainFcnForGRTWrapper()
  %openfile tmpBuf
  %assign fcnName = "displayUsage"
  %assign fcnReturns = "static void"
  %assign fcnParams = "void"
  %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; Abstract ""; ...
    Category "main"; GeneratedBy "ertmain_grtinterface.tlc"; Type "Utility"}
  %<SLibDumpFunctionBanner(fcnRec)>
  %undef fcnRec
  %<fcnReturns> %<fcnName>(%<fcnParams>)
  {
    (void) printf("usage: %s -tf <finaltime> -w -port <TCPport>\n",QUOTE(MODEL));
    (void) printf("arguments:\n");
    (void) printf("  -tf <finaltime> - overrides final time specified in "
                  "Simulink (inf for no limit).\n");
    (void) printf("  -w              - waits for Simulink to start model "
                  "in External Mode.\n");
    (void) printf("  -port <TCPport> - overrides 17725 default port in "
                  "External Mode, valid range 256 to 65535.\n");
  }
  %assign fcnName = "main"
  %assign fcnReturns = "int_T"
  %assign fcnParams = "int_T argc, const char_T *argv[]"
  %assign fcnAbstract = "Execute model on a generic target such as a workstation."
  %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; Abstract fcnAbstract; ...
    Category "main"; GeneratedBy "ertmain_grtinterface.tlc"; Type "Main"}
  %<SLibDumpFunctionBanner(fcnRec)>
  %undef fcnRec
  %<fcnReturns> %<fcnName>(%<fcnParams>)
  {
    %<Name>_rtModel  *S;
    real_T     finaltime = -2.0;

    int_T  oldStyle_argc;
    const char_T *oldStyle_argv[5];

    /*******************
     * Parse arguments *
     *******************/

    if ((argc > 1) && (argv[1][0] != '-')) {
        /* old style */
        if ( argc > 3 ) {
            displayUsage();
	    
            return(EXIT_FAILURE);
        }

        oldStyle_argc    = 1;
        oldStyle_argv[0] = argv[0];
    
        if (argc >= 2) {
            oldStyle_argc = 3;

            oldStyle_argv[1] = "-tf";
            oldStyle_argv[2] = argv[1];
        }

        if (argc == 3) {
            oldStyle_argc = 5;

            oldStyle_argv[3] = "-port";
            oldStyle_argv[4] = argv[2];

        }

        argc = oldStyle_argc;
        argv = oldStyle_argv;

    }

    {
        /* new style: */
        double    tmpDouble;
        char_T tmpStr2[200];
        int_T  count      = 1;
        int_T  parseError = FALSE;

        /*
         * Parse the standard input parameters.  Let all unrecognized parameters
         * pass through to external mode for parsing.  NULL out all args handled
         * so that the external mode parsing can ignore them.
         */
        while(count < argc) {
            const char_T *option = argv[count++];
            
            /* final time */
            if ((strcmp(option, "-tf") == 0) && (count != argc)) {
                const char_T *tfStr = argv[count++];
                
                sscanf(tfStr, "%200s", tmpStr2);
                if (strcmp(tmpStr2, "inf") == 0) {
                    tmpDouble = RUN_FOREVER;
                } else {
                    char_T tmpstr[2];

                    if ( (sscanf(tmpStr2,"%lf%1s", &tmpDouble, tmpstr) != 1) ||
                         (tmpDouble < 0.0) ) {
                        (void)printf("finaltime must be a positive, real value or inf\n");
                        parseError = TRUE;
                        break;
                    }
                }
                finaltime = (real_T) tmpDouble;

                argv[count-2] = %<SLibGetNullDefinitionFromTfl()>;
                argv[count-1] = %<SLibGetNullDefinitionFromTfl()>;
            }
        }

        if (parseError) {
            (void)printf("\nUsage: %s -option1 val1 -option2 val2 -option3 "
                         "...\n\n", QUOTE(%<Name>));
            (void)printf("\t-tf 20 - sets final time to 20 seconds\n");

            return(EXIT_FAILURE);
        }

	%if ExtMode == 1
	  rtExtModeParseArgs(argc, argv, %<SLibGetNullDefinitionFromTfl()>); 
	%endif

        /*
         * Check for unprocessed ("unhandled") args.
         */
        {
            int i;
            for (i=1; i<argc; i++) {
                if (argv[i] != %<SLibGetNullDefinitionFromTfl()>) {
                    printf("Unexpected command line argument: %s\n",argv[i]);
                    return(EXIT_FAILURE);
                }
            }
        }
    }

    /****************************
     * Initialize global memory *
     ****************************/
     (void) %<LibGenMemFcnCall("memset", "&GBLbuf", "0", "sizeof(GBLbuf)")>;

    /************************
     * Initialize the model *
     ************************/

     S = %<Name>();
     if (rtmGetErrorStatus(S) != %<SLibGetNullDefinitionFromTfl()>) {
       (void)fprintf(stderr,"Error during model registration: %s\n",
       rtmGetErrorStatus(S));
       return(EXIT_FAILURE);
     }
     if (finaltime >= 0.0 || finaltime == RUN_FOREVER) rtmSetTFinal(S,finaltime);

     MdlInitializeSizes();
     MdlInitializeSampleTimes();
    
     %if MatFileLogging
       GBLbuf.errmsg = rt_StartDataLogging(rtmGetRTWLogInfo(S),
                                           rtmGetTFinal(S),
					   rtmGetStepSize(S),
					   &rtmGetErrorStatus(S));
       if (GBLbuf.errmsg != %<SLibGetNullDefinitionFromTfl()>) {
	 (void)fprintf(stderr,"Error starting data logging: %s\n",GBLbuf.errmsg);
	 return(EXIT_FAILURE);
       }
     %endif
    
    %if ExtMode == 1
      /* External mode */
      %if !PurelyIntegerCode
	rtSetTFinalForExtMode(&%<RTMGet("TFinal")>);
      %else
	rtSetTFinalForExtMode(rteiGetPtrTFinalTicks(%<RTMGet("RTWExtModeInfo")>));
      %endif
      rtExtModeCheckInit(%<NumSynchronousSampleTimes>);
      {
	boolean_T rtmStopReq = FALSE;
	rtExtModeWaitForStartPkt(%<RTMGet("RTWExtModeInfo")>, ...
	  %<NumSynchronousSampleTimes>, ...
	  &rtmStopReq);
	if (rtmStopReq) {
	  %<RTMSetStopRequested("TRUE")>;
	}
      }
    %endif

    (void)printf("\n** starting the model **\n");

    MdlStart();
    if (rtmGetErrorStatus(S) != %<SLibGetNullDefinitionFromTfl()>) {
      GBLbuf.stopExecutionFlag = 1;
    }

    /*************************************************************************
     * Execute the model.  You may attach rtOneStep to an ISR, if so replace *
     * the call to rtOneStep (below) with a call to a background task        *
     * application.                                                          *
     *************************************************************************/

    if (rtmGetTFinal(S) == RUN_FOREVER) {
        printf ("\n**May run forever. Model stop time set to infinity.**\n");
    }
    
    while (!GBLbuf.stopExecutionFlag &&
           (rtmGetTFinal(S) == RUN_FOREVER ||
            rtmGetTFinal(S)-rtmGetT(S) > rtmGetT(S) * ...
              %<LibGetMathConstant("EPSILON",tSS_DOUBLE)>)) {

	%if ExtMode == 1
	   {
             /* external mode */
             boolean_T rtmStopReq = FALSE;
             rtExtModePauseIfNeeded(%<RTMGet("RTWExtModeInfo")>, ...
               %<NumSynchronousSampleTimes>, ...
               &rtmStopReq);
             rtExtModeOneStep(%<RTMGet("RTWExtModeInfo")>, ...
               %<NumSynchronousSampleTimes>, ...
               &rtmStopReq);
             if (rtmStopReq) {
               %<RTMSetStopRequested("TRUE")>;
             }
           }
	 %endif

	 if (rtmGetStopRequested(S)) break;
	   rt_OneStep(S);
    }
    
    if (!GBLbuf.stopExecutionFlag && !rtmGetStopRequested(S)) {
    %if ExtMode == 1
	   {
         /* external mode */
	     boolean_T rtmStopReq = FALSE;	   
         rtExtModeOneStep(%<RTMGet("RTWExtModeInfo")>, ...
            %<NumSynchronousSampleTimes>, ...
            &rtmStopReq);
         if (rtmStopReq) {
            %<RTMSetStopRequested("TRUE")>;
            }
       }
	%endif

      /* Execute model last time step */
      rt_OneStep(S);
    }

    /********************
     * Cleanup and exit *
     ********************/
    %if MatFileLogging
      rt_StopDataLogging(MATFILE,rtmGetRTWLogInfo(S));
    %endif

    %if ExtMode
      rtExtModeShutdown(%<NumSynchronousSampleTimes>);
    %endif

    if (GBLbuf.errmsg) {
        (void)fprintf(stderr,"%s\n",GBLbuf.errmsg);
        return(EXIT_FAILURE);
    }

    if (GBLbuf.isrOverrun) {
        (void)fprintf(stderr,
                      "%s: ISR overrun - base sampling rate is too fast\n",
                      QUOTE(%<Name>));
        return(EXIT_FAILURE);
    }

    if (rtmGetErrorStatus(S) != %<SLibGetNullDefinitionFromTfl()>) {
        (void)fprintf(stderr,"%s\n", rtmGetErrorStatus(S));
        return(EXIT_FAILURE);
    }
    %if !SLibSingleTasking() 
      %% multitasking
    else {
      int_T i;
      for (i=1; i<NUMST; i++) {
	if (GBLbuf.overrunFlags[i]) {
	  (void)fprintf(stderr,
	  "%s ISR overrun - sampling rate is too fast for "
	  "sample time index %d\n", QUOTE(%<Name>), i);
	  return(EXIT_FAILURE);
	}
      }
    }
    %endif
    MdlTerminate();
    return(EXIT_SUCCESS);

  } /* end main */
  %closefile tmpBuf
  %return tmpBuf
%endfunction


%% Function FcnGenerateCommonCodeForGRTWrapper ========================
%%
%function FcnGenerateCommonCodeForGRTWrapper() 
  %openfile tmpBuf
    #ifndef EXIT_FAILURE
    #define EXIT_FAILURE  1
    #endif
    #ifndef EXIT_SUCCESS
    #define EXIT_SUCCESS  0
    #endif
    
    #define RUN_FOREVER -1.0

    %<LibDeclareERTDefines(0)>
        
    /*====================*
    * External functions *
    *====================*/
    %if ::GenCPP
    extern "C" {
    %endif
    %<LibExternInFcnDecls()>%<Name>_rtModel *%<Name>(void);
    %<LibExternInFcnDecls()>void MdlInitializeSizes(void);
    %<LibExternInFcnDecls()>void MdlInitializeSampleTimes(void);
    %<LibExternInFcnDecls()>void MdlStart(void);
    %<LibExternInFcnDecls()>void MdlOutputs(int_T %<::CompiledModel.GlobalScope.tTID>);
    %<LibExternInFcnDecls()>void MdlUpdate(int_T %<::CompiledModel.GlobalScope.tTID>);
    %<LibExternInFcnDecls()>void MdlTerminate(void);
    %if ::GenCPP
    }
    %endif
				  
    /*==================================*
    * Global data local to this module *
    *==================================*/

    static struct {
      int_T    stopExecutionFlag;
      int_T    isrOverrun;
      int_T    overrunFlags[NUMST];
      const char_T *errmsg;
    } GBLbuf;
    

    %if ExtMode == 1
      #  define rtExtModeSingleTaskUpload(S)                     \
      {                                                          \
        int stIdx;                                              \
	rtExtModeUploadCheckTrigger(rtmGetNumSampleTimes(S));   \
	for (stIdx=0; stIdx<NUMST; stIdx++) {                   \
	  if (rtmIsSampleHit(S, stIdx, 0 /*unused*/)) {         \
	    rtExtModeUpload(stIdx,rtmGetTaskTime(S,stIdx));    \
	  }                                                     \
	}                                                       \
      }
    %endif

    /*=================*
    * Local functions *
    *=================*/

  %closefile tmpBuf
  %return tmpBuf
%endfunction 

%% Function FcnGenerateCommonCodeForGRTSimplified ========================
%%
%function FcnGenerateCommonCodeForGRTSimplified() 
  %openfile tmpBuf
    #ifndef EXIT_FAILURE
    #define EXIT_FAILURE  1
    #endif
    #ifndef EXIT_SUCCESS
    #define EXIT_SUCCESS  0
    #endif
    
    #define RUN_FOREVER -1.0
    
    %<LibDeclareERTDefines(0)>
        
    /*====================*
    * External functions *
    *====================*/
    %if ::GenCPP
    extern "C" {
    %endif
    %<LibExternInFcnDecls()>void %<Name>_initialize(void);
    %<LibExternInFcnDecls()>void %<Name>_terminate(void);
    %if SLibSingleTasking()
      %if ::CompiledModel.ConfigSet.CombineOutputUpdateFcns
        %<LibExternInFcnDecls()>void %<Name>_step(void); 
      %else
        %<LibExternInFcnDecls()>void %<Name>_output(void); 
        %<LibExternInFcnDecls()>void %<Name>_update(void); 
      %endif
    %else
      %if ::CompiledModel.ConfigSet.CombineOutputUpdateFcns
        %<LibExternInFcnDecls()>void %<Name>_step(int_T %<::CompiledModel.GlobalScope.tTID>);
      %else
        %<LibExternInFcnDecls()>void %<Name>_output(int_T %<::CompiledModel.GlobalScope.tTID>);
        %<LibExternInFcnDecls()>void %<Name>_update(int_T %<::CompiledModel.GlobalScope.tTID>);
      %endif
    %endif
    %if ::GenCPP
    }
    %endif
    
    # define MdlInitializeSizes()         /* No op */
    # define MdlInitializeSampleTimes()   /* No op */
    # define MdlStart()                   /* No op */
    %if ::CompiledModel.ConfigSet.CombineOutputUpdateFcns
      # define MdlOutputs %<Name>_step
      %if SLibSingleTasking()
        # define MdlUpdate()                 /* No op */
      %else
        # define MdlUpdate(S)                /* No op */
      %endif
    %else
      # define MdlOutputs %<Name>_output    
      # define MdlUpdate %<Name>_update
    %endif
    # define rt_CreateIntegrationData(S)  /* No op */ 
    # define rt_UpdateContinuousStates(S) /* No op */
        
    # define MdlTerminate  %<Name>_terminate
        
    /*==================================*
    * Global data local to this module *
    *==================================*/

    static struct {
      int_T    stopExecutionFlag;
      int_T    isrOverrun;
      int_T    overrunFlags[NUMST];
      const char_T *errmsg;
    } GBLbuf;

    /*=================*
    * Local functions *
    *=================*/

    %closefile tmpBuf
    %return tmpBuf
%endfunction

%% FcnGenerateMainFunctionForGRTWrapper =========================
%%
%%
%function FcnGenerateMainFunctionsForGRTWrapper(retDesc) void
  %assign singleTasking = SLibSingleTasking()
  %assign delim = "*   "

  %openfile codeBuf
  %if retDesc
    %if !singleTasking
      %% Multitasking
      %<delim>Embedded Coder example \n
      %<delim>multitasking main Calling Generic 'Real Time' 
      %<delim>code format interface.\n"
    %else
      %% Singletasking
      %<delim>Embedded Coder example 
      %<delim>multi-rate singletasking main calling 
      %<delim>main calling Generic 'Real Time' code 
      %<delim>format interface.\n"
    %endif
  %else
    %<FcnGenerateCommonCodeForGRTWrapper()>

    %if singleTasking || (LibIsDeploymentDiagram() && ...
      (RootSystemIsSingleRate || ...
      (ISEQUAL(NumSynchronousSampleTimes, 2) && ...
      ISEQUAL(SolverType, "FixedStep") && FixedStepOpts.TID01EQ)))
      %% RootSystemIsSingleRate is false when 2 rates and TID01EQ is true
      %<FcnGenSTOneStepFcnForGRTWrapper()>
    %else %% multitasking
      %<FcnGenMTOneStepFcnForGRTWrapper()>
    %endif
    %<FcnGenMainFcnForGRTWrapper()>
  %endif
  %closefile codeBuf
  %return codeBuf
%endfunction


%% SLibCreateMainCallGRTWrapper ===============================
%%
%%
%%
%function SLibCreateMainForGRTWrapper() void
  %if SLibIsERTTarget()
    %if  TargetOS == "VxWorksExample"
      %<SLibReportErrorWithId("RTW:tlc:GRTInterfaceVxWorks")>
    %endif
  %endif

  %openfile tmpFcnBuf
  %<SLibDeclareModelFcnArgs(TLC_TRUE)>\
  %closefile tmpFcnBuf
  %<SLibCacheCodeToFile("mainSrc_data_defn", tmpFcnBuf)>  
  %if SLibGenerateNativeThreads() 
    %% Generate threaded grt main.
    %assign isPC = FEVAL("ispc")
    %if isPC  
      %include "grtwinthread.tlc"   
    %else
      %include "grtposixthread.tlc"   
    %endif 
    %<SLibGenerateThreadedMain()>
  %else
    %<SLibCacheCodeToFile("mainSrc_fcn_defn", ...
      FcnGenerateMainFunctionsForGRTWrapper(0))>
  %endif
  
  %openfile tmpFcnBuf

  #include <stdio.h>
  #include <string.h>
  #include <float.h>
  #include "%<FcnGetPublicModelHeaderFile()>" /* Model's header file */
  #include "rtwtypes.h" /* MathWorks types */
  %if ExtMode
    #include "ext_work.h" /* External mode header file */
  %endif
  %closefile tmpFcnBuf
  
  %<SLibCacheCodeToFile("mainSrc_incl", tmpFcnBuf)>
%endfunction
  
