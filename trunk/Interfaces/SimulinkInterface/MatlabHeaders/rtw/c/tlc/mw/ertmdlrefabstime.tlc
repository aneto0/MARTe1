%% ============================================================================
%% File : ertmdlrefabstime.tlc
%%
%% Abstract:
%%   Each task has its own timer. Only task need absolute time will 
%%   generate timer and update timer at its sample rate.
%%   Generate pure integer timer for discrete time task.
%%   (1) If any block need absolute time, the block marks NeedAbsoluteTime of 
%%       its tid to be true. This is dumped from SImulink to .rtw file.
%%   (2) If data logging is on, NeedAsoluteTime for tid0 is always true. 
%%   (3) If there exist block that access absolute time but don't claim 
%%       NeedAbsoluteTime, obsolete floating absolute timer is generated for 
%%       backward compatibility. 
%%   (4) See SLibSetupAbsoluteTime for more info.
%%  Issues:
%%   (1) If a block uses LibGetT, in a multi-rate, multi-tasking model, the block
%%       may use the time of other tasks.
%%   (2) Rename this function: SLibNeedObsAbsoluteTime. This function has state, 
%%       and it only should be called during code block's code generation.
%%       Timing code like ert should use SLibIsObsAbsoluteTimeRequired
%%   (3) Absolute time for tid0 and tid1, if tid01 is equal, are the same.
%%       Why do we need both?
%%       
%% $Revision: 1.1.6.18 $
%% ============================================================================
%selectfile NULL_FILE

%if EXISTS("_ERT_MODELREF_ABS_TIME_") == 0
%assign _ERT_MODELREF_ABS_TIME_ = 1

%function SLibGenAbsTimeComment(tid)
  %assign tsRec = SampleTime[tid]
  %openfile retBuf
  %if tsRec.NeedFloatTime == "yes"
    /* The "clockTick%<tid>" counts the number of times the code of this task has 
    * been executed. The absolute time is the multiplication of "clockTick%<tid>" 
    * and "Timing.stepSize%<tid>". Size of "clockTick%<tid>" ensures timer will not 
    * overflow during the application lifespan selected.
    %if SLibClockTickIsUnit32Pair(tid)
      * Timer of this task consists of two 32 bit unsigned integers. 
      * The two integers represent the low bits Timing.clockTick%<tid> and the high bits 
      * Timing.clockTickH%<tid>. When the low bit overflows to 0, the high bits increment. 
    %endif
    */
  %else
    /* The "clockTick%<tid>" counts the number of times the code of this task has 
    * been executed. The resolution of this integer timer is %<tsRec.ClockTickStepSize>, which is the step size 
    * of the task. Size of "clockTick%<tid>" ensures timer will not overflow during the 
    * application lifespan selected.
    %if SLibClockTickIsUnit32Pair(tid)
      * Timer of this task consists of two 32 bit unsigned integers. 
      * The two integers represent the low bits Timing.clockTick%<tid> and the high bits 
      * Timing.clockTickH%<tid>. When the low bit overflows to 0, the high bits increment. 
    %endif
    */
  %endif
  %closefile retBuf
  
  %return retBuf
%endfunction

%%  Function: RTMUpdateAbsoluteTimeForTID =================
%%
%%
%function RTMUpdateAbsoluteTimeForTID(tid) void
  %openfile tmpBuf
  %%
  %<SLibGenAbsTimeComment(tid)>
  %if SampleTime[tid].NeedFloatTime == "yes"
    %<RTMUpdateRealAbsoluteTimeForTID(tid)>
  %else
    %<RTMUpdateIntegerAbsoluteTimeForTID(tid)>
  %endif 
  %closefile tmpBuf
  
  %return tmpBuf
  
%endfunction 

%%Function FcnUpdateAbsoluteTimeNonRateGrouping =======================
%% Abstract:
%%       Generate absolute time for all tids if it is required.
%function FcnUpdateAbsoluteTimeNonRateGrouping(ssIdx) void
  %% RTMArgDef is accessed
  %assign absTimeDumped = TLC_FALSE
  
  %openfile tmpBuf
  %% enhanced absolute time
  %if SLibNeedAbsoluteTimeForTID(0)
    %% If tid 0 is continuous and is model reference Simstruc based,
    %% all continuous time related information is accessed from simstruct.
    %if !LibIsContinuous(0) || !IsModelReferenceForASimstructBasedTarget()
      %% We are not rate grouping, so we need to guard for TID 0.
      /* Update absolute time for base rate */
      %if !SLibSingleTasking()
	%assign guard = LibIsSampleHit(0)
	%if guard != "1"
	  if (%<guard>) {
	%endif
      %endif
      %<RTMUpdateAbsoluteTimeForTID(0)>
      %if !SLibSingleTasking() && guard != "1"
        }
      %endif
      %assign absTimeDumped = TLC_TRUE
    %endif
  %endif
  %foreach tidIdx = NumSynchronousSampleTimes -1
    %assign subRateIdx = tidIdx + 1
    %if SLibNeedAbsoluteTimeForTID(subRateIdx)
      
      %if !SLibSingleTasking()
	%assign tidGuard = LibIsSampleHit(subRateIdx)
      %else
        %assign tidGuard = (subRateIdx == 1 && FixedStepOpts.TID01EQ) ? ...
          "1" : LibIsSpecialSampleHit(subRateIdx, 0)
      %endif
      %if tidGuard == "1" 
	{
      %else
	if (%<tidGuard>) {
      %endif
      %assign period = ::CompiledModel.SampleTime[subRateIdx].PeriodAndOffset[0]
      %assign offset = ::CompiledModel.SampleTime[subRateIdx].PeriodAndOffset[1]
           /* Update absolute timer for sample time: [%<period>s, %<offset>s] */
	   %<RTMUpdateAbsoluteTimeForTID(subRateIdx)>
	 }
      %assign absTimeDumped = TLC_TRUE
    %endif
  %endforeach
  %closefile tmpBuf
  
  %if absTimeDumped
    %assign arg = ::CompiledModel.System[ssIdx].Interface.RTMArgDef
    %<SLibAccessArgHelper(arg,"","")>
  %endif

  %return tmpBuf
%endfunction %%FcnUpdateAbsoluteTimeNonRateGrouping


%%Function FcnUpdateAbsoluteTimeRateGrouping =======================
%% Abstract:
%%   Generate float point absolute time if the tid 
%%   NeedFloatTime. See SLibSetupAbsoluteTime to find out
%%   how the NeedFloatTime logic is calculated.
%function FcnUpdateAbsoluteTimeRateGrouping(ssIdx, subRateIdx) void
  %assign tmpBuf = ""

  %if SLibNeedAbsoluteTimeForTID(subRateIdx)
    %openfile tmpBuf
    %assert(SampleTime[subRateIdx].NeedAbsoluteTime == "yes")
    %% If tid 0 is continuous and is model reference Simstruc based,
    %% all continuous time related information is accessed from simstruct.
    %if !LibIsContinuous(subRateIdx) || ...
      !IsModelReferenceForASimstructBasedTarget()
      /* Update absolute time */
      %<RTMUpdateAbsoluteTimeForTID(subRateIdx)>
    %endif  
    %closefile tmpBuf
    %assign arg = ::CompiledModel.System[ssIdx].Interface.RTMArgDef
    %<SLibAddTIDtoAccessTIDList(arg, ::BlockFcn, "",subRateIdx)>
  %endif
  
  %return tmpBuf
%endfunction

%% Function: FcnUpdateAsyncTimeAtMinorMajorTimeStep ======================
%%
%function FcnUpdateAsyncTimeAtMinorMajorTimeStep()
  %assert(!IsModelReferenceTarget())
  %openfile tmpBuf
  
  %foreach idx = LibGetNumAsyncTasks()
    %assign tid = idx + NumSynchronousSampleTimes
    %if !RTMAbsTimeNeedTransProtection(tid)
      %continue
    %endif
    %assert !SLibConcurrentTasks()
    %if RTMContTDbBufIsReqFcn(%<tid>)
       /* Base rate updates double buffers of absolute time at 
       minor and major time step for asynchronous task %<tid>. 
       Double buffers are used to ensure data integrity when 
       asynchronous task reads absolute time.  
       */
      switch(%<SLibGetDbBufReadBuf(tid)>) {
	case 0: %<SLibGetDbBufWriteBuf(tid)> =1; break;
	case 1: %<SLibGetDbBufWriteBuf(tid)> =0; break;
	default: %<SLibGetDbBufWriteBuf(tid)> = ...
	  !%<SLibGetDbBufLastBufWr(tid)>; break;	  
      }
      %<SLibGetDbBufContTForTID(tid)>[%<SLibGetDbBufWriteBuf(tid)>] = ...
	%<LibGetT()>;
      %<SLibGetDbBufLastBufWr(tid)> = %<SLibGetDbBufWriteBuf(tid)>;
      %<SLibGetDbBufWriteBuf(tid)> = 0xFF;
    %elseif RTMContTH2LIsReqFcn(tid) 
      /* Base rate updates double-buffer of absolute time 
      at minor and major time step for asynchronous task %<tid>. 
      Double buffers are used to ensure data integrity 
      when asynchronous task reads absolute time. 
      -- rtmH2LBufBeingRead is the index of the buffer being read
         by the asynchronous task %<tid>
      -- rtmH2LLastBufWr is the index of the buffer that is 
      written last. 
      */
      if (%<SLibGetH2LBufBeingRead(tid)> != 0) {
	%<SLibGetH2LDbBufContTForTID(tid)>[0] = %<LibGetT()>;
	%<SLibGetH2LLastBufWr(tid)> = 0;
      } else {
	%<SLibGetH2LDbBufContTForTID(tid)>[1] = %<LibGetT()>;
	%<SLibGetH2LLastBufWr(tid)> = 1;
      }
    %endif
  %endforeach

  %if RTMContTL2HIsReqFcn() 
     {
       /* Base rate updates double buffers of absolute time at 
       minor and major time step for asynchronous task %<tid>. 
       Double buffers are used to ensure data integrity when 
       asynchronous task reads absolute time.  
       -- rtmL2HLastBufWr is the index of the buffer that is 
       written last.
       */
       boolean_T bufIdx = !%<SLibGetL2HLastBufWr()>;

       %<SLibGetL2HDbBufContT()>[bufIdx] = %<LibGetT()>;
       %<SLibGetL2HLastBufWr()> = bufIdx;
     }
   %endif
    
   %closefile tmpBuf
   %return tmpBuf
%endfunction %% FcnUpdateAsyncTimeAtMinorMajorTimeStep 

%% Function: FcnUpdateAsyncTaskTimers ===========================
%% Abstract:
%%   For asynchronous tasks that don't manage own absolute time,
%% task time is obtained from absolute time for base rate. 
%% To insure data integrity, code for obtaining async task time 
%% has two parts: one part runs at base rate, the other part runs
%% when asynchronous task runs. 
%%   This function generate code that runs at the base rate. 
%% FcnAsyncTaskUpdatesTimersFromBaseRate generates code that
%% runs with asynchronous tasks. 
%% 
%%    We only need obtaint absolute time from base rate for async task if 
%% the task need absolute time and async task does NOT manage own 
%% absolute timer. 
%%   There are three cases:
%%   1: Asynchronous task priority is unknown. Double buffers are used
%%      to insure data integrity. 
%%     At base rate task: 
%%      switch(ReadBuf() {
%%         case 0: WriteBuf =1; break;
%%	   case 1: WriteBuf =0; break;
%%	   default: WriteBuf = LastBufWr; break;	  
%%      }
%%      DbBuf_of_ClockTickForAsyncTID[WriteBuf] = current time 
%%      LastBufWr = WriteBuf;
%%      WriteBuf  = None;
%%     At async rate task
%%      switch(WriteBuf() {
%%         case 0: ReadBuf =1; break;
%%	   case 1: ReadBuf =0; break;
%%	   default: ReadBuf = !LastBufWr; break;	  
%%      }
%%      ClockTickForAsyncTID = DbBuf_of_ClockTickForAsyncTID[ReadBuf]
%%      ReadBuf  = None;
%%
%%   2: Asynchronous task priority is higher than base rate. Double buffers
%%      are used to ensure data integrity. 
%%      At base rate, clockTick0 is written into inactive buffer.
%%                    after writting process complete, update the flag
%%                    L2HLastBufWr -- idx of buffer last written. 
%%      At sync task, async task reads clockTick%<tid> from 
%%      the buffer that is last written
%%
%%   3: Asynchronous task priority is lower than base rate. Double buffers
%%      are used to ensure data integrity. Two flags:
%%      H2LLastBufWr -- idx of buffer last written
%%      H2LBufBeingRead -- number of asychronous tasks that are readding buffer0
%%      At base rate, if no task is reading buffer0, clockTick0 is written into
%%                    buffer0, otherwise write to buffer1. Then update the flag 
%%                    H2LLastBufWr 
%%      At async task, async task reads clockTick%<tid> from 
%%                     the buffer that is last written. If the last buffer written
%%                     is buffer0, increase H2LBufBeingRead by 1 before reading, 
%%                     decrease by 1 when reading complete.
%%                     
%function FcnUpdateAsyncTaskTimers() void
  %assert(!IsModelReferenceTarget())
  %openfile tmpBuf
  
  %foreach tid = NumSampleTimes
    %if !RTMAbsTimeNeedTransProtection(tid)
      %continue
    %endif
    %if SLibConcurrentTasks()
      %<SLibCGIRMutexOp(1,SLibGetTimerSemID(tid))>
      %<SLibGetClockTickBufForTID(tid)> = %<LibGetClockTick(0)>;
      %if SLibClockTickIsUnit32Pair(tid)
        %<SLibGetClockTickHBufForTID(tid)> = %<LibGetClockTickHigh(0)>;
      %endif
      %<SLibCGIRMutexOp(2,SLibGetTimerSemID(tid))>
      %continue
    %endif
    %if RTMClockTick0DbBufIsReqFcn(tid)
      switch(%<SLibGetDbBufReadBuf(tid)>) {
	case 0: %<SLibGetDbBufWriteBuf(tid)> =1; break;
	case 1: %<SLibGetDbBufWriteBuf(tid)> =0; break;
	default: %<SLibGetDbBufWriteBuf(tid)> = ...
	  !%<SLibGetDbBufLastBufWr(tid)>; break;	  
      }

      %<SLibGetDbBufClockTickForTID(tid)>[%<SLibGetDbBufWriteBuf(tid)>] = ...
	%<LibGetClockTick(0)>;
      %if SLibClockTickIsUnit32Pair(tid)
	%<SLibGetDbBufClockTickHForTID(tid)>[%<SLibGetDbBufWriteBuf(tid)>] = ...
	  %<LibGetClockTickHigh(0)>;
      %endif
      %<SLibGetDbBufLastBufWr(tid)> = %<SLibGetDbBufWriteBuf(tid)>;
      %<SLibGetDbBufWriteBuf(tid)> = 0xFF;
    %elseif RTMClockTick0H2LIsReqFcn(tid)
      /* Base rate updates double buffers of absolute time for 
      asynchronous task %<tid>. Double buffers are used to 
      ensure data integrity when asynchronous task reads 
      absolute time.  
      -- rtmH2LBufBeingRead is the index of the buffer being 
         read by the asynchronous task %<tid>
      -- rtmH2LLastBufWr is the index of the buffer that is 
         written last. 
      */
      if (%<SLibGetH2LBufBeingRead(tid)> != 0) {
	%<SLibGetH2LDbBufClockTickForTID(tid)>[0] = %<LibGetClockTick(0)>;
	%if LongClockTickForTIDIsReqFcn(0)
	  %<SLibGetH2LDbBufClockTickHForTID(tid)>[0] = %<LibGetClockTickHigh(0)>;
	%endif
	%<SLibGetH2LLastBufWr(tid)> = 0;
      } else {
	%<SLibGetH2LDbBufClockTickForTID(tid)>[1] = %<LibGetClockTick(0)>;
	%if LongClockTickForTIDIsReqFcn(0)
	  %<SLibGetH2LDbBufClockTickHForTID(tid)>[1] = %<LibGetClockTickHigh(0)>;
	%endif
	%<SLibGetH2LLastBufWr(tid)> = 1;
      }
    %endif
  %endforeach

  %if RTMClockTick0L2HIsReqFcn()
     {
       /* Base rate updates double buffers of absolute time for 
       asynchronous task. Double buffers are used to ensure 
       data integrity when asynchronous task reads absolute 
       time.  
       -- rtmL2HLastBufWr is the buffer index that is written last. 
       */
       boolean_T bufIdx = !%<SLibGetL2HLastBufWr()>;

       %<SLibGetL2HDbBufClockTick()>[bufIdx] = %<LibGetClockTick(0)>;
       %if LongClockTickForTIDIsReqFcn(0)
	 %<SLibGetL2HDbBufClockTickH()>[bufIdx] = %<LibGetClockTickHigh(0)>;
       %endif
       %<SLibGetL2HLastBufWr()> = bufIdx;
     }
   %endif
    
   %closefile tmpBuf
   %return tmpBuf
%endfunction %% end FcnUpdateAsyncTaskTimers
      

%% Function: SLibErtGenUpdateAbsoluteTimeCode ==========================================
%% Abstract:
%%    (1) For rate grouping code, if tid needs absolute time, 
%%        generate specific updatetimebuffer for the tid. 
%%        * This buffer will be dumped with the UPDATE outputUpdate function of 
%%          each tid. 
%%    (2) For non-rate grouping code, and if the model needs absolute time, 
%%        generate updatetimebuffer. This buffer updates timer for all tids 
%%        that need absolute time. Code is guarded by IsSampleHit. 
%%        * This buffer will be dumped with the  UPDATE or outputupdate function.
%%
%%    (3) If obsolete timer is required, generate it.
%%        * This buffer is dumped with OUTPUT or outputUpdate function for tid0
%%        (rate grouping) or with OUTPUT or output/update function 
%%        (non-rate grouping). This if for backward compatibility.
%%
%function SLibErtGenUpdateAbsoluteTimeCode(ssIdx, buffsRec, isRateGrouping) void
  %assign ::initBlockFcn = ::BlockFcn
  %assign ::BlockFcn = "Update"
  
  %if isRateGrouping
    %foreach subRateIdx = NumSynchronousSampleTimes
      %openfile tmpBuf
      %assign System[ssIdx].CurrentTID = subRateIdx
      %<FcnUpdateAbsoluteTimeRateGrouping(ssIdx, subRateIdx)>
      %if subRateIdx == 0 && !IsModelReferenceTarget()
	%<FcnUpdateAsyncTaskTimers()>
      %endif
      %closefile tmpBuf
      %addtorecord buffsRec UpdateAbsoluteTimeBuffer%<subRateIdx> tmpBuf
    %endforeach
    %assign System[ssIdx].CurrentTID = -1
    
    %if FixedStepOpts.TID01EQ
      %assign tmpBuf0 = buffsRec.UpdateAbsoluteTimeBuffer0
      %assign tmpBuf1 = buffsRec.UpdateAbsoluteTimeBuffer1
      
      %assign buffsRec.UpdateAbsoluteTimeBuffer0 = tmpBuf0 + tmpBuf1
      %assign buffsRec.UpdateAbsoluteTimeBuffer1 = ""
    %endif
  %else
    %openfile updateTimeBuffer
    %<FcnUpdateAbsoluteTimeNonRateGrouping(ssIdx)>
    %if !IsModelReferenceTarget()
      %<FcnUpdateAsyncTaskTimers()>
    %endif
    %closefile updateTimeBuffer
    %addtorecord buffsRec UpdateAbsoluteTimeBuffer updateTimeBuffer
  %endif
  
  %assign  ::BlockFcn = initBlockFcn
%endfunction %% SLibErtGenUpdateAbsoluteTimeCode


%endif %% _ERT_MODELREF_ABS_TIME_

%% [EOF] ertmdlrefabstime.tlc
