%% ============================================================================
%% $RCSfile: formatparam.tlc,v $
%% $Revision: 1.13.4.31 $ 
%% $Date: 2011/01/21 17:56:20 $
%%
%% Abstract:
%%   This system file puts parameters definitions and defines in model.c
%%   and model_data.c for code generation's RealTime code format.
%%
%% Copyright 1994-2010 The MathWorks, Inc.
%% 
%selectfile NULL_FILE

%if EXISTS("_FORMATPARAM_") == 0
%assign _FORMATPARAM_ = 1

%realformat "CONCISE"

%%*****************************************************************************
%% NOTE: This file is not used for model reference. If you are updating
%% this file, please update ModelrefGenSfcnAndHandleConstPrmAndBIO in
%% formatmodelref.tlc file.
%%
%assert (!IsModelReferenceTarget())


%% Function: SLibFormatParam ===================================================
%% Abstract:
%%   Function to create and cache parameter definitions and defines in model.c
%%   and model_data.c file sections.
%%
%function SLibFormatParam() void
  %% ============================================================================
  %% Generate the model_param.h file
  %% ============================================================================
  
  %assign rootSystem = System[NumSystems-1]
  %assign reqInsts   = LibGetSystemField(rootSystem, "ReqRootPrmHdrDataInsts")
  %if !SLibIsERTCodeFormat()
    %assign statPrefix = RootPrmHdrInstsStatic ? "static" : ""
  %else
    %assign statPrefix = ""
  %endif
  %%
  %% We need to unify the names "tParameters" & "tDefaultParameters"
  %% and tConstBlockIOStruct & tInvariantSignals. Currently, the new
  %% names are setup only for RealTime
  %% 
  %assign oldStrNames = SLibGetOldStrNames()
  
  %% This file is not used for model reference target

  %openfile dataBanBuf
  /*
  * %<Name>_data.%<LangFileExt>
  *
  %<SLibCommonHeaderInfo()>\
  */
  %closefile dataBanBuf
  %openfile inclBuf
  %<SLibIncludeModelHeader()>
  %<SLibIncludePrivateHeader()>
  %closefile inclBuf
  
  %if !SLibIsERTCodeFormat()
    %openfile tmpBuf
    %if !GenRTModel
      #include "simstruc.h"
      #include "fixedpoint.h"
    %endif
    %closefile tmpBuf
    %<SLibCacheCodeToFile("mdl_src_incl", tmpBuf)>
  %endif
  
  %openfile tmpBuf
  
  %%=============================================================================
  %% Create global variables for profiler objects
  %<SLibGenProfGlbData()>\
  
  %%
  %% ============================================================================
  %% Parameters
  %%
  %openfile dataBuf
  %% If there are any unstructured global parameters dump them here.
  %% This only can happen for a top model with model blocks.
  %% Don't check for reqInsts.ParamsInst, if there are any UnstructuredSimulinkGlobal
  %% parameters to declare, we must declare them since they won't go into the rtP.
  %if !SLibPrmBufferIsEmpty("UnstructuredSimulinkGlobal", "Instance")
    %assert (!IsModelReferenceTarget() && HasModelReferenceBlocks())

    /* Model block global parameters (auto storage) */
    %<SLibGetPrmBuffer("UnstructuredSimulinkGlobal", "Instance")>
  %endif
  %if (reqInsts.ParamsInst || UsingMalloc) && !SLibPrmBufferIsEmpty("SimulinkGlobal", "Instance") 
    %if !SLibIsERTCodeFormat()
      %assign paramPrefix = statPrefix
    %else
      %assign paramPrefix = ""
    %endif
    %assign prmsName = SLibGetPrmsName(oldStrNames)
    %if RootPrmHdrInstsStatic
      %openfile staticBuf
    %endif
    /* Block parameters (auto storage) */
    %if SLibAutosarCompilerAbstractionRequired()
      %openfile definition
      %<paramPrefix> %<SLibAutosarCompilerAbstractionForDataDecl(TLC_FALSE, tParametersType, TLC_FALSE, TLC_FALSE, prmsName, "DataGlobal")> = {
        %<SLibGetPrmBuffer("SimulinkGlobal", "Instance")>
      };\
    %else
      %openfile definition
      %<paramPrefix> %<tParametersType> %<prmsName> = {
        %<SLibGetPrmBuffer("SimulinkGlobal", "Instance")>
      };\
    %endif
    %closefile definition
    %<SLibAddPreStructDeclarePragma(prmsName)>\
    %<SLibApplyMemSecToDataDefn(definition, ...
      "MemSecDataParameters", "%<prmsName>")>\
    %<SLibAddPostStructDeclarePragma(prmsName)>\
    %if RootPrmHdrInstsStatic
      %closefile staticBuf
      %<SLibCacheCodeToFile("mdl_data_defn", staticBuf)>
      %undef staticBuf
    %endif
    %undef prmsName
  %endif
  %%
  %% Constant parameters
  %%
  %if !SLibPrmBufferIsEmpty("Const", "Instance")
  
    /* Constant parameters (auto storage) */
    %<SLibGetPrmBuffer("Const", "Instance")>
  %endif
  %%
  %% Constant parameters (with initialization)
  %%
  %if !SLibPrmBufferIsEmpty("ConstWithInit", "Instance")
  
    /* Constant parameters with dynamic initialization (auto storage) */
    %<SLibGetPrmBuffer("ConstWithInit", "Instance")>
  %endif
  %closefile dataBuf
  %%
  
  %%
  %% ============================================================================
  %% Block I/O
  %%
  %if reqInsts.BlockIOInst && !LibBlockIOInstanceIsEmpty()
    
    /* Block signals (auto storage) */
    %<LibDumpBlockIOInstance()>\
  %endif
  %%
  %% ============================================================================
  %% Const Block I/O
  %%
  %openfile cioBuf
  %if reqInsts.ConstBlockIOInst && !LibConstBlockIOInstanceIsEmpty()
    %assign cioName = oldStrNames ? tInvariantSignals : tConstBlockIOStruct
    %if RootPrmHdrInstsStatic
      %openfile staticBuf
    %endif
    /* Invariant block signals (auto storage) */
    %if SLibAutosarCompilerAbstractionRequired()
      %openfile definition
      %assign canBeConst = SLibCanConstBlockIOBeConst()
      %<statPrefix> %<SLibAutosarCompilerAbstractionForDataDecl(canBeConst, tConstBlockIOType, TLC_FALSE, TLC_FALSE, cioName, "DataGlobal")> = {
        %<LibDumpConstBlockIOInstance()>
      };\
      %closefile definition
    %else
      %assign qualifiers = SLibGetConstBlockIOQualifiers()
      %openfile definition
      %<statPrefix> %<qualifiers> %<tConstBlockIOType> %<cioName> = {
        %<LibDumpConstBlockIOInstance()>
      };\
      %closefile definition
    %endif
    %<SLibAddPreStructDeclarePragma(cioName)>\
    %<SLibApplyMemSecToDataDefn(definition, ...
      "MemSecDataConstants", "%<cioName>")>\
    %<SLibAddPostStructDeclarePragma(cioName)>\
    %if RootPrmHdrInstsStatic
      %closefile staticBuf
      %<SLibCacheCodeToFile("mdl_data_defn", staticBuf)>
      %undef staticBuf
    %endif
    %undef cioName
  %endif
  %closefile cioBuf

  %openfile standBuf
  %% Write out any const blockio and rtP from standalone systems
  %if HasStandaloneSubsystem
    %foreach idx = ::CompiledModel.NumSystems
      %assign sys = ::CompiledModel.System[idx]
      %if sys.StandaloneSubsystem == 1 && ...
        !ISEMPTY(LibGetSystemField(sys, "StandaloneDataInit"))
        %assign sysInfo = GetSystemNameForComments(sys)

        /* 
         * Invariant block signals and block parameters 
         * for %<sysInfo> 
         */
        %<LibGetSystemField(sys, "StandaloneDataInit")>
      %endif
    %endforeach
  %endif
  %closefile standBuf
  
  %%
  %% ============================================================================
  %% Zero representation for structure data types
  %%
  %openfile defGndBuf
  
  %<LibDumpGroundDeclarations(0)>
  %closefile defGndBuf
  %% Check if the _data.c file needs to be written.
  %if !WHITE_SPACE(cioBuf) || !WHITE_SPACE(dataBuf) || !WHITE_SPACE(defGndBuf) ...
    || !WHITE_SPACE(standBuf)
    %assign dataFile = SLibGetFileRecForCode("mdldata_src")
    %if !ISEMPTY(dataFile)
      %<LibSetSourceFileCodeTemplate(dataFile,ERTDataSrcFileTemplate)>
    %endif
    %<SLibCacheCodeToFile("mdldata_src_ban", dataBanBuf)>
    %undef dataBanBuf
    %<SLibCacheCodeToFile("mdldata_src_incl", inclBuf)>
    %undef inclBuf
    %<SLibCacheCodeToFile("data_constBIO_defn", cioBuf)>
    %undef cioBuf
    %<SLibCacheCodeToFile("mdldata_data_defn", dataBuf)>
    %undef dataBuf
    %<SLibCacheCodeToFile("data_constBIO_defn",...
      standBuf)>
    %undef standBuf
    %<SLibCacheCodeToFile("data_ground_defn", defGndBuf)>
    %undef defGndBuf
  %endif
  %%
  %%
  %% ============================================================================
  %% States
  %%
  %if reqInsts.ContStatesInst && !LibContStatesInstanceIsEmpty()
    
    /* Continuous states */
    %<LibDumpContStatesInstance()>\
  %endif
  %%
  %%
  %% ============================================================================
  %% Mass Matrices
  %%
  %if reqInsts.MassMatricesInst && !LibMassMatricesInstanceIsEmpty()
    
    /* Mass Matrices */
    %<LibDumpMassMatricesInstance()>\
  %endif      
  %%
  %%
  %% ============================================================================
  %% State Derivatives
  %%
  %% State derivatives are statically declared by integration routine.
  %%   ode1 --> static real_T f[1][NCSTATES];
  %%   ode2 --> static real_T f[2][NCSTATES]
  %%   :   :    :
  %%
  %%
  %% ============================================================================
  %% DWork
  %%
  %if reqInsts.DworkInst && !LibDWorkInstanceIsEmpty()
    
    %if ::CompiledModel.DWorkAndBlockIOCombined
      /* Block signals and states (auto storage) */
    %else
      /* Block states (auto storage) */
    %endif
    %<LibDumpDWorkInstance()>\
  %endif
  %%
  %% ============================================================================
  %% Zero-crossings
  %%
  %if reqInsts.PrevZCStatesInst && !LibPrevZCStatesInstanceIsEmpty()
    
    /* Previous zero-crossings (trigger) states */
    %<LibDumpPrevZCStatesInstance()>\
  %endif
  %%
  %% ============================================================================
  %% Model inputs
  %%
  %if reqInsts.ExtInpsInst && !LibExternalInputsInstanceIsEmpty()
    
    /* External inputs (root inport signals with auto storage) */
    %<LibDumpExternalInputsInstance()>\

    %if !LibExternalInputSizesInstanceIsEmpty()
      /* External input sizes (root inport signals with variable sizes) */
      %<LibDumpExternalInputSizesInstance()>\
    %endif
  %endif
  %%
  %% ============================================================================
  %% Model outputs
  %%
  %if reqInsts.ExtOutputsInst && !LibExternalOutputsInstanceIsEmpty()
    
    /* External outputs (root outports fed by signals with auto storage) */
    %<LibDumpExternalOutputsInstance()>\
    %if !LibExternalOutputSizesInstanceIsEmpty()
      /* External output sizes (root outports fed by signals with variable sizes) */
      %<LibDumpExternalOutputSizesInstance()>\
    %endif
  %endif
  %%
  %% ===========================================================================
  %% Declare the Simstruct
  %%
  %if reqInsts.SimStructInst
  
    %if !SLibIsERTCodeFormat()
      /* Parent Simstruct */
      %assign rtModelObjType = tSimStructType
      static %<rtModelObjType> model_S;
      %<rtModelObjType> *const %<RTMGetModelSS()> = &model_S;
    %else
      %if !::CompiledModel.EmptyRealTimeObject
	/* Real-time model */
        %if SLibAutosarCompilerAbstractionRequired()
          %assign definition = "%<SLibAutosarCompilerAbstractionForDataDecl(TLC_FALSE, tSimStructType, TLC_FALSE, TLC_FALSE, RTMGetModelSS(), "DataGlobal")>_;"
        %else
          %assign definition = ...
            "%<tSimStructType> %<RTMGetModelSS()>_;"
        %endif
        %<SLibApplyMemSecToDataDefn(definition, ...
          "MemSecDataInternal", ...
          "%<RTMGetModelSS()>_")>\
        %if SLibAutosarCompilerAbstractionRequired()
          %assign definition = ...
            "%<SLibAutosarCompilerAbstractionForDataDecl(TLC_FALSE, tSimStructType, TLC_TRUE, TLC_TRUE, RTMGetModelSS(), "DataGlobal")> = &%<RTMGetModelSS()>_;"
        %else
          %assign definition = ...
            "%<tSimStructType> *const %<RTMGetModelSS()> = &%<RTMGetModelSS()>_;"
          %endif
        %<SLibApplyMemSecToDataDefn(definition, ...
          "MemSecDataInternal", ...
          "%<RTMGetModelSS()>")>\
      %endif
    %endif
  %endif
  %closefile tmpBuf
  
  %<SLibCacheCodeToFile("mdl_data_defn", tmpBuf)>
%endfunction

%endif %% _FORMATPARAM_

%% [EOF] formatparam.tlc
