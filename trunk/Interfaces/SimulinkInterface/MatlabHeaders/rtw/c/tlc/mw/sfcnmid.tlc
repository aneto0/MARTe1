%% ============================================================================
%% $RCSfile: sfcnmid.tlc,v $
%% $Revision: 1.18.4.18 $ 
%% $Date: 2010/10/15 12:05:47 $
%%
%% Abstract:
%%   This system file creates model_mid.h for S-Function code format
%%
%% Pete Szpak
%% October 09, 1997
%% Copyright 1994-2010 The MathWorks, Inc.
%%
%selectfile NULL_FILE

%% ============================================================================
%% The S-Function file model_mid.h is created as follows:
%%
%% /* File banner */
%%
%% #include <...>
%%
%% static RegNumInputPorts() {...}
%% static RegNumInputPorts() {...}
%%   
%% void  *model_malloc(SimStruct *model_S)
%% {
%%   Necessary declarations
%%   Declare accessed SimStruct variables
%%     
%%   Decalare and setup local SimStruct
%%   Non-finite assignments
%%   Register embedded S-Functions
%%   Block instance data
%%   {
%%     User declarations ..... LibMdlRegCustomCode(buffer, "declaration")
%%     User entry code ....... LibMdlRegCustomCode(buffer, "execution")
%%     User exit code ........ LibMdlRegCustomCode(buffer, "trailer")
%%   }
%% }
%%
%% /* [EOF] model_mid.h */

%if EXISTS("_SFCNMID_") == 0
%assign _SFCNMID_ = 1

%realformat "CONCISE"

%openfile bannerBuf
/*
* %<LibGetModelName()>_mid.h
*
%<SLibCommonHeaderInfo()>\
*
  %<SLibGenSourcesComment()>
*/
%closefile bannerBuf
%<SLibCacheCodeToFile("sfcn_mid_hdr_ban", bannerBuf)>
%undef bannerBuf
 
%% Include these for multiple levels of generated S-Functions
%openfile tmpBuf
#include "simstruc.h"
#include "%<Name>.h"
%closefile tmpBuf
%<SLibCacheCodeToFile("sfcn_mid_hdr_incl", tmpBuf)>
%undef tmpBuf

%% If we are using const blockio or parameters, extern them
%openfile externBuf
%if !LibParametersStructIsEmpty()
  extern %<tParametersType> %<tDefaultParameters>;
%endif
%if !LibConstBlockIOStructIsEmpty()
  %assign qualifiers = ""
  %if SLibCanConstBlockIOBeConst()
    %assign qualifiers = "const "
  %endif    
  extern %<qualifiers> %<tConstBlockIOType> %<tInvariantSignals>;
%endif
%closefile externBuf
%if !WHITE_SPACE(externBuf)
  %<SLibCacheCodeToFile("sfcn_extern_data_decl", externBuf)>
%endif
%undef externBuf

%openfile fcnsBuf
%% ===========================================================================
%% Parameter Tuning information to map parameters.
%%
%if ParameterTuning == 1

  #include "mdl_info.h"
  #include "%<Name>_pt.%<LangFileExt>"
%endif

%<SLibNoninlinedSfcnStaticFcn()>

%assign fcnAbstract = "Instance data for model: %<LibGetModelName()>"
%assign fcnName = "%<LibGetModelName()>_malloc"
%assign fcnReturns = "void *"
%assign fcnParams = "SimStruct *%<tChildSimStruct>"
%createrecord fcnRecs {Name fcnName; Returns fcnReturns; Params fcnParams; Abstract fcnAbstract; ...
  Category "model"; GeneratedBy "sfcnmid.tlc"; Type "Malloc"}
%<SLibDumpFunctionBanner(fcnRecs)>
%undef fcnRec
%<fcnReturns>%<fcnName>(%<fcnParams>)
{
  %<MIDLocalSDeclarations>\
  %<MIDLocalSRegistration>\
  %%
  %% Buffer up register code, and declare any accessed simstruct variables
  %%
  %openfile tmpBuffer
  %<LibDumpNonFiniteAssignmentCache()>\
  %<MIDSFunctionRegistration>\
  %<MIDBlockInstanceData>\
  %if !LibRegFcnUserDeclarationIsEmpty()
    %<"{">
    %<LibDumpRegFcnUserDeclarationCode()>
  %endif
  %<LibDumpRegFcnUserEntryCode()>\
  %<LibDumpRegFcnUserExitCode()>\
  %if !LibRegFcnUserDeclarationIsEmpty()
    %<"}">
  %endif
  %closefile tmpBuffer
  %if !WHITE_SPACE(tmpBuffer)
    {
      %<tmpBuffer>\
    }
  %endif
  
  return %<SLibGetNullDefinitionFromTfl()>;
}
%closefile fcnsBuf

%<SLibCacheCodeToFile("sfcn_mid_hdr_fcn_defn", fcnsBuf)>

%with ::CompiledModel
  %undef MIDLocalSDeclarations
  %undef MIDLocalSRegistration
  %undef MIDSFunctionRegistration
  %undef MIDBlockInstanceData
%endwith
%undef tmpBuffer
%undef fcnsBuf


%selectfile NULL_FILE

%endif  %% _SFCNMID_

%% [EOF] sfcnmid.tlc
