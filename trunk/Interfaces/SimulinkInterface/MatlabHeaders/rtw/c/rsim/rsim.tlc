%% SYSTLC: Rapid Simulation Target \
%% TMF: rsim_default_tmf MAKE: make_rtw EXTMODE: ext_comm


%% File: rsim.tlc
%% Abstract:
%%	System target file for the Rapid Simulation Target (rsim).
%%
%% $Revision: 1.27.4.28 $
%%
%% Copyright 1994-2011 The MathWorks, Inc.
%% Abstract: Rapid Simulation Target -- system target file.


%assign TargetType = "NRT"
%assign Language   = "C"
%assign tMdlRefSfcnS = "rtS"
%assign tMdlRefSfcnSType = "SimStruct *const"

%assign rsimIsNotModelReferenceTarget = CompiledModel.ModelReferenceTargetType == "NONE"
%assign rsimHasModelReferenceBlocks   = EXISTS(CompiledModel.ModelReferenceBlocks) &&...
  SIZE(CompiledModel.ModelReferenceBlocks, 0) > 0                               

%% Global variable "GenCPP" not computed yet.  Duplicate code here.
%assign rsimGenCPP = CompiledModel.ConfigSet.TargetLang == "C++" || FEVAL("eval","slfeature('ForceRTWCPP')")

%% When generating model reference code, or when 
%% a model contains model blocks, then we must use
%% the Simulink solvers because of the global timing engine.
%assign mrGlobalTiming = (!rsimIsNotModelReferenceTarget || rsimHasModelReferenceBlocks)

%if EXISTS("CompiledModel")
  %switch RSIM_SOLVER_SELECTION
    %case 1
      %% auto
      %if ISEQUAL(CompiledModel.SolverType, "VariableStep") || mrGlobalTiming
	%assign _RSIM_FULL_=1
      %endif
      %if ISEQUAL(CompiledModel.ModelIsLinearlyImplicit, "yes") && ISEQUAL(CompiledModel.SolverType, "FixedStep")
        %assign msg = ...
          "RSIM solver selection is configured to 'auto' but " ...
          "the model '" + CompiledModel.Name + "' is using fixed-step solver '" + ...
          CompiledModel.Solver + "' and specifies linearly implicit system of ODEs. " + ...
          "RSIM does not support linearly implicit systems with fixed step solvers " + ...
          "and RSIM solver selection configured to 'auto' or 'RTW fixed-step solvers'. "+ ...
          "Either change RSIM solver selection to use Simulink solver " ...
          "module or switch to a variable-step solver."
        %exit %<msg>
      %endif
      %break
    %case 2
      %assign _RSIM_FULL_=1
      %break
    %case 3
      %% use fixed step solvers
      %if ISEQUAL(CompiledModel.SolverType, "VariableStep")
	%assign msg = ...
	  "RSIM is configured to use fixed-step solvers, " + ...
	  "but the model is using variable-step solver '" + ...
	  CompiledModel.Solver + "'. " + ...
	  "Either change RSIM solver selection to use Simulink solver " ...
	    "module or switch to a fixed-step solver."
	%exit %<msg>
      %endif
      %if mrGlobalTiming
        %assign msg = ...
          "RSIM is configured to use fixed-step solvers, " + ...
          "but the model contains model blocks or we are generating " + ...
          "a model reference coder target.  Set the RSIM " + ...
          "solver selection to either 'Use Simulink solver module' or 'auto'."
        %exit %<msg>
      %endif
      %if ISEQUAL(CompiledModel.ModelIsLinearlyImplicit, "yes")
        %assign msg = ...
          "RSIM is configured to use fixed-step solvers, " + ...
          "but the model '" + CompiledModel.Name + "' specifies linearly implicit system of ODEs. " + ...
          "RSIM does not support linearly implicit systems with fixed-step solvers. " + ...
          "Change RSIM solver selection to use Simulink solver module."
        %exit %<msg>
      %endif
      %break
    %default
      %exit "Fatal Error: Invalid value " + ...
	"%<RSIM_SOLVER_SELECTION> for variable RSIM_SOLVER_SELECTION"
  %endswitch
%endif

%selectfile NULL_FILE
%assign _RSIM_            =  1
%assign GBLFrFStartIdx    = -1
%assign GBLFrFOutputIdx   = -1
%assign GBLFrFTermIdx     = -1
%assign GBLFrWksStartIdx  = -1
%assign GBLFrWksOutputIdx = -1
%assign DataTypeTransInfo =  1

%assign MatFileLogging = 1

%include "genmap.tlc"
%include "hookslib.tlc"
%include "funclib.tlc"

%% Prior to parsing name replacements strings for "to file" and
%% "from file" blocks, we malloc memory for these strings.
%% In typical code generation targets, BlockTypeSetup will initialize
%% numbers of blocks of a certain type, etc. However, since rsim_main
%% parses before model start, and we need to know the
%% number of "to file" and "from file" blocks, when the number of
%% these blocks is zero, we cannot rely on BlockTypeSetup for
%% this information.
%%
%% Whether a "from file" or "to file" block is used in model or not,
%% rsim.tlc can determine the number of instances -- including zero if
%% that is the case. Then, the parser can use this info to determine
%% whether or not to malloc and whether a user is trying to rename a
%% such a block type when none may exist in a model.


%openfile initGlobalParamBuffer

%assign numFrFiles = 0
%assign numToFiles = 0
%assign numFrFBlocks = 0
%assign numToFBlocks = 0
%assign numFromWksBlocks = 0
%foreach idx = CompiledModel.NumBlockTypeCounts
  %if CompiledModel.BlockTypeCount[idx].Type == "FromFile"
    %assign numFrFBlocks = %<CompiledModel.BlockTypeCount[idx].Count>
  %endif
  %if CompiledModel.BlockTypeCount[idx].Type == "ToFile"
    %assign numToFBlocks = %<CompiledModel.BlockTypeCount[idx].Count>
  %endif
  %if CompiledModel.BlockTypeCount[idx].Type == "FromWorkspace"
    %assign numFromWksBlocks = %<CompiledModel.BlockTypeCount[idx].Count>
  %endif
%endforeach

%if EXISTS(CompiledModel.UniqueFromFiles)
  %assign numFrFiles = SIZE(CompiledModel.UniqueFromFiles,1)
%endif

%if EXISTS(CompiledModel.UniqueToFiles)
  %assign numToFiles= SIZE(CompiledModel.UniqueToFiles,1)
%endif

%assign USERTWCAPI = TLC_FALSE

%assign USERTWCAPI = ...
  ( (EXISTS("RTWCAPISignals") && RTWCAPISignals == TLC_TRUE) || ...
    (EXISTS("RTWCAPIParams") && RTWCAPIParams == TLC_TRUE) )

%%
%% Sub models may need the RTWCAPi even though the user has not specified it so
%% This code is replicated from setuplib.tlc 
%%

%if !USERTWCAPI && rsimIsNotModelReferenceTarget && rsimHasModelReferenceBlocks 
  %assign dlo = CompiledModel.DataLoggingOpts
  %if ((dlo.StateSaveName != "" || dlo.FinalStateName != "") && ...
    (MatFileLogging == 1))
    %if !EXISTS("BlockIOSignals") && !EXISTS("ParameterTuning")
      %assign USERTWCAPI = TLC_TRUE
    %endif
  %endif
%endif

%%
%%Top Level RSim executable does not use the rtModel
%%so the RTWCAPI data structure is created as a global
%%variable. To be uniform  across targets, get and set
%%macros are defined 
%%

%if(USERTWCAPI)
  %assign ::RSimRTWCAPIType = "DataMapInfo"  
  %assign ::RSimRTWCAPIVar  = "rt_dataMapInfo" 
  %assign ::RSimRTWCAPIVarPtr  = "%<RSimRTWCAPIVar>Ptr"  
%endif
%if ::rsimGenCPP
extern "C" {
%endif
%if rsimIsNotModelReferenceTarget
  const int_T gblNumToFiles = %<numToFiles>;
  const int_T gblNumFrFiles = %<numFrFiles>;
  const int_T gblNumFrWksBlocks = %<numFromWksBlocks>;
  
  %if USERTWCAPI   
    static %<RSimRTWCAPIType>  %<RSimRTWCAPIVar>;
    %<RSimRTWCAPIType>* %<RSimRTWCAPIVarPtr> = &%<RSimRTWCAPIVar>;
  %endif  
  
  %assign buildDir        = CompiledModel.RTWGenSettings.RelativeBuildDir
  %assign modelName       = CompiledModel.Name
  %assign fileNameSuffix  = "_Jpattern.mat"
  %assign filesep         = FEVAL("filesep")
  %assign fullpath        = "%<buildDir>%<filesep>%<modelName>%<fileNameSuffix>"
  %assign FULLPATH        = LibChangeSlashToDoubleSlash(fullpath)
  const char *gblSlvrJacPatternFileName = "%<FULLPATH>";
 
  %% Add Information for -i option
  %with CompiledModel
    %assign numRootInportBlks = ExternalInputs.NumExternalInputs 
    %assign numModelInputs    = NumModelInputs

    /* Root inports information  */
    const int_T gblNumRootInportBlks = %<numRootInportBlks>;
    const int_T gblNumModelInputs    = %<numModelInputs>;
    
    extern rtInportTUtable *gblInportTUtables; 
    extern const char *gblInportFileName;
    
    %assign comma = ""
    
    %if NumModelInputs > 0 
      %assign temp =""            
    %else   
      %assign temp ="-1"
    %endif
    
    %assign dimsStr        = temp           
    %assign dataTypeIdxStr = temp
    %assign isComplexStr   = temp 
    %assign isInterpolStr  = temp  
    %assign inportContinuousStr = temp
    
    %foreach idx = numRootInportBlks  
      %assign extInp         = ExternalInputs.ExternalInput[idx]
      %assign cgTypeIdx      = LibGetRecordCGTypeIdx(extInp)
      %assign numDims        = LibCGTypeNumDimensions(cgTypeIdx)
      %assign dims           = LibCGTypeDimensions(cgTypeIdx)
    
      %assign dimsStr        = dimsStr        + comma + "%<dims[0]>"                
      
      %assign dataTypeIdxStr = dataTypeIdxStr + comma \
      + "%<LibCGTypeToSLType(cgTypeIdx)>"
    
      %assign isComplexStr   = isComplexStr   + comma \
      + "%<LibCGTypeIsComplex(cgTypeIdx)>"
      
      %assign isInterpolStr   = isInterpolStr + comma \
      + "%<extInp.Interpolation>"
    
      %assign inportContinuousStr   = inportContinuousStr + comma \
      + "%<LibIsContinuous(extInp.TID)>"
      
      %if numDims > 1    
        %assign dimsStr     = dimsStr + ", " + "%<dims[1]>"
      %else 
        %assign dimsStr     = dimsStr + ", " + "1" 
      %endif
      
      %assign comma    = ", "       
      
    %endforeach 
    const int_T gblInportDataTypeIdx[]   = {%<dataTypeIdxStr>};
    const int_T gblInportDims[]          = {%<dimsStr>} ;                   
    const int_T gblInportComplex[]       = {%<isComplexStr>};
    const int_T gblInportInterpoFlag[]   = {%<isInterpolStr>};    
    const int_T gblInportContinuous[]    = {%<inportContinuousStr>};
  
  %endwith
  
%endif
%if numFrFBlocks != 0
    FrFInfo %<CompiledModel.Name>_gblFrFInfo[%<numFrFBlocks>];
%endif
%if ::rsimGenCPP
}
%endif

%closefile initGlobalParamBuffer
%<LibPrmFileCustomCode(initGlobalParamBuffer,"header")>


%if rsimIsNotModelReferenceTarget
%openfile externGlobalParamBuffer
%if ::rsimGenCPP
#ifdef __cplusplus
extern "C" {
#endif
%endif
extern const int_T gblNumToFiles;
extern const int_T gblNumFrFiles;
extern const int_T gblNumFrWksBlocks;
extern rtInportTUtable *gblInportTUtables; 
extern const char *gblInportFileName;
extern const int_T gblNumRootInportBlks;
extern const int_T gblNumModelInputs;
extern const int_T gblInportDataTypeIdx[];
extern const int_T gblInportDims[];         
extern const int_T gblInportComplex[];       
extern const int_T gblInportInterpoFlag[];   
extern const int_T gblInportContinuous[];

%%
%%Top Level RSim executable does not use the rtModel
%%so the RTWCAPI data structure is created as a global
%%variable. To be uniform  across targets, get and set
%%macros are defined 
%%
%if USERTWCAPI
extern %<RSimRTWCAPIType>* %<RSimRTWCAPIVarPtr>; 
%endif

%if ::rsimGenCPP
#ifdef __cplusplus
}
#endif
%endif


%closefile externGlobalParamBuffer
%<LibHeaderFileCustomCode(externGlobalParamBuffer,"trailer")>
%endif

%include "codegenentry.tlc"

%% The contents between 'BEGIN_RTW_OPTIONS' and 'END_RTW_OPTIONS' in this file
%% are used to maintain backward compatibility to R13 and preR13 custom target 
%% file only.  If you want to use this file as a template to develop your
%% own system target file, you need to remove the 'CONFIGSET_TARGET_COMPONENT'
%% section at the end of this file.
%%
/%
  BEGIN_RTW_OPTIONS

  rtwoptions(1).prompt        = 'RSIM code generation options';
  rtwoptions(1).type          = 'Category';
  rtwoptions(1).enable        = 'on';
  rtwoptions(1).default       = 2;   % number of items under this
                                     % category excluding this one.
  rtwoptions(1).popupstrings  = '';
  rtwoptions(1).tooltip       = '';
  rtwoptions(1).callback      = '';
  rtwoptions(1).opencallback  = '';
  rtwoptions(1).closecallback = '';
  rtwoptions(1).tlcvariable   = '';
  rtwoptions(1).makevariable  = '';

  rtwoptions(2).prompt        = 'Solver selection';
  rtwoptions(2).type          = 'Popup';
  rtwoptions(2).default       = 'auto';
  rtwoptions(2).value         = 1;
  rtwoptions(2).popupstrings  = ['auto|', ...
                                 'Use Simulink solver module|', ...
			         'Use fixed-step solvers'];
  rtwoptions(2).tlcvariable   = 'RSIM_SOLVER_SELECTION';
  rtwoptions(2).makevariable  = 'RSIM_SOLVER_SELECTION';
  rtwoptions(2).tooltip       = ...
    ['Selects the solver to use with RSIM. The ''auto'' ',sprintf('\n'), ...
    'setting uses Simulink solver module if the model ',sprintf('\n'), ...
    'uses a variable-step solver, and uses fixed-step ',sprintf('\n'), ...
    'solvers, otherwise.'];

  rtwoptions(3).prompt       = 'PC MATLAB ROOT';
  rtwoptions(3).type         = 'NonUI';
  rtwoptions(3).default      = strrep(matlabroot,'\','\\');
  rtwoptions(3).tlcvariable  = '';
  rtwoptions(3).makevariable = 'PCMATLABROOT';
  rtwoptions(3).tooltip      = '';

  rtwoptions(4).prompt         = 'External Mode code generation options';
  rtwoptions(4).type           = 'Category';
  rtwoptions(4).enable         = 'on';
  rtwoptions(4).default        = 5;   % number of items under this category
                                      % excluding this one.
  rtwoptions(4).popupstrings  = '';
  rtwoptions(4).tlcvariable   = '';
  rtwoptions(4).tooltip       = '';
  rtwoptions(4).callback      = '';
  rtwoptions(4).opencallback  = '';
  rtwoptions(4).closecallback = '';
  rtwoptions(4).makevariable  = '';

  rtwoptions(5).prompt         = 'External mode';
  rtwoptions(5).type           = 'Checkbox';
  rtwoptions(5).default        = 'off';
  rtwoptions(5).tlcvariable    = 'ExtMode';
  rtwoptions(5).makevariable   = 'EXT_MODE';
  rtwoptions(5).tooltip        = ...
    ['Adds communication support',sprintf('\n'), ...
    'for use with Simulink external mode'];

  % Enable/disable other external mode controls.
  rtwoptions(5).callback       = [ ...
    'DialogFig = get(gcbo,''Parent'');',...
    'sl(''extmodecallback'', ''extmode_checkbox_callback'', DialogFig);', ...
    ];

  rtwoptions(6).prompt         = 'Transport';
  rtwoptions(6).type           = 'Popup';
  rtwoptions(6).default        = 'tcpip';
  rtwoptions(6).popupstrings   = ['tcpip|', ...
                                  'serial'];
  rtwoptions(6).tlcvariable    = 'ExtModeTransport';
  rtwoptions(6).makevariable   = 'EXTMODE_TRANSPORT';
  rtwoptions(6).tooltip        = ...
    ['Chooses transport mechanism for external mode'];

  % Synchronize with "External mode" checkbox option
  rtwoptions(6).opencallback   = [ ...
    'ExtModeTable = {''tcpip''         ''ext_comm'';', ...
                     '''serial'' ''ext_serial_win32_comm''};', ...
    'ud = DialogUserData;', ...
    'ud = extmodecallback(''transport_popup_opencallback'',model,DialogFig,ud,ExtModeTable);', ...
    'DialogUserData = ud;', ...
    ];

  % Set extmode mex-file according to extmode transport mechanism.
  rtwoptions(6).closecallback  = [ ...
    'ExtModeTable = {''tcpip''         ''ext_comm'';', ...
                     '''serial'' ''ext_serial_win32_comm''};', ...
    'ud = DialogUserData;', ...
    'ud = extmodecallback(''transport_popup_closecallback'',model,DialogFig,ud,ExtModeTable);', ...
    'DialogUserData = ud;', ...
    ];

  rtwoptions(7).prompt         = 'Static memory allocation';
  rtwoptions(7).type           = 'Checkbox';
  rtwoptions(7).default        = 'off';
  rtwoptions(7).tlcvariable    = 'ExtModeStaticAlloc';
  rtwoptions(7).makevariable   = 'EXTMODE_STATIC_ALLOC';
  rtwoptions(7).tooltip        = ...
    ['Forces external mode to use static',sprintf('\n'), ...
    'instead of dynamic memory allocation'];

  % Enable/disable external mode static allocation size selection.
  rtwoptions(7).callback       = [ ...
    'DialogFig = get(gcbo,''Parent'');',...
    'sl(''extmodecallback'', ''staticmem_checkbox_callback'', DialogFig);', ...
    ];

  % Synchronize with "External mode" checkbox option
  rtwoptions(7).opencallback   = [ ...
    'extmodecallback(''staticmem_checkbox_opencallback'',DialogFig);', ...
    ];

  rtwoptions(8).prompt         = 'Static memory buffer size';
  rtwoptions(8).type           = 'Edit';
  rtwoptions(8).default        = '1000000';
  rtwoptions(8).tlcvariable    = 'ExtModeStaticAllocSize';
  rtwoptions(8).makevariable   = 'EXTMODE_STATIC_ALLOC_SIZE';
  rtwoptions(8).tooltip        = ...
    ['Size of external mode static allocation buffer'];

  % Synchronize with "External mode static allocation" option
  rtwoptions(8).opencallback   = [ ...
    'extmodecallback(''staticmemsize_edit_opencallback'',DialogFig);', ...
    ];

  rtwoptions(9).prompt       = 'External mode testing';
  rtwoptions(9).type         = 'NonUI';
  rtwoptions(9).default      = '0';
  rtwoptions(9).tlcvariable  = 'ExtModeTesting';
  rtwoptions(9).makevariable = 'TMW_EXTMODE_TESTING';
  rtwoptions(9).tooltip      = ...
    ['Internal testing flag for Simulink external mode'];

if 0
  rtwoptions(10).prompt        = 'Make deployable directory';
  rtwoptions(10).type          = 'Checkbox';
  rtwoptions(10).default       = 'off';
  rtwoptions(10).tlcvariable   = 'MAKE_DEPLOY_DIR';
  rtwoptions(10).makevariable  = 'MAKE_DEPLOY_DIR';
  rtwoptions(10).tooltip       = '';

  rtwoptions(11).prompt        = 'Use system library';
  rtwoptions(11).type          = 'Checkbox';
  rtwoptions(11).default       = 'off';
  rtwoptions(11).tlcvariable   = 'USE_LIB_PATH';
  rtwoptions(11).makevariable  = 'USE_LIB_PATH';
  rtwoptions(11).tooltip       = '';
end

  %----------------------------------------%
  % Configure code generation settings %
  %----------------------------------------%

  rtwgensettings.IsRSim = 'yes';
  rtwgensettings.BuildDirSuffix = '_rsim_rtw';

  END_RTW_OPTIONS
 %/

%% The content between 'BEGIN_CONFIGSET_TARGET_COMPONENT' and 
%% 'END_CONFIGSET_TARGET_COMPONENT' is for the MathWorks internal use
%% only.  You must remove this section if you intend to use this file
%% as a template for your own system target development.
%%
/%
  BEGIN_CONFIGSET_TARGET_COMPONENT

  targetComponentClass = 'RTW.RSimTargetCC';

  END_CONFIGSET_TARGET_COMPONENT
 %/
